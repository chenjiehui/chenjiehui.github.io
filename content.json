[{"title":"重温PHP【1】——基础语法和类型","date":"2017-03-17T16:00:00.000Z","path":"2017/03/18/review-php-01/","text":"前言：因为听了有个PHP高手说他把PHP官方手册读了不下8遍，深以为然，孰能生巧这个道理放在哪里都没有错。所以我打算开始重温PHP手册，鉴于自己目前的英语写作能力还不行，就先挪用官方的英语描述来总结该学习笔记，对于不懂的英文词句会特殊用中文注释，在温故知新的同时也加强自己的英语水平。 1、PHP tagsWhen PHP parses a file, it look for opening and closing tags, which are &lt;?phpand ?&gt; which tell PHP to start and stop interpreting the code between them.if a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file. This prevents accidental whitespace or new lines being added after the PHP closing tag, which may cause unwanted effects because PHP will start output buffering when there is no intention from the programmer to send any output at that point in the script. 12345&lt;?php echo \"hello chenjiehui!\"; //...more code echo \"last statement.\"; // the script ends here with no PHP closing tag 2、Escaping from HTMLEverything outside of a pair of opening and closing tags is ignored by the PHP parser which allows PHP files to have mixed content. This allows PHP to be embedded in HTML documents.But there is one exception that in the middle of a conditional statement in which case the interpreter will determine the outcome of the confitional before making a decision of what to skip over. See the next example. Using structures with conditions. 12345&lt;?php if($expression == true) : ?&gt; This will show if the expression is true.&lt;?php else : ?&gt; Otherwise this will show.&lt;?php endif; ?&gt; In this example PHP will ship the blocks where the condition is not met, even though they are outside of the PHP open/close tags;For outputting large blocks of text, dropping out of PHP parsing mode is generally more effcient than sending all of text through echo or print. Starting with PHP 5.4, short echo tag &lt;?= is always recongnized and vaild, regardless of the short_open_tag setting. 3、CommentsPHP support ‘C’,’C++’ and Unix shell-style(Perl style) comments. For example: 1234567&lt;?php echo 'this is a test'; //this is a one line c++ style comment /* This is a multi line comment yet another line of comment */ echo 'This is yet another test'; echo 'one Final Test'; # This is a one-line shell-style comment?&gt; ##4、typePHP supports eight primitive types(原始数据类型): Four scalar types(标量类型): boolean integer float(aka(又称作) double) string Three compound types: array object callable And finally two special types resource NULL This manual also introduces some pseudo-types(伪类型) for readability reasons： mixed number callback array|object void And the pseudo-variable $…The type of the variable is not usually set by programmer; rather(确切的说), it is decided at runtime by PHP depending on the context in which that variable is used. Note: To check the type and variable of the expression, use the var_dump() function.To get a human-readable representation of a type for debugging, use the gettype() function. To check for a certain type, do not use gettype(), but rather the is_type functions. Some examples: 123456789101112131415&lt;?php $a_bool = TRUE ; $a_str = \"foo\"; $a_str2 = 'foo'; $an_int = 12; echo gettype($a_bool);//print out: boolean echo gettype($a_str);//print out: string if(is_int($an_int))&#123; $an_int+=4; &#125; if (is_string($a_bool)) &#123; echo \"String: $a_bool\"; &#125;?&gt;&gt; To forcibly(强制地) convert a variable to a certain type, either cast(eg: (bool)$a_str) or use the settype() function on it.Note that a variable may be evaluated(被评估) with diffrent values in certain situations, depending on what type it is at the time.","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.tenpercent.top/tags/PHP/"}]},{"title":"操作系统【1】——导论","date":"2017-03-05T16:00:00.000Z","path":"2017/03/06/operating-system-01/","text":"操作系统是管理计算机硬件的程序，它还为应用程序提供基础，并充当计算机硬件和计算机用户的中介。大型机的操作系统设计主要目的是为了充分优化硬件的使用率，个人计算机的操作系统是为了能够支持从复杂游戏到商业应用的各种事物，手持计算机的操作系统是为了给用户一个可以与计算机方便的交互并执行程序的环境。因此，有的操作系统设计是为了方便，有的是为了高效，而有的设计目标则是兼而有之。 本章目标 提供对操作系统主要部件的浏览 提供基本的计算机系统体系结构的概述 1.1 操作系统做什么从计算机的角度来看，操作系统是与硬件最为密切的程序。计算机系统可能有许多资源，用来解决CPU时间、内存时间、文件存储空间、I/O设备等问题。操作系统管理这些资源。面对许多甚至冲突的请求，操作系统必须决定如何为各个程序和用户分配资源，以便计算机系统能够有效而公平的运行。众所周知，资源分配对多用户访问主机或微型计算机特别重要。操作系统是控制程序。控制程序管理用户程序的执行以防止计算机资源的错误使用或使用不当。它特别关注I/O设备的操作和控制。 1.1.1 定义操作系统一个比较公认的定义是，操作系统是一直运行在计算机上的程序（通常称之为内核），其他程序为系统程序和应用程序。 1.2 计算机系统组织1.2.1 计算机系统操作当计算机打开电源或重启时，计算机开始运行，它需要运行一个初始化程序，该初始化程序或引导程序（bootstrap program）比较简单，通常位于ROM或EEPROM中，称为计算机硬件中的固件。它初始化系统中的所有部分，包括CPU寄存器、设备控制器和内存内容。引导程序必须知道如何装入操作系统并开始执行系统。为了完成这一目标，引导程序必须定位操作系统内核并把它转入内存，接着，操作系统孔i是执行第一个进程如init，并等待事件的发生。事件的发生通常通过硬件或软件中断（interrupt）。硬件可随时通过系统总线向CPU发出信号，以触发中断。软件通过执行特别操作如系统调用（system call）也称为监视器调用（monitor call））也能触发中断。 1.2.2 存储结构计算机程序必须在内存（或随机访问内存（random access memory）RAM ）中以便于运行。内存是处理器可以直接访问的唯一的大容量存储区域（数兆到数千兆字节）。它通常是用被称为动态随机访问内存（dynamic random access memory,DRAM）的半导体技术来实现的，是一组内存字的数组，每个字都有其地址。通过对特定内存地址执行一系列load或store指令来实现交互。指令load能将内存中的字转移到CPU的寄存器中，而指令store能将寄存器的内容移到内存。除了显式使用load和store外，CPU可自动从内存中装入指令来执行。 一个典型指令执行周期（在冯诺依曼体系结构上执行时）首先从内存中获取指令，并保存在指令寄存器中。接着，指令被解码，并可能导致从内存中获取操作数或将操作数保存在内部寄存器中。在指令完成对操作数的执行，其结果可以存回到内存。注意内存单元只看见内存地址流，它并不知道它们是如何产生，或者它们是什么地址。相应地，可忽视程序如何产生内存地址，只对程序运行所产生的地址序列感兴趣。 由于内存太小以及内存是易失性存储设备，所以绝大多数计算机需要提供辅存，最常用的辅存设备为磁盘，它能存储程序和数据。绝大多数程序（浏览器，编译器，制表软件等）保存在磁盘上，直到要执行时才装入到内存中。许多程序都是使用磁盘来作为它们所处理信息的来源和目的。因此，适当的管理磁盘存储对计算机系统来说十分重要。 存储设备层次 寄存器 =&gt; 高速缓存 =&gt; 主存 =&gt; 电子磁盘 =&gt; 磁盘 =&gt; 光盘 =&gt; 磁带 1.3 计算机系统体系结构 单处理器系统 绝大多数系统采用单处理器，在单处理器系统中，有一个主CPU能够执行一个通用的指令集，包括来自于用户进程的指令。 多处理器系统 多处理器系统有多个紧密通信的CPU，它们共享计算机总线，有时还有时钟、没存和外设等。多处理器系统主要有三个优点： 1、增加吞吐量：通过增加处理器的数量，希望能够在更短的时间内做更多的事情。用N个处理器的加速比不是N，而是比N小。当多个CPU在同一件事情上时，为了使得各部分能正确工作，会产生一定的额外开销。这些开销，加上对共享资源的竞争，会降低因为增加了CPU的期望增益。这与一组N为程序员在一起紧密地工作，并不能完成N倍的单个程序员的工作量类似。 2、规模经济：多处理器系统比单个处理器系统能节省资金。 3、增加可靠性：如果将功能分布在多个处理器上，那么单个处理器的失灵将不会使得整个系统停止，只会使它变慢。如果有一个处理器出现故障，那么剩下的处理器会分担起故障处理器的那部分工作。 1.3.1 集群系统多CPU系统的另一种类型是集群系统（clustered system）。与多处理器系统一样，集群系统将多个CPU集中起来完成计算任务。然而，集群系统与多处理器系统不同，它是由两个或多个独立的系统耦合起来的。集群系统通常用来提供高可用服务，这意味着即使集群中的一个或多个系统出错，服务仍在运行。 集群分为非对称集群和对称集群 非对称集群 一台机器处于热备份模式（hot standby mode），而另一台运行应用程序。热备份主机只监视活动服务器。如果该服务器失效，那么热备份主机会成为现行服务器 对称集群 两个或者多个主机都运行应用程序，它们互相监视。这种模式因为充分使用了现有硬件，所以更为高效。","tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://www.tenpercent.top/tags/计算机基础/"}]}]