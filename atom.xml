<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码 | 自由</title>
  <icon>https://www.gravatar.com/avatar/c7953fb7f3bc4f8181191e5e6f352f05</icon>
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tenpercent.top/"/>
  <updated>2019-12-29T13:25:47.912Z</updated>
  <id>http://www.tenpercent.top/</id>
  
  <author>
    <name>Jeffrey</name>
    <email>chenjiehui0807@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>InnoDB 缓冲池(buffer pool) 工作原理</title>
    <link href="http://www.tenpercent.top/2019/11/08/Innodb-buffer-pool/"/>
    <id>http://www.tenpercent.top/2019/11/08/Innodb-buffer-pool/</id>
    <published>2019-11-07T16:00:00.000Z</published>
    <updated>2019-12-29T13:25:47.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓冲池的用处"><a href="#缓冲池的用处" class="headerlink" title="缓冲池的用处"></a>缓冲池的用处</h2><p>对于使用 InnoDB 作为存储引擎的表来说，不管是用于存储用户数据的索引，还是各种系统数据，都是以页的形式存放在表空间中的，而所谓的表空间只是 InnoDB 对文件系统上一个或几个实际文件的抽象，也就实际数据说到底还是存储在磁盘上的。</p><p>磁盘的速度很慢，怎么能配得上“快如闪电”的CPU 呢？</p><p>InnoDB 存储引擎在处理客户端的请求时，当需要访问某个页的数据时，就会把完整的页的数据全部加载到内存中。</p><p>也就是说即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。</p><a id="more"></a><h2 id="缓冲池内部组成"><a href="#缓冲池内部组成" class="headerlink" title="缓冲池内部组成"></a>缓冲池内部组成</h2><p>缓冲池中默认的缓存页大小和在磁盘上默认的页大小是一样的，一般是16KB。</p><p>为了更好的管理这些在缓冲池中的缓存页，InnoDB为每一个缓存页都创建了一些所谓的控制信息。</p><p>这些控制信息包括该页所属的表空间编号、页号、缓存页在缓冲池中的地址、链表节点信息、一些锁信息。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204548.png" alt></p><p>缓冲池的一些参数：<br>SHOW VARIABLES LIKE ‘innodb_buffer_pool%’;<br>free 链表<br>当最初启动MySQL服务器的时候，此时并没有真实的磁盘页被缓存到缓冲池中，之后随着程序的运行，会不断的有磁盘上的页被缓存到缓冲池中。</p><p>从磁盘上读取一个页到缓冲池中的时候该放到哪个缓存页的位置呢？</p><p><em>思路：区分缓冲池中哪些缓存页是空闲的，哪些已经被使用了。</em></p><p>把所有空闲的缓存页对应的控制块作为节点放到一个链表中，这个链表叫作 free 链表。</p><h2 id="flush-链表"><a href="#flush-链表" class="headerlink" title="flush 链表"></a>flush 链表</h2><p>如果我们修改了缓冲池中某个缓存页的数据，那它就和磁盘上的页不一致了，这样的缓存页也被称为脏页（dirty page）。</p><p>最简单的做法就是每发生一次修改就立即同步到磁盘上对应的页上，但是频繁的往磁盘中写数据会严重的影响程序的性能。</p><p>所以，Innodb 创建了一个存储脏页的链表，凡是修改过的缓存页对应的控制块都会作为一个节点加入到一个链表中，在未来的某个时间点进行同步。这个链表叫做 flush 链表。</p><h2 id="缓存不够的窘境"><a href="#缓存不够的窘境" class="headerlink" title="缓存不够的窘境"></a>缓存不够的窘境</h2><p>缓冲池对应的内存大小毕竟是有限的，如果需要缓存的页占用的内存大小超过了缓冲池大小，也就是已经没有多余的空闲缓存页的时候怎么办？</p><p>把某些旧的缓存页从缓冲池中移除，然后再把新的页放进来。</p><p>移除哪些缓存页？这就需要引入缓存淘汰机制了。</p><h2 id="缓存淘汰机制"><a href="#缓存淘汰机制" class="headerlink" title="缓存淘汰机制"></a>缓存淘汰机制</h2><p>缓存淘汰有以下两个目的：</p><ul><li>实现淘汰</li><li>使缓存命中率高</li></ul><p>缓存淘汰机制比较常用的是用 LRU （Least recently used）算法。</p><h3 id="传统LRU"><a href="#传统LRU" class="headerlink" title="传统LRU"></a>传统LRU</h3><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204614.png" alt></p><p>LRU 的两种情况：</p><p>（1）页已经在缓冲池里，那就只做“移至”LRU头部的动作，而没有页被淘汰；</p><p>（2）页不在缓冲池里，除了做“放入”LRU头部的动作，还要做“淘汰”LRU尾部页的动作；</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204632.png" alt></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204651.png" alt></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204705.png" alt></p><p>在 InnoDB 中，传统的 LRU 会遇到两个问题：</p><p>（1）预读失效；</p><p>（2）缓冲池污染；</p><p>什么是预读失效？</p><p>由于预读 (Read-Ahead)，提前把页放入了缓冲池，但最终 MySQL 并没有从页中读取数据，称为预读失效。</p><p>如何对预读失效进行优化？</p><p>要优化预读失效，思路是：</p><p>（1）让预读失败的页，停留在缓冲池 LRU 里的时间尽可能短；</p><p>（2）让真正被读取的页，才挪到缓冲池 LRU 的头部；</p><p>以保证，真正被读取的热数据留在缓冲池里的时间尽可能长。</p><p>具体方法是：</p><p>（1）将LRU分为两个部分：</p><ul><li><p>new 区(new sublist)</p></li><li><p>old 区(old sublist)</p></li></ul><p>（2）两个区首尾相连，即：new 区的尾(tail)连接着 old 区的头(head)；</p><p>（3）新页（例如被预读的页）加入缓冲池时，只加入到 old 区头部：<br>如果数据真正被读取（预读成功），才会加入到 new 区的头部<br>如果数据没有被读取，则会比 new 区里的“热数据页”更早被淘汰出缓冲池</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204718.png" alt></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204732.png" alt></p><p>改进版缓冲池LRU能够很好的解决“预读失败”的问题。</p><p>查看系统变量 innodb_old_blocks_pct 的值来确定old区域在LRU链表中所占的比例<br>SHOW VARIABLES LIKE ‘innodb_old_blocks_pct’;</p><p>什么是 MySQL 缓冲池污染？<br>当某一个SQL语句，要批量扫描大量数据时，可能导致把缓冲池的所有页都替换出去，导致大量热数据被换出，MySQL性能急剧下降，这种情况叫缓冲池污染。</p><p>例如，有一个数据量较大的用户表，当执行<br>select * from user where name like “%test%”;</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191229204750.png" alt></p><p>要优化缓冲池污染，思路是：</p><p>（1）不让批量扫描的大量数据进入到 new 区；</p><p>（2）让真正被读取的页，才挪到缓冲池 LRU 的头部；</p><p>具体实现：<br>加入了一个“old 区停留时间”的机制：<br>在 old 区域的缓存页进行第一次访问时就在它对应的控制块中记录下来这个访问时间，如果后续再次访问的时间与第一次访问的时间在某个时间间隔内（即该缓存页在 old 区的存在时间在某个时间间隔内），那么该页面就不会被从old 区移动到 new 区的头部。</p><p>上述的全表扫描执行：</p><p>(1) 扫描过程中，需要新插入的数据页，都被放到old区</p><p>(2) 一个数据页会有多条记录，因此一个数据页会被访问多次</p><p>(3) 由于是顺序扫描,数据页的第一次被访问和最后一次被访问的时间间隔不会超过1S，因此还是会留在old区</p><p>(4) 继续扫描，之前的数据页再也不会被访问到，因此也不会被移到 new 区，最终很快被淘汰</p><p>这个间隔时间是由系统变量 innodb_old_blocks_time 控制的。</p><p><code>SHOW VARIABLES LIKE &#39;innodb_old_blocks_time&#39;;</code></p><p>配置缓冲池时的注意事项<br>innodb_buffer_pool_size<br> innodb_buffer_pool_chunk_size × innodb_buffer_pool_instances 的倍数（这主要是想保证每一个 缓冲池 实例中包含的 chunk 数量相同）。</p><p>查看Buffer Pool的状态信息</p><p><code>SHOW ENGINE INNODB STATUS\G</code></p><p>一些参数如下：</p><p>Total memory allocated ：代表 Buffer Pool 向操作系统申请的连续内存空间大小，包括全部控制块、缓存页、以及碎片的大小。</p><p>Buffer pool size：代表该 Buffer Pool 可以容纳多少缓存页，单位是页</p><p>Free buffers：代表当前 Buffer Pool 还有多少空闲缓存页，也就是 free 链表中还有多少个节点。</p><p>Database pages：代表 LRU 链表中的页的数量，包含 new 和 old 两个区域的节点数量。</p><p>Old database pages：代表 LRU 链表 old 区域的节点数量。</p><p>Modified db pages：代表脏页数量，也就是 flush 链表中节点的数量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、磁盘太慢，用内存作为缓存很有必要。</p><p>2、缓冲池本质上是InnoDB向操作系统申请的一段连续的内存空间，可以通过innodb_buffer_pool_size 来调整它的大小。</p><p>3、InnoDB 使用了许多链表来管理缓冲池。</p><p>4、缓冲池的常见管理算法是 LRU</p><p>5、InnoDB 对普通 LRU 进行了优化：分为 new 区和 old 区，加入“停留时间”机制。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓冲池的用处&quot;&gt;&lt;a href=&quot;#缓冲池的用处&quot; class=&quot;headerlink&quot; title=&quot;缓冲池的用处&quot;&gt;&lt;/a&gt;缓冲池的用处&lt;/h2&gt;&lt;p&gt;对于使用 InnoDB 作为存储引擎的表来说，不管是用于存储用户数据的索引，还是各种系统数据，都是以页的形式存放在表空间中的，而所谓的表空间只是 InnoDB 对文件系统上一个或几个实际文件的抽象，也就实际数据说到底还是存储在磁盘上的。&lt;/p&gt;
&lt;p&gt;磁盘的速度很慢，怎么能配得上“快如闪电”的CPU 呢？&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎在处理客户端的请求时，当需要访问某个页的数据时，就会把完整的页的数据全部加载到内存中。&lt;/p&gt;
&lt;p&gt;也就是说即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MySQL" scheme="http://www.tenpercent.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>当我们在谈索引的时候，我们在谈什么</title>
    <link href="http://www.tenpercent.top/2019/10/17/mysql-index-1/"/>
    <id>http://www.tenpercent.top/2019/10/17/mysql-index-1/</id>
    <published>2019-10-16T16:00:00.000Z</published>
    <updated>2019-10-17T14:43:13.991Z</updated>
    
    <content type="html"><![CDATA[<p>一句话总结：一个索引就是一棵 B+ 树。</p><p>那么这个 B+ 树是什么样子的呢？</p><p>数据存储在叶子节点，中间节点存目录项。</p><p>那么，</p><p>叶子节点啥样的？</p><p>中间节点啥样的？</p><p>要知道节点的结构，就得先知道 InnoDB 管理存储空间的基本单位 —— 页。</p><p>InnoDB 引擎将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，页的大小一般为 16 KB。InnoDB 设计了许多种不同类型的页，比如存放表数据记录的页，存放表空间头部信息的页，存放 Insert Buffer 信息的页，存放 undo 日志的页等等，而这之中存放表中索引数据记录的页即数据页就是 B+ 数的叶子节点。</p><a id="more"></a><h3 id="数据页"><a href="#数据页" class="headerlink" title="数据页"></a>数据页</h3><p>数据页中由多个部分组成，不同部分有不同的作用，其结构如下图：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191013223331.png" alt></p><p>其中，各个部分的作用如下：</p><ul><li>File Header</li></ul><p>File Header 是各种类型的页都有的部分，它描述了一些针对各种页都通用的一些信息，比方说这个页的编号是多少，它的上一个页、下一个页分别是谁等信息。通过 File Header 存储的上一页下一页的信息，各个数据页可以组成一种双向链表的结构。</p><ul><li>Page Header</li></ul><p>Page Header 用来存储本页中已经存储了多少条记录，第一条记录的地址是什么，页目录中存储了多少个槽等。</p><ul><li>Infimum + Supremum    </li></ul><p>InnoDB 定义的两条分别为最小记录与最大记录的伪记录</p><ul><li>User Records </li></ul><p>User Records 插入数据库的记录存储的地方，一开始生成页的时候，并没有 User Records 这部分，每当插入一条记录后，都会从 Free Space 部分申请一个记录大小的空间划分到 User Records 部分，当插入的记录越来越多导致 Free Space 用完之后，也就意味着这个也使用完了，要再插入新记录，就需要申请新的页了。每条记录通过 next_record 属性记录着下一条记录的地址偏移量，即所有记录实际上是一个单向链表的结构。记录里的 record_type 属性值为 0。</p><ul><li>Page Directory </li></ul><p>为了便于查找， InnoDB 将 User Records 里的记录划分为多个组，每个组的最后一条记录的地址偏移量取出来放在 Page Directory 中，这个地址偏移量被称为槽（Slot），所以 Page Directory 就是由槽组成的。</p><p>所以在页中要查找一条记录的过程是：通过主键值用二分法确定要查找的记录位于哪个槽所对应的组中，在对应的组里遍历（每个组里包含的记录只能是 1 ~ 8 条）找到对应的记录。</p><ul><li>File Trailer</li></ul><p>File Trailer 是用来校验页是否完整的，确保数据在内存和磁盘间同步不会有差错。</p><p>以上就是数据页的结构，所以，索引的叶子节点就是存有被设为索引的记录的数据页。</p><h2 id="索引的结构"><a href="#索引的结构" class="headerlink" title="索引的结构"></a>索引的结构</h2><p>上面说到数据页之间是通过 File Header 里记录的信息来找到上一页和下一页的信息，那么如何找到第一页呢？这里就得需要有目录项了，每个目录项包括两个部分：页的用户记录中最小的主键值和页号。因为存储的记录会很多导致目录项也很多，所以为了方便对目录项进行存放和管理，InnoDB 目录项的结构设计是跟数据页一样的，不同的是其中保存记录的部分存放的是目录的信息，即目录的主键和其页号，且记录里的record_type 属性值为 1。</p><p>目录指向叶子节点的的示意图如下：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191017212544.png" alt></p><p>当存储的记录越来越多导致目录项越来越多时，要查找一个目录项就变得越来越不容易，此时，就需要有指向目录项的目录了，于是一直演变下去就会出现多级目录，形成数据的索引，而这个多级目录就是一个树的结构，如下图所示：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20191017221243.png" alt></p><p>在 InnoDB 里这种树叫 B+ 树，所谓的索引就是长这样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一句话总结：一个索引就是一棵 B+ 树。&lt;/p&gt;
&lt;p&gt;那么这个 B+ 树是什么样子的呢？&lt;/p&gt;
&lt;p&gt;数据存储在叶子节点，中间节点存目录项。&lt;/p&gt;
&lt;p&gt;那么，&lt;/p&gt;
&lt;p&gt;叶子节点啥样的？&lt;/p&gt;
&lt;p&gt;中间节点啥样的？&lt;/p&gt;
&lt;p&gt;要知道节点的结构，就得先知道 InnoDB 管理存储空间的基本单位 —— 页。&lt;/p&gt;
&lt;p&gt;InnoDB 引擎将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，页的大小一般为 16 KB。InnoDB 设计了许多种不同类型的页，比如存放表数据记录的页，存放表空间头部信息的页，存放 Insert Buffer 信息的页，存放 undo 日志的页等等，而这之中存放表中索引数据记录的页即数据页就是 B+ 数的叶子节点。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="MySQL" scheme="http://www.tenpercent.top/tags/MySQL/"/>
    
      <category term="索引" scheme="http://www.tenpercent.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>浅析 PHP7 的垃圾回收机制</title>
    <link href="http://www.tenpercent.top/2019/08/31/php7-garbage-collection/"/>
    <id>http://www.tenpercent.top/2019/08/31/php7-garbage-collection/</id>
    <published>2019-08-30T16:00:00.000Z</published>
    <updated>2019-09-10T12:59:23.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p>垃圾回收机制是一种动态存储分配方案。它会自动释放程序不再需要的已分配的内存块。 自动回收内存的过程叫垃圾收集。垃圾回收机制可以让程序员不必过分关心程序内存分配，从而将更多的精力投入到业务逻辑。 在现在的流行各种语言当中，垃圾回收机制是新一代语言所共有的特征。</p><a id="more"></a><h2 id="垃圾的产生"><a href="#垃圾的产生" class="headerlink" title="垃圾的产生"></a>垃圾的产生</h2><p>PHP7 中复杂类型，像字符串、数组、对象等的数据结构中，头部都有一个 gc, 这个 gc 的作用就是用来对垃圾回收的支持。当变量赋值、传递时，会增加 value 的引用数， unset、return 等释放变量时再减掉引用数，减掉后如果发现 refcount 变为 0 则直接释放 value，这是变量的基本回收过程。</p><p>不过有一种问题是这个机制无法解决的，就是循环引用的问题。</p><p>什么是循环引用呢？ 简单说就是变量的内部里存的 value 又引用了变量自身。 这种比较经常发生在数组和对象类型的变量上。</p><p>这里先讲一下引用，即 zend_reference 这个类型，这个是 PHP7 新增的变量类型，当对变量使用 “&amp;” 操作时，会创建新的中间结构体 zend_reference，这个结构体会真正的指向对应的 value 结构。</p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当进行如下赋值操作时</span></span><br><span class="line">$a = <span class="string">'hello'</span>; <span class="comment">// $a -&gt; zend_string</span></span><br><span class="line">$b = $a; <span class="comment">// $b,$a -&gt; zend_string</span></span><br><span class="line">$c = &amp;$b; <span class="comment">// $c,$b -&gt; zval(type = IS_REFERENCE, refcount = 2) -&gt; zend_string</span></span><br></pre></td></tr></table></figure><p>最终会变成如下这样：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190901220325.png" alt></p><p>即 $b 和 $c 的 zval 是通过中间结构体 zend_reference 再指向最终的 zend_string。</p><p>回到循环引用的问题，举个数组循环引用例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="number">1</span>];</span><br><span class="line">$a[] = &amp;$a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>($a);</span><br></pre></td></tr></table></figure><p>使用 &amp; 操作之后，变量 a 就变成了引用类型且引用计数 refcount 为 2，而又赋值给自己里面的元素，即变量 a 变成了自己引用自己。</p><p>具体如下如所示：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190901220346.png" alt></p><p>当 unset 之后就变成下图这样：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190901220358.png" alt></p><p>即 $a 所在的 zval 类型已经变成了 IS_UNDEF 了，zend_reference 结构体的引用计数减 1，但是仍然大于 0，这时候，这部分结构体就变成了垃圾，对此不处理的话，就可能会造成内存泄露。这里就需要垃圾收集器将这部分收集到缓冲区，之后进行回收处理。</p><h2 id="回收过程"><a href="#回收过程" class="headerlink" title="回收过程"></a>回收过程</h2><p>如果当变量的 refcount 减小后大于 0，PHP 并不会立即对这个变量进行垃圾鉴定和回收，而是放入一个缓冲区中，等这个缓冲区满了以后(10000 个值)再统一进行处理，加入缓冲区的是变量 zend_value 里的 gc，目前垃圾只会出现在数组和对象两种类型中，数组的情况上面已经介绍了，对象的情况则是成员属性引用对象本身导致的，其它类型不会出现这种变量中的成员引用变量自身的情况，所以垃圾回收只会处理这两种类型的变量。</p><p>gc 的结构 zend_refcounted_h 具体如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_refcounted_h</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span>         refcount; <span class="comment">// 记录 zend_value 的引用数</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            zend_uchar    type,  <span class="comment">// zend_value的类型, 与zval.u1.type一致</span></span><br><span class="line">            zend_uchar    flags, </span><br><span class="line">            <span class="keyword">uint16_t</span>      gc_info <span class="comment">// GC信息，记录在 gc 池中的位置和颜色，垃圾回收的过程会用到</span></span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="keyword">uint32_t</span> type_info;</span><br><span class="line">    &#125; u;</span><br><span class="line">&#125; zend_refcounted_h;</span><br></pre></td></tr></table></figure><p>一个变量只能加入一次缓冲区，为了防止重复加入，变量加入后会把 zend_refcounted_h.gc_info 置为 GC_PURPLE，即标为紫色，后续不会重复插入。</p><p>垃圾缓冲区是一个双向链表，等到缓存区满了以后则启动垃圾检查过程：遍历缓冲区，对当前变量的所有成员进行遍历，然后把成员的 refcount 减 1 (如果成员还包含子成员则也进行递归遍历，即深度优先遍历)，最后再检查当前变量的引用，如果减为了 0 则为垃圾。这个算法的原理核心是：垃圾是由于成员引用自身导致的，那么就对所有的成员减一遍引用，如果发现最后变量本身的 refcount 变为了 0 则就表明其引用全部来自自身成员，即其他任何地方都不再使用它，那么它就是垃圾，需要被回收掉。反之说明不是垃圾，需要将其从缓冲区移出去。具体的过程如下：</p><p>(1) 从缓冲区链表的 roots 开始遍历，把当前 value 标为灰色 (zend_refcounted_h.gc_info 置为 GC_GREY)，然后对当前 value 的成员进行深度优先遍历，把成员 value 的 refcount 减 1，并且也标为灰色；</p><p>(2) 重复遍历缓冲区链表，检查当前 value 引用是否为 0，为 0 则表示确实是垃圾，把它标为白色(GC_WHITE)，如果不为 0 则排除了引用全部来自自身成员的可能，表示还有外部的引用，并不是垃圾，这时候因为步骤(1)对成员进行了 refcount 减 1 操作，需要再还原回去，对所有成员进行深度遍历，把成员 refcount 加 1，同时标为黑色；</p><p>(3) 再次遍历缓冲区链表，将非 GC_WHITE 的节点从 roots 链表中移出（移到待释放的列表），最终 roots 链表中全部为真正的垃圾，最后将这些垃圾清除。</p><p><em>参考资料</em> </p><p>《PHP7 底层设计与源码解析》</p><p><a href="https://github.com/pangudashu/php7-internal" target="_blank" rel="noopener">php7-internal</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制&quot;&gt;&lt;/a&gt;垃圾回收机制&lt;/h2&gt;&lt;p&gt;垃圾回收机制是一种动态存储分配方案。它会自动释放程序不再需要的已分配的内存块。 自动回收内存的过程叫垃圾收集。垃圾回收机制可以让程序员不必过分关心程序内存分配，从而将更多的精力投入到业务逻辑。 在现在的流行各种语言当中，垃圾回收机制是新一代语言所共有的特征。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>PHP7 数组的底层实现</title>
    <link href="http://www.tenpercent.top/2019/08/23/PHP7-Array/"/>
    <id>http://www.tenpercent.top/2019/08/23/PHP7-Array/</id>
    <published>2019-08-22T16:00:00.000Z</published>
    <updated>2019-09-01T14:18:22.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-数组具有的特性"><a href="#PHP-数组具有的特性" class="headerlink" title="PHP 数组具有的特性"></a>PHP 数组具有的特性</h2><p>PHP 的数组是一种非常强大灵活的数据类型，在讲它的底层实现之前，先看一下 PHP 的数组都具有哪些特性。</p><ul><li>可以使用数字或字符串作为数组健值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span> =&gt; <span class="string">'ok'</span>, <span class="string">'one'</span> =&gt; <span class="string">'hello'</span>];</span><br></pre></td></tr></table></figure><ul><li>可按顺序读取数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line"><span class="keyword">echo</span> $arr[$key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可随机读取数组中的元素</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$arr = [<span class="number">1</span> =&gt; <span class="string">'ok'</span>, <span class="string">'one'</span> =&gt; <span class="string">'hello'</span>, <span class="string">'a'</span> =&gt; <span class="string">'world'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $arr[<span class="string">'one'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> current($arr);</span><br></pre></td></tr></table></figure><ul><li>数组的长度是可变的</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">$arr[] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">array_push($arr, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>正是基于这些特性，我们可以使用 PHP 中的数组轻易的实现集合、栈、列表、字典等多种数据结构。那么这些特性在底层是如何实现的呢？ 这就得从数据结构说起了。 </p><a id="more"></a><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。</p></blockquote><p>PHP 数组的底层实现是散列表（也叫 hashTable )，散列表是根据键（Key）直接访问内存存储位置的数据结构，它的key - value 之间存在一个映射函数，可以根据 key 通过映射函数得到的散列值直接索引到对应的 value 值，无需通过关键字比较，在理想情况下，不考虑散列冲突，散列表的查找效率是非常高的，时间复杂度是 O(1)。</p><p>从源码中我们可以看到 zend_array 的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">zend_array</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">hashTable</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span><br><span class="line">    zend_refcounted_h gc;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ZEND_ENDIAN_LOHI_4(</span><br><span class="line">                    zend_uchar    flags,</span><br><span class="line">                    zend_uchar    nApplyCount,</span><br><span class="line">                    zend_uchar    nIteratorsCount,</span><br><span class="line">                    zend_uchar    reserve)</span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    &#125; u;</span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableMask; <span class="comment">// 哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span><br><span class="line">    Bucket           *arData;     <span class="comment">// 存储元素数组，指向第一个Bucket</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumUsed;   <span class="comment">// 已用Bucket数（含失效的 Bucket）</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumOfElements; <span class="comment">// 哈希表有效元素数</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableSize;     <span class="comment">// 哈希表总大小，为2的n次方（包括无效的元素）</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nInternalPointer; <span class="comment">// 内部指针，用于遍历</span></span><br><span class="line">    zend_long         nNextFreeElement; <span class="comment">// 下一个可用的数值索引,如:arr[] = 1;arr["a"] = 2;arr[] = 3;  则nNextFreeElement = 2;</span></span><br><span class="line">    <span class="keyword">dtor_func_t</span>       pDestructor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该结构中的 Bucket 即储存元素的数组，arData 指向数组的起始位置，使用映射函数对 key 值进行映射后可以得到偏移值，通过内存起始位置 + 偏移值即可在散列表中进行寻址操作。</p><p>Bucket 的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Bucket</span> &#123;</span></span><br><span class="line">    zval              val; <span class="comment">// 存储的具体 value，这里是一个 zval，而不是一个指针</span></span><br><span class="line">    zend_ulong        h;   <span class="comment">// 数字 key 或字符串 key 的哈希值。用于查找时 key 的比较    </span></span><br><span class="line">    zend_string      *key; <span class="comment">// 当 key 值为字符串时，指向该字符串对应的 zend_string（使用数字索引时该值为 NULL），用于查找时 key 的比较</span></span><br><span class="line">&#125; Bucket;</span><br></pre></td></tr></table></figure><p>到这里有个问题出现了：存储在散列表里的元素是无序的，PHP 数组如何做到按顺序读取的呢？</p><p>答案是中间映射表，为了实现散列表的有序性，PHP 为其增加了一张中间映射表，该表是一个大小与 Bucket 相同的数组，数组中储存整形数据，用于保存元素实际储存的 Value 在 Bucekt 中的下标。Bucekt 中的数据是有序的，而中间映射表中的数据是无序的。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190824170828.png" alt></p><p>而通过映射函数映射后的散列值要在中间映射表的区间内，这就对映射函数提出了要求。</p><h2 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h2><p>PHP7 数组采用的映射方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nIndex = h | ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure><p>将 key 经过 time33 算法生成的哈希值 h 和 nTableMask 进行或运算即可得出映射表的下标，其中 nTableMask 数值为 nTableSize 的负数。并且由于  nTableSize 的值为 2 的幂次方，所以 nTableMask 二进制位右侧全部为 0，保证了 h | ht-&gt;nTableMask 的取值范围会在 [-nTableSize, -1] 之间，正好在映射表的下标范围内。另外，用按位或运算的方法和其他方法如取余的方法相比运算速度较高，这个映射函数可以说设计的非常巧妙了。</p><h2 id="散列（哈希）冲突"><a href="#散列（哈希）冲突" class="headerlink" title="散列（哈希）冲突"></a>散列（哈希）冲突</h2><p>不同键名的通过映射函数计算得到的散列值有可能相同，此时便发生了散列冲突。</p><p>对于散列冲突有以下 4 种常用方法：</p><p>1.将散列值放到相邻的最近地址里</p><p>2.换个散列函数重新计算散列值</p><p>3.将冲突的散列值统一放到另一个地方</p><p>4.在冲突位置构造一个单向链表，将散列值相同的元素放到相同槽位对应的链表中。这个方法叫链地址法，PHP 数组就是采用这个方法解决散列冲突的问题。</p><p>其具体实现是：将冲突的 Bucket 串成链表，这样中间映射表映射出的就不是某一个元素，而是一个 Bucket 链表，通过散列函数定位到对应的 Bucket 链表时，需要遍历链表，逐个对比 Key 值，继而找到目标元素。而每个 Bucket 之间的链接则是将原 value 的下标保存到新 value 的 zval.u2.next 里，新 value 放在当前位置上，从而形成一个单向链表。</p><p>举个例子：</p><p>当我们访问 $arr[‘key’] 的过程中，假设首先通过散列运算得出映射表下标为 -2 ，然后访问映射表发现其内容指向 arData 数组下标为 1 的元素。此时我们将该元素的 key 和要访问的键名相比较，发现两者并不相等，则该元素并非我们所想访问的元素，而元素的 zval.u2.next 保存的值正是另一个具有相同散列值的元素对应 arData 数组的下标，所以我们可以不断通过 zval.u2.next 的值遍历直到找到键名相同的元素。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>PHP 的数组在底层实现了自动扩容机制，当插入一个元素且没有空闲空间时，就会触发自动扩容机制，扩容后再执行插入。</p><p>扩容的过程为：</p><p>如果已删除元素所占比例达到阈值，则会移除已被逻辑删除的 Bucket，然后将后面的 Bucket 向前补上空缺的 Bucket，因为 Bucket 的下标发生了变动，所以还需要更改每个元素在中间映射表中储存的实际下标值。</p><p>如果未达到阈值，PHP 则会申请一个大小是原数组两倍的新数组，并将旧数组中的数据复制到新数组中，因为数组长度发生了改变，所以 key-value 的映射关系需要重新计算，这个步骤为重建索引。</p><h2 id="重建散列表"><a href="#重建散列表" class="headerlink" title="重建散列表"></a>重建散列表</h2><p>在删除某一个数组元素时，会先使用标志位对该元素进行逻辑删除，即在删除 value 时只是将 value 的 type 设置为 IS_UNDEF，而不会立即删除该元素所在的 Bucket，因为如果每次删除元素立刻删除 Bucket 的话，每次都需要进行排列操作，会造成不必要的性能开销。</p><p>所以，当删除元素达到一定数量或扩容后都需要重建散列表，即移除被标记为删除的 value。因为 value 在 Bucket 位置移动了或哈希数组 nTableSize 变化了导致 key 与 value 的映射关系改变，重建过程就是遍历 Bucket 数组中的 value，然后重新计算映射值更新到散列表。</p><hr><p>关于 PHP7 的数组底层实现就总结这么些了，因为水平有限也无法研究的十分详尽清楚，如果有疑问或者不足之处欢迎提出~~</p><p><em>参考资料</em></p><p>《PHP7 的底层设计与源码实现》</p><p><a href="https://github.com/pangudashu/php7-internal/blob/master/2/zend_ht.md" target="_blank" rel="noopener">php7-internal</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP-数组具有的特性&quot;&gt;&lt;a href=&quot;#PHP-数组具有的特性&quot; class=&quot;headerlink&quot; title=&quot;PHP 数组具有的特性&quot;&gt;&lt;/a&gt;PHP 数组具有的特性&lt;/h2&gt;&lt;p&gt;PHP 的数组是一种非常强大灵活的数据类型，在讲它的底层实现之前，先看一下 PHP 的数组都具有哪些特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用数字或字符串作为数组健值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可按顺序读取数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($arr &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $key =&amp;gt; $value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $arr[$key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可随机读取数组中的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $arr[&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; current($arr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;数组的长度是可变的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr[] = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array_push($arr, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正是基于这些特性，我们可以使用 PHP 中的数组轻易的实现集合、栈、列表、字典等多种数据结构。那么这些特性在底层是如何实现的呢？ 这就得从数据结构说起了。 &lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>PHP7 的基本变量</title>
    <link href="http://www.tenpercent.top/2019/08/15/php-zval-struct/"/>
    <id>http://www.tenpercent.top/2019/08/15/php-zval-struct/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-09-01T14:18:46.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的基础结构"><a href="#变量的基础结构" class="headerlink" title="变量的基础结构"></a>变量的基础结构</h2><p>我们都知道PHP的变量是弱类型的，声明的时候无需指定类型。那么这里面具体是怎么实现的呢？这就得从变量的基础结构说起了。</p><h3 id="zval的实现"><a href="#zval的实现" class="headerlink" title="zval的实现"></a>zval的实现</h3><p>在源码文件 zend_type.h 中，可以看到 zval 的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span>     <span class="title">zval</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line">zend_value        value;<span class="comment">/* value */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_4(</span><br><span class="line">zend_uchar    type,<span class="comment">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line">zend_uchar    const_flags,</span><br><span class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></span><br><span class="line">&#125; v;</span><br><span class="line"><span class="keyword">uint32_t</span> type_info;</span><br><span class="line">&#125; u1;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     access_flags;         <span class="comment">/* class constant access flags */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></span><br><span class="line"><span class="keyword">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></span><br><span class="line">&#125; u2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>zval 的结构由一个保存变量类型的值或指针的 union 联合体 zend_value 以及两个 union 联合体 u1 和 u2 组成</p><a id="more"></a><ul><li>u1</li></ul><p>u1的作用是用来保存变量类型及其信息，其里面的字段用处如下：</p><p>type：记录变量类型。  即可通过 u2.v.type 来访问到</p><p>type_flags：对应变量特有类型的标记（如常量类型，需引用计数类型，不可变类型），不同类型的变量对应的 flag 不一样。</p><p>const_flags：常量类型的标记</p><p>reserved：保留字段</p><ul><li>u2</li></ul><p>u2 主要是辅助作用，由于结构体的内存对齐，所以 u2 的的这块空间有或者没有 u2 都是已经占据空间了，所以就利用起来。u2的辅助字段里面记录了很多类型信息，这些信息对内部功能有很大的好处，或提升缓存友好性或减少了内存寻址的操作。这里介绍其中部分字段。</p><p>next：用来解决哈希冲突问题（哈希冲突这个目前还不懂），记录冲突的下一个元素位置。</p><p>cache_slot：运行时缓存。在执行函数时会优先去缓存中查找，若缓存中没有，再去全局的 function 表中查找。</p><p>num_args：函数调用时传入参数的个数</p><p>access_flags：对象类的访问标识，如public protected private 这些。</p><ul><li>zend_value</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</span><br><span class="line">zend_long         lval;<span class="comment">/* 整型*/</span></span><br><span class="line"><span class="keyword">double</span>            dval;<span class="comment">/* 浮点型 */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="keyword">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> w1;</span><br><span class="line"><span class="keyword">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br></pre></td></tr></table></figure><p>从 zend__value 中可以看出，long、double 类型直接存储值，而其它类型都为指针，指向各自的结构。所以，由于 zval 这样的结构，PHP 变量在声明的时候不用显示的指定其类型，因为不管你赋给变量什么类型的值，它都能帮你找到对应的存储结构。</p><p>以值为字符串的变量为例，其结构是这样的：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193819.png" alt></p><h3 id="PHP5-与-PHP7-的-zval-结构对比"><a href="#PHP5-与-PHP7-的-zval-结构对比" class="headerlink" title="PHP5 与 PHP7 的 zval 结构对比"></a>PHP5 与 PHP7 的 zval 结构对比</h3><ul><li>PHP5 </li></ul><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193906.png" alt></p><ul><li>PHP7 </li></ul><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193952.png" alt></p><p>可以看到 php7 的 zval 总的只占 16 个字节，相比 PHP5 的 zval 所占用的 48 个字节节省了很大的内存。</p><p>此外，在 PHP5 中，所有的变量都在堆中申请，但是对于临时变量来说，没有必要在堆中申请。所以在 PHP7 中对此做了优化，临时变量是直接在栈中申请的。</p><h2 id="常见变量类型"><a href="#常见变量类型" class="headerlink" title="常见变量类型"></a>常见变量类型</h2><p>下面介绍几个常见类型的变量结构，其他更多的类型，可自行查看源码。</p><h3 id="整型和浮点型"><a href="#整型和浮点型" class="headerlink" title="整型和浮点型"></a>整型和浮点型</h3><p>对于整型和浮点型，由于其占用空间小，在 zval 中是直接存储的 整型的值是存在 lval 里，浮点型值则是存储在 dval 里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</span><br><span class="line">    zend_long         lval;             <span class="comment">/* 整型*/</span></span><br><span class="line">    <span class="keyword">double</span>            dval;             <span class="comment">/* 浮点型 */</span></span><br><span class="line">    ... </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>PHP 7 中定义了新的字符串结构体。结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_string</span> &#123;</span></span><br><span class="line">zend_refcounted_h ;</span><br><span class="line">zend_ulong        h;                <span class="comment">/* hash value */</span></span><br><span class="line"><span class="keyword">size_t</span>            len;</span><br><span class="line"><span class="keyword">char</span>              val[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面各个字段的意思：</p><p>gc： 变量引用信息，所有用到引用计数的变量类型都会有这个结构。</p><p>h： 哈希值，数组中计算索引时会用到。（据说这个操作为 PHP7 提高了 5% 的性能）</p><p>len： 字符串长度，通过这个值保证二进制安全</p><p>val： 字符串内容，变长struct，分配时按len长度申请内存<br>数组</p><p>array 是 PHP 中非常强大的一个数据结构，它的底层实现就是普通的有序HashTable，这里简单看下它的结构。后续再具体深入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">HashTable</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span><br><span class="line">zend_refcounted_h gc;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_4(</span><br><span class="line">zend_uchar    flags,</span><br><span class="line">zend_uchar    nApplyCount,</span><br><span class="line">zend_uchar    nIteratorsCount,</span><br><span class="line">zend_uchar    consistency)</span><br><span class="line">&#125; v;</span><br><span class="line"><span class="keyword">uint32_t</span> flags;</span><br><span class="line">&#125; u;</span><br><span class="line"><span class="keyword">uint32_t</span>          nTableMask;</span><br><span class="line">Bucket           *arData;</span><br><span class="line"><span class="keyword">uint32_t</span>          nNumUsed;</span><br><span class="line"><span class="keyword">uint32_t</span>          nNumOfElements;</span><br><span class="line"><span class="keyword">uint32_t</span>          nTableSize;</span><br><span class="line"><span class="keyword">uint32_t</span>          nInternalPointer;</span><br><span class="line">zend_long         nNextFreeElement;</span><br><span class="line"><span class="keyword">dtor_func_t</span>       pDestructor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###对象</p><p>PHP7 的对象结构也是重新设计了，和 PHP5 的实现有了很大的不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_object</span> &#123;</span></span><br><span class="line">    zend_refcounted_h gc;</span><br><span class="line">    <span class="keyword">uint32_t</span>          handle;</span><br><span class="line">    zend_class_entry *ce; </span><br><span class="line">    <span class="keyword">const</span> zend_object_handlers *handlers;</span><br><span class="line">    HashTable        *properties; </span><br><span class="line">    zval              properties_table[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里介绍下其中几个字段：</p><p>gc：gc头部</p><p>*ce：对象对应的 class 类</p><p>*properties ：HashTable结构，key 为对象的属性名，value 是属性值在properties_tables数组中的偏移量，通过偏移量在 properties_talbe 找到对应的属性值。</p><p>properties_talbe[1]：存储对象的属性值</p><hr><p>ok，先写这到这里。</p><p><em>参考资料</em></p><p>《PHP7 底层设计与源码实现》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的基础结构&quot;&gt;&lt;a href=&quot;#变量的基础结构&quot; class=&quot;headerlink&quot; title=&quot;变量的基础结构&quot;&gt;&lt;/a&gt;变量的基础结构&lt;/h2&gt;&lt;p&gt;我们都知道PHP的变量是弱类型的，声明的时候无需指定类型。那么这里面具体是怎么实现的呢？这就得从变量的基础结构说起了。&lt;/p&gt;
&lt;h3 id=&quot;zval的实现&quot;&gt;&lt;a href=&quot;#zval的实现&quot; class=&quot;headerlink&quot; title=&quot;zval的实现&quot;&gt;&lt;/a&gt;zval的实现&lt;/h3&gt;&lt;p&gt;在源码文件 zend_type.h 中，可以看到 zval 的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;zval_struct&lt;/span&gt;     &lt;span class=&quot;title&quot;&gt;zval&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;zval_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	zend_value        value;			&lt;span class=&quot;comment&quot;&gt;/* value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ZEND_ENDIAN_LOHI_4(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				zend_uchar    type,			&lt;span class=&quot;comment&quot;&gt;/* active type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				zend_uchar    type_flags,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				zend_uchar    const_flags,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				zend_uchar    reserved)	    &lt;span class=&quot;comment&quot;&gt;/* call info for EX(This) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; type_info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; u1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     next;                 &lt;span class=&quot;comment&quot;&gt;/* hash collision chain */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     cache_slot;           &lt;span class=&quot;comment&quot;&gt;/* literal cache slot */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     lineno;               &lt;span class=&quot;comment&quot;&gt;/* line number (for ast nodes) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     num_args;             &lt;span class=&quot;comment&quot;&gt;/* arguments number for EX(This) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     fe_pos;               &lt;span class=&quot;comment&quot;&gt;/* foreach position */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     fe_iter_idx;          &lt;span class=&quot;comment&quot;&gt;/* foreach iterator index */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     access_flags;         &lt;span class=&quot;comment&quot;&gt;/* class constant access flags */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     property_guard;       &lt;span class=&quot;comment&quot;&gt;/* single property guard */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     extra;                &lt;span class=&quot;comment&quot;&gt;/* not further specified */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; u2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;zval 的结构由一个保存变量类型的值或指针的 union 联合体 zend_value 以及两个 union 联合体 u1 和 u2 组成&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>浅析 PHP7 底层运行机制</title>
    <link href="http://www.tenpercent.top/2019/08/09/PHP-internal-learning/"/>
    <id>http://www.tenpercent.top/2019/08/09/PHP-internal-learning/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-09-01T14:19:30.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP7-代码执行过程"><a href="#PHP7-代码执行过程" class="headerlink" title="PHP7 代码执行过程"></a>PHP7 代码执行过程</h2><p>PHP 是解释型语言，其执行过程需先编译成中间代码，再经由特定的虚拟机，翻译成特定的指令被执行。其执行过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP 代码 =&gt; Token =&gt; 抽象语法树 =&gt; Opcodes =&gt; 执行</span><br></pre></td></tr></table></figure><p>各个步骤内容如下：</p><ul><li>源代码通过词法分析得到 Token </li></ul><p>Token 是 PHP 代码被切割成的有意义的标识。PHP7 一共有 137 种 Token，在zend_language_parser.h 文件中做了定义。</p><ul><li>基于语法分析器将 Token 转换成抽象语法树（AST）</li></ul><p>Token 就是一个个的词块，但是单独的词块不能表达完整的语义，还需要借助一定的规则进行组织串联。所以就需要语法分析器根据语法匹配Token，将 Token 进行串联。语法分析器串联完 Token 后的产物就是抽象语法树（AST，Abstract Syntax Tree）。<br>AST 是 PHP7 版本的新特性，之前版本的 PHP 代码的执行过程中是没有生成 AST 这一步的。它的作用主要是实现了PHP编译器和解释器的解耦，提升了可维护性。</p><ul><li>将语法树转换成 Opcode</li></ul><p>需要将语法树转换成Opcode，才能被引擎直接执行。</p><ul><li>执行 Opcodes</li></ul><p>opcodes 是 opcode 的集合形式，是 PHP 执行过程中的中间代码。PHP工程优化措施中有一个比较常见的“开启 opcache”，指的技术这里将 opcodes 进行缓存。通过省去从源码到 opcode 的阶段，引擎直接执行缓存好的 opacode，以提升性能。</p><a id="more"></a><h2 id="PHP7-内核架构"><a href="#PHP7-内核架构" class="headerlink" title="PHP7 内核架构"></a>PHP7 内核架构</h2><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190809195522.png" alt></p><p><em>要把这张图印在脑海里</em></p><ul><li>zend引擎</li></ul><p>词法/语法分析、AST编译和 opcodes 的执行均在 Zend 引擎中实现。此外，PHP的变量设计、内存管理、进程管理等也在引擎层实现。</p><ul><li>PHP层</li></ul><p>zend 引擎为 PHP 提供基础能力，而来自外部的交互则需要通过 PHP 层来处理。</p><ul><li>SAPI</li></ul><p>server API 的缩写，其中包含了场景的 cli SAPI 和 fpm SAPI。只要遵守定义好的 SAPI 协议，外部模块便可与PHP完成交互。</p><ul><li>扩展部分</li></ul><p>依据 zend 引擎提供的核心能力和接口规范，可以进行开发扩展。</p><h2 id="PHP-7-源码结构"><a href="#PHP-7-源码结构" class="headerlink" title="PHP 7 源码结构"></a>PHP 7 源码结构</h2><p>php 7 的源码主要目录有：sapi 、Zend、main、ext 和 TSRM 这几个。</p><ul><li>sapi目录</li></ul><p>sapi目录是对输入和输出层的抽象，是PHP提供对外服务的规范。</p><p>几种常用的 SAPI：</p><p>1）apache2handler: Apache 扩展，编译后生成动态链接库，配置到Apache下。当有 http 请求到 Apache 时，根据配置会调用此动态链接库来执行PHP代码，完成与PHP的交互。</p><p>2）cgi-fcgi: 编译后生成支持 CGI 协议的可执行程序，webserver（如NGINX）通过 CGI 协议把请求传给CGI进程，CGI 进程根据请求执行相应代码后将执行结果返回给 webserver。</p><p>3）fpm-fcgi: fpm是 FastCGI 进程管理器。以 NGINX 服务器为例，当有请求发送到 NGINX 服务器，NGINX 按照 FastCGI 协议把请求交给 php-fpm 进程处理。</p><p>4）cli: PHP的命令行交互接口</p><ul><li>Zend 目录</li></ul><p>Zend 目录是 PHP 的核心代码。PHP中的内存管理，垃圾回收、进程管理、变量、数组实现等均在该目录的源码里。</p><ul><li>main 目录</li></ul><p>main目录是SAPI层和Zend层的黏合剂。Zend 层实现了 PHP 脚本的编译和执行，sapi 层实现了输入和输出的抽象，main目录则在它们中间起着承上启下的作用。承上，解析 SAPI 的请求，分析要执行的脚本文件和参数；启下，调用 zend 引擎之前，完成必要的模块初始化等工作。</p><ul><li>ext目录</li></ul><p>ext 是 PHP 扩展相关的目录，常用的 array、str、pdo 等系列函数都在这里定义。</p><ul><li>TSRM </li></ul><p>TSRM（Thread Safe Resource Manager）——线程安全资源管理器， 是用来保证资源共享的安全。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP7-代码执行过程&quot;&gt;&lt;a href=&quot;#PHP7-代码执行过程&quot; class=&quot;headerlink&quot; title=&quot;PHP7 代码执行过程&quot;&gt;&lt;/a&gt;PHP7 代码执行过程&lt;/h2&gt;&lt;p&gt;PHP 是解释型语言，其执行过程需先编译成中间代码，再经由特定的虚拟机，翻译成特定的指令被执行。其执行过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PHP 代码 =&amp;gt; Token =&amp;gt; 抽象语法树 =&amp;gt; Opcodes =&amp;gt; 执行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;各个步骤内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码通过词法分析得到 Token &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Token 是 PHP 代码被切割成的有意义的标识。PHP7 一共有 137 种 Token，在zend_language_parser.h 文件中做了定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于语法分析器将 Token 转换成抽象语法树（AST）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Token 就是一个个的词块，但是单独的词块不能表达完整的语义，还需要借助一定的规则进行组织串联。所以就需要语法分析器根据语法匹配Token，将 Token 进行串联。语法分析器串联完 Token 后的产物就是抽象语法树（AST，Abstract Syntax Tree）。&lt;br&gt;AST 是 PHP7 版本的新特性，之前版本的 PHP 代码的执行过程中是没有生成 AST 这一步的。它的作用主要是实现了PHP编译器和解释器的解耦，提升了可维护性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将语法树转换成 Opcode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要将语法树转换成Opcode，才能被引擎直接执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 Opcodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;opcodes 是 opcode 的集合形式，是 PHP 执行过程中的中间代码。PHP工程优化措施中有一个比较常见的“开启 opcache”，指的技术这里将 opcodes 进行缓存。通过省去从源码到 opcode 的阶段，引擎直接执行缓存好的 opacode，以提升性能。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>为什么并发编程会产生 bug</title>
    <link href="http://www.tenpercent.top/2019/03/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%BC%9A%E4%BA%A7%E7%94%9F%20bug/"/>
    <id>http://www.tenpercent.top/2019/03/06/为什么并发编程会产生 bug/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2020-04-17T15:46:33.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文结构"><a href="#本文结构" class="headerlink" title="本文结构"></a>本文结构</h2><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417233239.png" alt></p><a id="more"></a><h2 id="为什么需要并发编程"><a href="#为什么需要并发编程" class="headerlink" title="为什么需要并发编程"></a>为什么需要并发编程</h2><p>我们都知道计算机的核心组成 CPU，内存，I/O 设备的运行速度差异是很大的，它们间的速度是 CPU &gt;&gt; 内存 &gt;&gt; I/O，CPU 和内存的速度差异就如同天上一天和地上一年的差别。而内存和 I/O 设备的速度差异就更大了，相当于天上一天与地上十年的区别。</p><p>而程序里大部分语句都要访问内存和 I/O，所以一段程序执行的性能是取决于最慢的那部分的执行速度——即读写 I/O 设备。 所以，如何合理的平衡这三者的速度差异来使程序运行的最快呢？ 这就需要从计算机体系结构，操作系统，编译程序这些方面进行优化了。目前计算机科学界的大佬们对在这些方面做出的优化主要有以下几点：</p><p>1、 CPU 增加了缓存，用来缓存常用的内存数据或地址，以均衡与内存的速度差异；</p><p>2、操作系统增加了进程、线程，用来对 CPU 进行分时复用，进而均衡 CPU 与 I/O 设备的速度差异；</p><p>3、编译程序优化指定执行次序，使得缓存能够得到更加合理的利用。</p><p>这几点的优化在一定程度上大大提升了程序的运行速度，但是相应的也产生了并发程序的一些问题，也就是并发编程可能会出现的 bug。</p><h2 id="为什么会产生-bug"><a href="#为什么会产生-bug" class="headerlink" title="为什么会产生 bug"></a>为什么会产生 bug</h2><p>首先，我们需要定义一下这个 bug 是什么样的 bug。</p><p>并发编程，所引起的问题，其本质 bug 就是对某个资源的操作没有</p><h3 id="原因一：CPU-缓存带来可见性问题"><a href="#原因一：CPU-缓存带来可见性问题" class="headerlink" title="原因一：CPU 缓存带来可见性问题"></a>原因一：CPU 缓存带来可见性问题</h3><p>在单核的 CPU 中，所有的线程都是在一颗 CPU 上执行，因为所有线程都是操作同一块缓存和内存，所以不同线程对缓存的写，是互相透明的。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417125147.png" alt></p><p>但是在多核时代，每个 CPU 都有自己的缓存，这时 CPU 缓存与内存的数据一致性就不容易保证了。当多个线程在不同的 CPU 上执行时，这些线程操作的是不同 CPU 的缓存，如下图：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417125505.png" alt></p><p>线程 A 操作的是 CPU-1 上缓存，而线程 B 操作的是 CPU-2 上的缓存，这个时候，线程 A 对变量 V 的操作对于线程 B 而言就不具备可见性了。举个例子，假设变量 V 初始值为 0，线程 A 从内存读取变量 V 到 CPU 中并缓存起来，随后线程 A 对变量 V + 1 并更新缓存，而此时，线程 B 也从 内存读取变量 V，然后也开始执行 +1 操作并进行更新缓存；这样当线程 A 把变量 V 的值从缓存写入到内存里后，变量 V 的值为 1，而当线程 B 也将变量 V 写入到缓存时，变量 V 的值也是 1，最终就是变量 V 虽然被两个线程分别执行了两次 +1 操作，但是其最终的值却是 1，而不是我们期望的正确值 2。这就是可见性引起的问题。</p><h3 id="原因二：线程切换带来的原子性问题"><a href="#原因二：线程切换带来的原子性问题" class="headerlink" title="原因二：线程切换带来的原子性问题"></a>原因二：线程切换带来的原子性问题</h3><p>我们都知道 Unix 采用分时复用的方式，即通过对线程进行调度切换来提高 CPU 的利用率</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417132339.png" alt></p><p>由于我们现在编程基本都是使用高级语言，高级语言里的一条语句往往需要多条 CPU 指令完成。例如 count += 1, 至少需要三条 CPU 指令。</p><p>指令 1： 将变量 count 从内存加载到 CPU 的寄存器；</p><p>指令 2： 在寄存器中执行 +1 操作</p><p>指令 3： 将结果写入缓存</p><p>而操作系统在线程切换时，可以发送在任何一条 <strong>CPU 指令</strong> 执行完，而高级语言里的一条语句。对于上面的三条指令来说，假设 count 为 0, 如果线程 A 在指令 1 执行完后做线程切换，线程 B 开始执行三条指令后，即将 count 的值 +1 并写入了缓存了，这时再切换回线程 A，由于线程 A 在前面已经执行了指令 1，线程 A 里的 count 值是 0，此时再去执行指令 2 和指令 3，最后线程 A 执行完后，count 的值依然为 1。即 count 变量分别被两个线程获取并进行了 +1 的操作，但是最终的结果是 1 而不是我们所期望的正确值 2。这就是线程切换引起的问题。</p><p>上述过程示意图如下：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417133508.png" alt></p><h3 id="原因三：编译优化带来的有序性问题"><a href="#原因三：编译优化带来的有序性问题" class="headerlink" title="原因三：编译优化带来的有序性问题"></a>原因三：编译优化带来的有序性问题</h3><p>编译优化是指当我们的程序进行编译后，编译器为了优化性能，有时候会改变程序中语句的先后顺序。例如 “a = 1; b = 2;”  编译器优化后可能变成“b = 2, a = 1”。</p><p>在 Java 领域一个经典的案例就是利用双重检查创建单例对象。在实现单例的时候，首先判断 instance 是不是为空，如果为空进入同步代码块初始化 instance，否而直接返回 instance。初始化 instance 时再次判断 instance 是否为空，避免了在进入同步代码块这段时间有线程抢先一步完成了 instance 初始化。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种单例的实现方式，看似在提高效率的同时，做到了天衣无缝。其实不然，因为 instance = new Singleton (); 这一行代码会被编译为三条指令，正常指令顺序如下：</p><p>1、为 instance 分配一块内存 A</p><p>2、在分配的内存 A 上初始化 instance 实例</p><p>3、把内存 A 的地址赋值给 instance 变量</p><p>而编译器优化后可能会变成：</p><p>1、为 instance 分配一块内存 A</p><p>2、把内存 A 的地址赋值给 instance 变量</p><p>3、在分配的内存 A 上初始化 instance 实例</p><p>上面的顺序调换在单线程环境下是没有问题的，但是在多线程的情况下，假如线程 A 正在初始化 instance，此时执行完第 2 步，正在执行第三步。而线程 B 执行到 if (instance == null) 的判断，那么线程 B 就会直接得到未初始化好的 instance，而此时线程 B 使用此 instance 显然是有问题的。</p><p>要解决本例的有序性问题很简单，我们只需要为 instance 声明时增加 volatile 关键字，volatile 修饰的变量是会保证读操作一定能读到写完的值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要写好并发程序，首先要知道并发程序的问题在哪，是因为什么引起的。并发程序问题的产生主要是由可见性，原子性，有序性这三方面引起。</p><p>此外，上面所提到的缓存，线程，编译优化的目的与我们写并发程序的目的是相同的，都是提高程序性能。但是，从这里我们可以看到，技术在解决一个问题的时候，很难有完美的解决方案，往往是解决了问题的同时也会带来另外的问题。所以在采用一项新技术的同时，一定要清楚它能解决什么问题，可能带来什么问题，以及如何进行规避。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本文结构&quot;&gt;&lt;a href=&quot;#本文结构&quot; class=&quot;headerlink&quot; title=&quot;本文结构&quot;&gt;&lt;/a&gt;本文结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20200417233239.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JAVA" scheme="http://www.tenpercent.top/tags/JAVA/"/>
    
      <category term="并发" scheme="http://www.tenpercent.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>深入 Nginx 之配置篇</title>
    <link href="http://www.tenpercent.top/2019/02/15/learn-nginx-configuration/"/>
    <id>http://www.tenpercent.top/2019/02/15/learn-nginx-configuration/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2019-03-01T11:18:38.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h2><p>在工作中，我们与 Nginx 打交道更多的是通过其配置文件来进行。那么掌握这些配置项各自的作用就很有必要了。</p><p>首先，nginx.conf 的内容通常是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...              </span><br><span class="line">...        #核心摸块</span><br><span class="line"></span><br><span class="line">events &#123;        #事件模块</span><br><span class="line"> </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;     # http 模块</span><br><span class="line"></span><br><span class="line">    server &#123;      # server块</span><br><span class="line">     </span><br><span class="line">        location [PATTERN] &#123;  # location块</span><br><span class="line">        </span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] &#123;</span><br><span class="line">        </span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mail &#123;     # mail 模块</span><br><span class="line"> </span><br><span class="line"> server &#123;    # server块</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>我们依次看一下每个模块一般有哪些配置项：</p><h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user admin; #配置用户或者组。</span><br><span class="line"></span><br><span class="line">worker_processes 4; #允许生成的进程数，默认为1 </span><br><span class="line"></span><br><span class="line">pid /nginx/pid/nginx.pid; #指定 nginx 进程运行文件存放地址 </span><br><span class="line"></span><br><span class="line">error_log log/error.log debug; #错误日志路径，级别。</span><br></pre></td></tr></table></figure><h3 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">events &#123; </span><br><span class="line">accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on </span><br><span class="line"></span><br><span class="line">multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off </span><br><span class="line"></span><br><span class="line">use epoll; #事件驱动模型select|poll|kqueue|epoll|resig</span><br><span class="line"></span><br><span class="line">worker_connections 1024; #最大连接数，默认为512</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    </span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    </span><br><span class="line">    access_log off; #取消服务日志    </span><br><span class="line"></span><br><span class="line">    sendfile on;   #允许 sendfile 方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    </span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    server </span><br><span class="line">    &#123;</span><br><span class="line">    keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">    </span><br><span class="line">    listen 80; #监听端口</span><br><span class="line">    </span><br><span class="line">    server_name  127.0.0.1;   #监听地址      </span><br><span class="line">    </span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    </span><br><span class="line">    root your_path;  #根目录</span><br><span class="line">  </span><br><span class="line">location ~ \.php$</span><br><span class="line">&#123;</span><br><span class="line">  fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;</span><br><span class="line">  </span><br><span class="line">  #fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">  </span><br><span class="line">  fastcgi_index index.php;</span><br><span class="line">  </span><br><span class="line">  include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置项解析"><a href="#配置项解析" class="headerlink" title="配置项解析"></a>配置项解析</h2><ul><li><p>worker_processes</p><p>worker_processes 用来设置 Nginx 服务的进程数。该值推荐使用 CPU 内核数。</p></li><li><p>worker_cpu_affinity</p><p>worker_cpu_affinity 用来为每个进程分配CPU的工作内核，参数有多个二进制值表示，每一组代表一个进程，每组中的每一位代表该进程使用CPU的情况，1代表使用，0代表不使用。所以我们使用 worker_cpu_affinity 0001 0010 0100 1000;来让进程分别绑定不同的核上。默认情况下worker进程不绑定在任何一个CPU上。</p></li><li><p>worker_rlimit_nofile</p><p>设置毎个进程的最大文件打开数。如果不设的话上限就是系统的 ulimit –n的数字，一般为65535。</p></li><li><p>worker_connections</p><p>设置一个进程理论允许的最大连接数，理论上越大越好，但不可以超过 worker_rlimit_nofile 的值。</p></li><li><p>use epoll</p><p>设置事件驱动模型使用 epoll。epoll 是 Nginx 支持的高性能事件驱动库之一。是公认的非  常优秀的事件驱动模型。</p></li><li><p>accept_mutex  off</p><p>关闭网络连接序列化，当其设置为开启的时候，将会对多个 Nginx 进程接受连接进行序列化，防止多个进程对连接的争抢。当服务器连接数不多时，开启这个参数会让负载有一定程度的降低。但是当服务器的吞吐量很大时，为了效率，请关闭这个参数；并且关闭这个参数的时候也可以让请求在多个 worker 间的分配更均衡。所以我们设置 accept_mutex off;</p></li><li><p>multi_accept  on </p><p>设置一个进程可同时接受多个网络连接</p></li><li><p>Sendfile on</p><p>Sendfile是 Linux2.0 以后的推出的一个系统调用,它能简化网络传输过程中的步骤，提高服务器性能。<br>不用 sendfile的传统网络传输过程：硬盘 &gt;&gt; kernel buffer &gt;&gt; user buffer &gt;&gt; kernel socket buffer &gt;&gt; 协议栈</p><p>用 sendfile()来进行网络传输的过程：<br>硬盘 &gt;&gt; kernel buffer (快速拷贝到 kernelsocket buffer) &gt;&gt; 协议栈</p></li><li><p>tcp_nopush on</p><p>设置数据包会累积一下再一起传输，可以提高一些传输效率。 tcp_nopush 必须和 sendfile 搭配使用。</p></li><li><p>tcp_nodelay on</p><p>小的数据包不等待直接传输。默认为on。看上去是和 tcp_nopush 相反的功能，但是两边都为 on 时 nginx 也可以平衡这两个功能的使用。</p></li><li><p>keepalive_timeout</p><p>HTTP 连接的持续时间。设的太长会使无用的线程变的太多。这个根据服务器访问数量、处理速度以及网络状况方面考虑。 </p></li><li><p>send_timeout</p><p>设置 Nginx 服务器响应客户端的超时时间，这个超时时间只针对两个客户端和服务器建立连接后，某次活动之间的时间，如果这个时间后，客户端没有任何活动，Nginx服务器将关闭连接</p></li><li><p>gzip on</p><p>启用 gzip，对响应数据进行在线实时压缩,减少数据传输量。</p></li><li><p>gzip_disable “msie6”</p><p>Nginx服务器在响应这些种类的客户端请求时，不使用 Gzip 功能缓存应用数据，gzip_disable “msie6”对IE6浏览器的数据不进行 GZIP 压缩。</p></li></ul><p>常用的配置项大致这些，对于不同的业务场景，有的需要额外的其他配置项，这里不做展开。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>http 配置里有 location 这一项，它是用来根据请求中的 uri 来为其匹配相应的处理规则。</p><h3 id="location-查找规则"><a href="#location-查找规则" class="headerlink" title="location 查找规则"></a>location 查找规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">location  = / &#123;</span><br><span class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</span><br><span class="line">  [ config A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location  / &#123;</span><br><span class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br><span class="line">  # 但是正则和最长字符串会优先匹配</span><br><span class="line">  [ config B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;</span><br><span class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ config C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /documents/Abc &#123;</span><br><span class="line">  # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ config CC ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br><span class="line">  [ config D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br><span class="line">  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br><span class="line">  [ config E ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line">  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span><br><span class="line">  [ config F ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/abc &#123;</span><br><span class="line">  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span><br><span class="line">  # F与G的放置顺序是没有关系的</span><br><span class="line">  [ config G ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /images/abc/ &#123;</span><br><span class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br><span class="line">    [ config H ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则查找优先级从高到低依次如下：</p><p>“ = ” 开头表示精确匹配，如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</p><p>“ ^~ ” 开头表示uri以某个常规字符串开头，不是正则匹配</p><p>“ ~ ” 开头表示区分大小写的正则匹配;</p><p>“ ~* ”开头表示不区分大小写的正则匹配</p><p>“ / ” 通用匹配, 如果没有其它匹配,任何请求都会匹配到</p><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><p>Nginx 的负载均衡需要用到 upstream 模块，可通过以下配置来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream test-upstream &#123;</span><br><span class="line">    ip_hash; # 使用 ip_hash 算法分配</span><br><span class="line"> </span><br><span class="line">    server 192.168.1.1; # 要分配的 ip</span><br><span class="line">    server 192.168.1.2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">location / &#123;   </span><br><span class="line">    proxy_pass http://test-upstream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子定义了一个 test-upstream 的负载均衡配置，通过 proxy_pass 反向代理指令将请求转发给该模块进行分配处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用配置项&quot;&gt;&lt;a href=&quot;#常用配置项&quot; class=&quot;headerlink&quot; title=&quot;常用配置项&quot;&gt;&lt;/a&gt;常用配置项&lt;/h2&gt;&lt;p&gt;在工作中，我们与 Nginx 打交道更多的是通过其配置文件来进行。那么掌握这些配置项各自的作用就很有必要了。&lt;/p&gt;
&lt;p&gt;首先，nginx.conf 的内容通常是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...              &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... 	       #核心摸块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events &amp;#123;        #事件模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http &amp;#123;     # http 模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server &amp;#123;      # server块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location [PATTERN] &amp;#123;  # location块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location [PATTERN] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mail &amp;#123;     # mail 模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 server &amp;#123;    # server块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="配置" scheme="http://www.tenpercent.top/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>深入 Nginx 之架构篇</title>
    <link href="http://www.tenpercent.top/2019/01/18/depth-nginx/"/>
    <id>http://www.tenpercent.top/2019/01/18/depth-nginx/</id>
    <published>2019-01-17T16:00:00.000Z</published>
    <updated>2019-02-23T11:10:46.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在读 Nginx 相关的书籍，做一下读书笔记。</p><p>Nginx 作为业界知名的高性能服务器，被广泛的应用。它的高性能正是由于其优秀的架构设计，其架构主要包括这几点：模块化设计、事件驱动架构、请求的多阶段异步处理、管理进程与多工作进程设计、内存池的设计，以下内容依次进行说明。</p><a id="more"></a><h2 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h2><p>高度模块化的设计是 Nginx 的架构基础。在 Nginx 中，除了少量的核心代码，其他一切皆为模块。</p><p>所有模块间是分层次、分类别的，Nginx 官方共有五大类型的模块：核心模块、配置模块、事件模块、HTTP 模块、mail 模块。它们之间的关系如下：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220142626.png" alt></p><p>在这 5 种模块中，配置模块和核心模块是与 Nginx 框架密切相关的。而事件模块则是 HTTP 模块和 mail 模块的基础。HTTP 模块和 mail 模块的“地位”类似，它们都是更关注于应用层面。</p><h2 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h2><p>事件驱动架构，简单的说就是由一些事件发生源来产生事件，由事件收集器来收集、分发事件，然后由事件处理器来处理这些事件（事件处理器需要先在事件收集器里注册自己想处理的事件）。</p><p>对于 Nginx 服务器而言，一般由网卡、磁盘产生事件，Nginx 中的事件模块将负责事件的收集、分发操作；而所有的模块都可能是事件消费者，它们首先需要向事件模块注册感兴趣的事件类型，这样，在有事件产生时，事件模块会把事件分发到相应的模块中进行处理。</p><p>对于传统 web 服务器（如 Apache）而言，采用的所谓事件驱动往往局限在 TCP 连接建立、关闭事件上，一个连接建立以后，在其关闭之前的所有操作都不再是事件驱动，这时会退化成按顺序执行每个操作的批处理模式，这样每个请求在连接建立后都将始终占用着系统资源，直到关闭才会释放资源。这种请求占用着服务器资源等待处理的模式会造成服务器资源极大的浪费。如下图所示，传统 web 服务器往往把一个进程或线程作为时间消费者，当一个请求产生的事件被该进程处理时，直到这个请求处理结束时，进程资源都将被这一请求所占用。比较典型的例子如 Apache 同步阻塞的多进程模式就是这样的。</p><p>传统 web 服务器处理事件的简单模型（矩形代表进程）:<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220195312.png" alt></p><p>Nginx 采用事件驱动架构处理业务的方式与传统的 web 服务器是不同的。它不使用进程或者线程来作为事件消费者，所谓的事件消费者只能是某个模块。只有事件收集、分发器才有资格占用进程资源，它们会在分发某个事件时调用事件消费模块使用当前占用的进程资源，如下图所示，该图中列出了 5 个不同的事件，在事件收集、分发者进程的一次处理过程中，这 5 个事件按照顺序被收集后，将开始使用当前进程分发事件，从而调用相应的事件消费者来处理事件。当然，这种分发、调用也是有序的。</p><p>Nginx 处理事件的简单模型：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220201030.png" alt></p><p>由上图可以看出，处理请求事件时，Nginx 的事件消费者只是被事件分发者进程短期调用而已，这种设计使得网络性能、用户感知的请求时延都得到了提升，每个用户的请求所产生的事件会及时响应，整个服务器的网络吞吐量都会由于事件的及时响应而增大。当然，这也带来一定的要求，即每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其他事件得不到及时响应，Nginx 的非阻塞特性就是由于它的模块都是满足这个要求的。</p><h2 id="请求的多阶段异步处理"><a href="#请求的多阶段异步处理" class="headerlink" title="请求的多阶段异步处理"></a>请求的多阶段异步处理</h2><p>多阶段异步处理请求与事件驱动架构是密切相关的，也就是说，请求的多阶段异步处理只能基于事件驱动架构实现。多阶段异步处理就是把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。</p><p>处理获取静态文件的 HTTP 请求时切分的阶段及各阶段的触发事件如下所示：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190221171304.png" alt></p><p>这个例子中，该请求大致分为 7 个阶段，这些阶段是可以重复发生的，因此，一个下载静态资源请求可能会由于请求数据过大，网速不稳定等因素而被分解为成百上千个上图所列出的阶段。</p><p>异步处理和多阶段是相辅相成的，只有把请求分为多个阶段，才有所谓的异步处理。当一个时间被分发到事件消费者中进行处理时，事件消费者处理完这个事件只相当于处理完 1 个请求的阶段。什么时候可以处理下一个阶段呢？这只能等待内核的通知，即当下一次事件出现时，epoll 等事件分发器将会获取到通知，然后去调用事件消费者进行处理。</p><h2 id="管理进程、多工作进程设计"><a href="#管理进程、多工作进程设计" class="headerlink" title="管理进程、多工作进程设计"></a>管理进程、多工作进程设计</h2><p>Nginx 在启动后，会有一个 master 进程和多个 worker 进程。master 进程主要用来管理worker 进程，包括接收来自外界的信号，向各 worker 进程发送信号，监控 worker 进程的运行状态以及启动 worker 进程。 worker 进程是用来处理来自客户端的请求事件。多个 worker 进程之间是对等的，它们同等竞争来自客户端的请求，各进程互相独立，一个请求只能在一个 worker 进程中处理。worker 进程的个数是可以设置的，一般会设置与机器 CPU 核数一致，这里面的原因与事件处理模型有关。Nginx 的进程模型，可由下图来表示：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190217223753.png" alt></p><p>在服务器上查看 Nginx 进程：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190217223806.png" alt></p><p>这种设计带来以下优点：</p><p>1） 利用多核系统的并发处理能力</p><p>现代操作系统已经支持多核 CPU 架构，这使得多个进程可以分别占用不同的 CPU 核心来工作。Nginx 中所有的 worker 工作进程都是完全平等的。这提高了网络性能、降低了请求的时延。</p><p>2） 负载均衡</p><p>多个 worker 工作进程通过进程间通信来实现负载均衡，即一个请求到来时更容易被分配到负载较轻的 worker 工作进程中处理。这也在一定程度上提高了网络性能、降低了请求的时延。</p><p>3） 管理进程会负责监控工作进程的状态，并负责管理其行为</p><p>管理进程不会占用多少系统资源，它只是用来启动、停止、监控或使用其他行为来控制工作进程。首先，这提高了系统的可靠性，当 worker 进程出现问题时，管理进程可以启动新的工作进程来避免系统性能的下降。其次，管理进程支持 Nginx 服务运行中的程序升级、配置项修改等操作，这种设计使得动态可扩展性、动态定制性较容易实现。</p><h2 id="内存池的设计"><a href="#内存池的设计" class="headerlink" title="内存池的设计"></a>内存池的设计</h2><p>为了避免出现内存碎片，减少向操作系统申请内存的次数、降低各个模块的开发复杂度，Nginx 设计了简单的内存池，它的作用主要是把多次向系统申请内存的操作整合成一次，这大大减少了 CPU 资源的消耗，同时减少了内存碎片。</p><p>因此，通常每一个请求都有一个简易的独立内存池（如每个 TCP 连接都分配了一个内存池），而在请求结束时则会销毁整个内存池，把曾经分配的内存一次性归还给操作系统。这种设计大大提高了模块开发的简单些，因为在模块申请内存后不用关心它的释放问题；而且因为分配内存次数的减少使得请求执行的时延得到了降低。同时，通过减少内存碎片，提高了内存的有效利用率和系统可处理的并发连接数，从而增强了网络性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在读 Nginx 相关的书籍，做一下读书笔记。&lt;/p&gt;
&lt;p&gt;Nginx 作为业界知名的高性能服务器，被广泛的应用。它的高性能正是由于其优秀的架构设计，其架构主要包括这几点：模块化设计、事件驱动架构、请求的多阶段异步处理、管理进程与多工作进程设计、内存池的设计，以下内容依次进行说明。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="架构" scheme="http://www.tenpercent.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM 与 Nginx 的通信机制总结</title>
    <link href="http://www.tenpercent.top/2018/12/21/php-fpm%20and%20nginx%20/"/>
    <id>http://www.tenpercent.top/2018/12/21/php-fpm and nginx /</id>
    <published>2018-12-20T16:00:00.000Z</published>
    <updated>2019-01-30T06:50:30.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-FPM-介绍"><a href="#PHP-FPM-介绍" class="headerlink" title="PHP-FPM 介绍"></a>PHP-FPM 介绍</h2><h3 id="CGI-协议与-FastCGI-协议"><a href="#CGI-协议与-FastCGI-协议" class="headerlink" title="CGI 协议与 FastCGI 协议"></a>CGI 协议与 FastCGI 协议</h3><p>每种动态语言（ PHP,Python 等）的代码文件需要通过对应的解析器才能被服务器识别，而 CGI 协议就是用来使解释器与服务器可以互相通信。PHP 文件在服务器上的解析需要用到 PHP 解释器，再加上对应的 CGI 协议，从而使服务器可以解析到 PHP 文件。</p><p>由于 CGI 的机制是每处理一个请求需要 fork 一个 CGI 进程，请求结束再kill掉这个进程，在实际应用上比较浪费资源，于是就出现了CGI 的改良版本 FastCGI，FastCGI 在请求处理完后，不会 kill 掉进程，而是继续处理多个请求，这样就大大提高了效率。</p><h3 id="PHP-FPM-是什么"><a href="#PHP-FPM-是什么" class="headerlink" title="PHP-FPM 是什么"></a>PHP-FPM 是什么</h3><p>PHP-FPM 即 PHP-FastCGI Process Manager， 它是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种；master 进程只有一个，负责监听端口，接收来自服务器的请求，而 worker 进程则一般有多个（具体数量根据实际需要进行配置），每个进程内部都会嵌入一个 PHP 解释器，是代码真正执行的地方。</p><a id="more"></a><h2 id="Nginx-与-php-fpm-通信机制"><a href="#Nginx-与-php-fpm-通信机制" class="headerlink" title="Nginx 与 php-fpm 通信机制"></a>Nginx 与 php-fpm 通信机制</h2><p>当我们访问一个网站（如 <a href="http://www.test.com）的时候，处理流程是这样的：" target="_blank" rel="noopener">www.test.com）的时候，处理流程是这样的：</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  www.test.com</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">      Nginx</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">路由到 www.test.com/index.php</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">加载 nginx 的 fast-cgi 模块</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">fast-cgi 监听 127.0.0.1:9000 地址</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">www.test.com/index.php 请求到达 127.0.0.1:9000</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">     等待处理...</span><br></pre></td></tr></table></figure><h3 id="Nginx-与-php-fpm-的结合"><a href="#Nginx-与-php-fpm-的结合" class="headerlink" title="Nginx 与 php-fpm 的结合"></a>Nginx 与 php-fpm 的结合</h3><p>在 Linux 上，nginx 与 php-fpm 的通信有 tcp socket 和 unix socket 两种方式。</p><p>tcp socket 的优点是可以跨服务器，当 nginx 和 php-fpm 不在同一台机器上时，只能使用这种方式。</p><p>Unix socket 又叫 IPC(inter-process communication 进程间通信) socket，用于实现同一主机上的进程间通信，这种方式需要在 nginx配置文件中填写 php-fpm 的 socket 文件位置。</p><p>两种方式的数据传输过程如下图所示：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190128194727.png" alt></p><p>二者的不同：</p><p>由于 Unix socket 不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。所以其效率比 tcp socket 的方式要高，可减少不必要的 tcp 开销。不过，unix socket 高并发时不稳定，连接数爆发时，会产生大量的长时缓存，在没有面向连接协议的支撑下，大数据包可能会直接出错不返回异常。而 tcp 这样的面向连接的协议，可以更好的保证通信的正确性和完整性。</p><p>Nginx 与 php-fpm 结合只需要在各自的配置文件中做设置即可：</p><p>1） Nginx 中的配置</p><p>以 tcp socket通信为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80; #监听 80 端口，接收http请求</span><br><span class="line">    server_name  www.test.com; #就是网站地址</span><br><span class="line">    root /usr/local/etc/nginx/www/huxintong_admin; # 准备存放代码工程的路径</span><br><span class="line">    #路由到网站根目录 www.test.com 时候的处理</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.php; #跳转到 www.test.com/index.php</span><br><span class="line">        autoindex on;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    #当请求网站下 php 文件的时候，反向代理到 php-fpm</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        include /usr/local/etc/nginx/fastcgi.conf; #加载 nginx 的 fastcgi 模块</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000; # tcp 方式，php-fpm 监听的 IP 地址和端口</span><br><span class="line">       # fasrcgi_pass /usr/run/php-fpm.sock # unix socket 连接方式</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) php-fpm 的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen = 127.0.0.1:9000</span><br><span class="line"># 或者下面这样</span><br><span class="line">listen = /var/run/php-fpm.sock</span><br></pre></td></tr></table></figure><blockquote><p>注意，在使用 unix socket 方式连接时，由于 socket 文件本质上是一个文件，存在权限控制的问题，所以需要注意 nginx 进程的权限与 php-fpm 的权限问题，不然会提示无权限访问。（在各自的配置文件里设置用户）</p></blockquote><p>通过以上配置即可完成 php-fpm 与 nginx 的通信。</p><h3 id="在应用中的选择"><a href="#在应用中的选择" class="headerlink" title="在应用中的选择"></a>在应用中的选择</h3><p>如果是在同一台服务器上运行的 nginx 和 php-fpm，且并发量不高（不超过1000），选择unix socket，以提高 nginx 和 php-fpm 的通信效率。<br>如果是面临高并发业务，则考虑选择使用更可靠的 tcp socket，以负载均衡、内核优化等运维手段维持效率。</p><p>若并发较高但仍想用 unix socket 时，可通过以下方式提高 unix socket 的稳定性。</p><p>1）将sock文件放在 /dev/shm 目录下，此目录下将 sock 文件放在内存里面，内存的读写更快。</p><p>2）提高 backlog</p><p>backlog 默认位 128，1024 这个值最好换算成自己正常的 QPS，配置如下。</p><p>nginx.conf 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default backlog = 1024;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>php-fpm.conf 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen.backlog = 1024</span><br></pre></td></tr></table></figure><p>3）增加 sock 文件和 php-fpm 实例</p><p>在 /dev/shm 新建一个 sock 文件，在 nginx 中通过 upstream 模块将请求负载均衡到两个 sock 文件，并且将两个 sock 文件分别对应到两套 php-fpm 实例上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP-FPM-介绍&quot;&gt;&lt;a href=&quot;#PHP-FPM-介绍&quot; class=&quot;headerlink&quot; title=&quot;PHP-FPM 介绍&quot;&gt;&lt;/a&gt;PHP-FPM 介绍&lt;/h2&gt;&lt;h3 id=&quot;CGI-协议与-FastCGI-协议&quot;&gt;&lt;a href=&quot;#CGI-协议与-FastCGI-协议&quot; class=&quot;headerlink&quot; title=&quot;CGI 协议与 FastCGI 协议&quot;&gt;&lt;/a&gt;CGI 协议与 FastCGI 协议&lt;/h3&gt;&lt;p&gt;每种动态语言（ PHP,Python 等）的代码文件需要通过对应的解析器才能被服务器识别，而 CGI 协议就是用来使解释器与服务器可以互相通信。PHP 文件在服务器上的解析需要用到 PHP 解释器，再加上对应的 CGI 协议，从而使服务器可以解析到 PHP 文件。&lt;/p&gt;
&lt;p&gt;由于 CGI 的机制是每处理一个请求需要 fork 一个 CGI 进程，请求结束再kill掉这个进程，在实际应用上比较浪费资源，于是就出现了CGI 的改良版本 FastCGI，FastCGI 在请求处理完后，不会 kill 掉进程，而是继续处理多个请求，这样就大大提高了效率。&lt;/p&gt;
&lt;h3 id=&quot;PHP-FPM-是什么&quot;&gt;&lt;a href=&quot;#PHP-FPM-是什么&quot; class=&quot;headerlink&quot; title=&quot;PHP-FPM 是什么&quot;&gt;&lt;/a&gt;PHP-FPM 是什么&lt;/h3&gt;&lt;p&gt;PHP-FPM 即 PHP-FastCGI Process Manager， 它是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种；master 进程只有一个，负责监听端口，接收来自服务器的请求，而 worker 进程则一般有多个（具体数量根据实际需要进行配置），每个进程内部都会嵌入一个 PHP 解释器，是代码真正执行的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="PHP-FPM" scheme="http://www.tenpercent.top/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>AOP 学习总结</title>
    <link href="http://www.tenpercent.top/2018/09/10/AOP%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.tenpercent.top/2018/09/10/AOP 学习笔记/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2020-04-05T15:17:06.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP-简述"><a href="#AOP-简述" class="headerlink" title="AOP 简述"></a>AOP 简述</h2><p>AOP，面向切面编程。其实并不是什么很深奥的理论，就是当你想在做完某个操作后，希望在这个操作的发生前，发生后，返回值后等等场景里，进行一些相应的操作时，不需要每次都要重复的写一遍相应的操作，而是把这些操作定义成一个切面，通过定义好相应的切点后，在操作发生时，由框架帮你把你所定义好的切面织入进来，从而让你再开发的过程中，只需要聚焦于业务即可，而不用每次去处理很多重复的细节。</p><h2 id="AOP-的用处"><a href="#AOP-的用处" class="headerlink" title="AOP 的用处"></a>AOP 的用处</h2><p>AOP 最典型的应用是在数据库事务的管控中。比如要保存用户时，需要连同用户的角色一并保存如数据库，此时，用 OOP 无法完成这样的事务操作，而 AOP 可以完成这些事情。</p><a id="more"></a><h2 id="AOP-开发细节"><a href="#AOP-开发细节" class="headerlink" title="AOP 开发细节"></a>AOP 开发细节</h2><h3 id="确定连接点"><a href="#确定连接点" class="headerlink" title="确定连接点"></a>确定连接点</h3><p>AOP 需要有连接点，即在什么时候触发。在 Spring 中就是某个类里的某个方法。</p><h3 id="开发切面"><a href="#开发切面" class="headerlink" title="开发切面"></a>开发切面</h3><p>切面用来描述各个过程中需要做什么，用 @Aspect 注解来定义切面。用 @Before、@After、@AfterReturning、@AfterThrowing 等注解来表示各个过程。</p><h3 id="定义切点"><a href="#定义切点" class="headerlink" title="定义切点"></a>定义切点</h3><p>Spring 里 定义了切点（Pointcut）的概念，切点的作用就是向 Spring 描述哪个类的哪个方法需要启用 AOP 编程。在切面里，切点的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(* com.xxx.xxx.xxxImpl.xxxfunction(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>代码中，用 @Pointcut 来定义切点，标注在 pointcut 方法上。 切点里的正则式含义如下：</p><ul><li>execution 表示在执行的时候，拦截里面的正则匹配方法</li><li><ul><li>号表示任意返回类型的方法</li></ul></li><li>com.xxx.xxx.xxxImpl 指定目标对象类的全限定名称</li><li>xxxfunction 指定目标对象类里的方法</li><li>(..)表示任意参数进行匹配</li></ul><h3 id="引入，增加切面"><a href="#引入，增加切面" class="headerlink" title="引入，增加切面"></a>引入，增加切面</h3><p>加入某个切面非自己提供的，不能修改它，而想对它进行补充的时候，Spring 允许通过为这个切面引入新的接口来增强这个切面的功能。<br>步骤如下：</p><p>1、 先定义需要引入的新接口</p><p>2、在切面里，通过 @DeclareParents 注解来引入，它有两个必须配置的属性 value 和 defaultImpl。</p><ul><li>value: 指向你要增强功能的目标对象类</li><li>defaultImpl: 引入增强功能的类，即引入的接口的实现类。</li></ul><h2 id="多个切面"><a href="#多个切面" class="headerlink" title="多个切面"></a>多个切面</h2><p>spring 支持多个切面的运行。在组织多个切面时，需要指定各个切面运行的顺序。</p><p>SPring 提供了 @Order 注解 和 Orderd 接口两种方式来指定切面的顺序。 实际使用中，用 @Order 比较方便，使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AOP-简述&quot;&gt;&lt;a href=&quot;#AOP-简述&quot; class=&quot;headerlink&quot; title=&quot;AOP 简述&quot;&gt;&lt;/a&gt;AOP 简述&lt;/h2&gt;&lt;p&gt;AOP，面向切面编程。其实并不是什么很深奥的理论，就是当你想在做完某个操作后，希望在这个操作的发生前，发生后，返回值后等等场景里，进行一些相应的操作时，不需要每次都要重复的写一遍相应的操作，而是把这些操作定义成一个切面，通过定义好相应的切点后，在操作发生时，由框架帮你把你所定义好的切面织入进来，从而让你再开发的过程中，只需要聚焦于业务即可，而不用每次去处理很多重复的细节。&lt;/p&gt;
&lt;h2 id=&quot;AOP-的用处&quot;&gt;&lt;a href=&quot;#AOP-的用处&quot; class=&quot;headerlink&quot; title=&quot;AOP 的用处&quot;&gt;&lt;/a&gt;AOP 的用处&lt;/h2&gt;&lt;p&gt;AOP 最典型的应用是在数据库事务的管控中。比如要保存用户时，需要连同用户的角色一并保存如数据库，此时，用 OOP 无法完成这样的事务操作，而 AOP 可以完成这些事情。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JAVA" scheme="http://www.tenpercent.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring 的 IOC 学习总结</title>
    <link href="http://www.tenpercent.top/2018/08/12/IOC%20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://www.tenpercent.top/2018/08/12/IOC 学习总结/</id>
    <published>2018-08-11T16:00:00.000Z</published>
    <updated>2020-04-05T15:16:51.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IOC-描述"><a href="#IOC-描述" class="headerlink" title="IOC 描述"></a>IOC 描述</h2><p>IOC —— Inversion of control，即控制反转。还有个别名叫 DI（Dependency inject 依赖注入）。</p><ul><li>定义</li></ul><p>所谓 IoC ，就是由 IoC 容器来负责对象的生命周期和对象之间的关系。</p><ul><li>最初的时候</li></ul><p>在最早我们使用对象的时候，都是在用到的时候 new 一个，这个会存在一个问题：不灵活。</p><p>即当某个类里依赖着某个 new 出来的对象的时候，在后续的使用中，如果需要换个依赖的对象了，需要去修改类里的代码。</p><h2 id="IOC-的用处"><a href="#IOC-的用处" class="headerlink" title="IOC 的用处"></a>IOC 的用处</h2><p>用 IOC 的用处就是可以避免在类里依赖着某个指定对象时直接使用 new 这样的强耦合情况。</p><p>IOC 容器存放着对象，管理着依赖关系。当某个类需要什么对象时，只要声明好它对应的依赖，IOC 容器就会自动找到其所依赖的对象进行注入。</p><p>所以这就是控制反转：有传统的直接 new 的方式来主动控制到变成由 IOC 容器来控制进行对象的注入</p><h2 id="Spring-里的-IOC-实现"><a href="#Spring-里的-IOC-实现" class="headerlink" title="Spring 里的 IOC 实现"></a>Spring 里的 IOC 实现</h2><h3 id="Spring-的-IOC-容器"><a href="#Spring-的-IOC-容器" class="headerlink" title="Spring 的 IOC 容器"></a>Spring 的 IOC 容器</h3><p>Spring IOC 容器是一个管理 Bean 的容器，Spring 里所有的 IOC 容器都需要实现 BeanFactory 接口，它是一个顶级容器接口。其源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansExcept 工 on ;</span><br><span class="line"><span class="keyword">import</span> org.springframework . core.ResolvableType ; <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line">String FACTORY BEAN PREFIX = <span class="string">"&amp;”; //多个 getBean 方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Object getBean(String name) throws BeansException;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;T&gt; T getBean(String 口ame, Class&lt;T&gt; requiredType) throws Bea口sExcept工on;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;T&gt; T getBean(Class&lt;T&gt; requiredType) throws BeansException;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Object getBean(String name, Object . . args) throws BeansException ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;T&gt; T getBea口( Class&lt;T&gt; requiredType , Object ... args) throws BeansExcept工on;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//是否包含 Bean</span></span><br><span class="line"><span class="string">boolean containsBean (String name); II Bean是否单例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">boolean isS工ngleton(String name) throws NoSuchBeanDefinitionExcept工on ; II Bean是否原型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">boolean isPrototype(String name) throws NoSuchBeanDefinitionException;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//是否类型匹配</span></span><br><span class="line"><span class="string">bool ean isTypeMatch(String name , ResolvableType typeToMatch) throws NoSuchBeanDefin工tionException;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">boolean isTypeMatch(String name , Class&lt;?&gt; typeToMatch) throws NoSuchBeanDefin工tionException;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//获取 Bean 的类型</span></span><br><span class="line"><span class="string">Class&lt;?&gt; getType(String name) throws NoSuchBeanDefinit工onException ;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//获取 Bean 的别名</span></span><br><span class="line"><span class="string">String[] getAliases(String name);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到上面代码中有多个getBean方法，这也是IoC容器最重要的方法之一， 它的意义是从 IoC 容器中获取 Beano 而从多个 getBean 方法中可 以看到有按类型( by type)获取 Bean 的，也有按 名称( by name)获取 Bean 的，这就意味着在 Spring IoC 容器中 ，允许我们按类型或者名称获取 Bean。</p><p>由于 BeanFactory 的功能还不够强大，因此 Spring在 BeanFactory 的基础上， 还设计了一个更为高级的接口 ApplicationContext。 它是 BeanFactory 的子接口之一 ， 在 Spring 的体 系中 BeanFactory 和 ApplicationContext 是最为重要的接口设计 ，在现实中我们使用的大部分Spring IoC 容器是 ApplicationContext接口的实现类</p><h3 id="装配-bean-至容器中"><a href="#装配-bean-至容器中" class="headerlink" title="装配 bean 至容器中"></a>装配 bean 至容器中</h3><ul><li>通过扫描装配，即使用 @Component 注解和 @ComponentScan </li></ul><ul><li>用 @Bean 注解来实现装配，对某个方法直接使用 @Bean 注解来将其返回的对象注入到容器里</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IOC-描述&quot;&gt;&lt;a href=&quot;#IOC-描述&quot; class=&quot;headerlink&quot; title=&quot;IOC 描述&quot;&gt;&lt;/a&gt;IOC 描述&lt;/h2&gt;&lt;p&gt;IOC —— Inversion of control，即控制反转。还有个别名叫 DI（Dependency
      
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://www.tenpercent.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能监控工具</title>
    <link href="http://www.tenpercent.top/2018/07/10/Linux-performance-monitor/"/>
    <id>http://www.tenpercent.top/2018/07/10/Linux-performance-monitor/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2019-03-06T06:46:54.671Z</updated>
    
    <content type="html"><![CDATA[<p>最近了解了下 Linux 性能相关的东西，主要是如何查看服务器性能的一些工具，在这里做个记录，以后遇到相关使用场景的时候，方便查看。</p><h3 id="Linux-性能指标"><a href="#Linux-性能指标" class="headerlink" title="Linux 性能指标"></a>Linux 性能指标</h3><ul><li>CPU</li></ul><p>CPU利用率、用户时间（表示CPU在用户进程上的时间百分比）、系统时间（表示CPU花在内核操作上的时间百分比）、空闲时间、平均负载、阻塞、上下文切换、中断等</p><ul><li>内存</li></ul><p>空闲内存、Swap利用率、缓冲和缓存、活动和非活动内存等</p><ul><li>磁盘IO</li></ul><p>IO等待、平均队列长度、每秒传输（TPS）等</p><ul><li>网络</li></ul><p>接收和发送的包、每秒碰撞（各个网络接口所连接网络的所发生的冲突数量）、丢包、错误等</p><a id="more"></a><h3 id="监测工具"><a href="#监测工具" class="headerlink" title="监测工具"></a>监测工具</h3><p>以下是对 Linux 的性能进行监控的常用工具：</p><table><thead><tr><th style="text-align:center">工具</th><th>简介</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td>查看进程活动状态以及一些系统状况</td></tr><tr><td style="text-align:center">vmstat</td><td>查看系统状态、硬件和系统信息等</td></tr><tr><td style="text-align:center">iostat</td><td>查看 CPU 负载、硬盘状况</td></tr><tr><td style="text-align:center">sar</td><td>综合工具，查看系统状况</td></tr><tr><td style="text-align:center">mpstat</td><td>查看多处理器状况</td></tr><tr><td style="text-align:center">netstat</td><td>查看网络状况</td></tr><tr><td style="text-align:center">iptraf</td><td>实时网络状态监测</td></tr><tr><td style="text-align:center">tcpdump</td><td>抓取网络数据包，详细分析</td></tr><tr><td style="text-align:center">tcptrace</td><td>网络包分析工具</td></tr><tr><td style="text-align:center">netperf</td><td>网络带宽工具</td></tr><tr><td style="text-align:center">dstat</td><td>综合了 vmstat、iostat、ifstat、netstat 等多个信息</td></tr></tbody></table><p>这里介绍其中几个。</p><h3 id="top-工具"><a href="#top-工具" class="headerlink" title="top 工具"></a>top 工具</h3><p>top是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180725153253005740341.png" alt="20180725153253005740341.png"> </p><p>PID：进程的ID </p><p>USER：进程所有者 </p><p>PR：进程的优先级别，越小越优先被执行 </p><p>NI：nice值 </p><p>VIRT：进程占用的虚拟内存 </p><p>RES：进程占用的物理内存 </p><p>SHR：进程使用的共享内存 </p><p>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数 </p><p>%CPU：进程占用CPU的使用率 </p><p>%MEM：进程使用的物理内存和总内存的百分比 </p><p>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。 </p><p>COMMAND：进程启动命令名称</p><h3 id="vmstat-工具"><a href="#vmstat-工具" class="headerlink" title="vmstat 工具"></a>vmstat 工具</h3><p>vmstat 是个查看系统整体性能的小工具，小巧，即使在机器负载很高的情况下也运行良好，并且可以用时间间隔采集得到连续的性能数据。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/2018072515325286132815.png" alt="2018072515325286132815.png"></p><p>参数介绍：</p><ul><li>r，可运行队列的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用</li><li>b，被 blocked 的进程数，正在等待 IO 请求</li><li>in，被处理过的中断数</li><li>cs，系统上正在做上下文切换的数目</li><li>us，用户占用 CPU 的百分比</li><li>sys，内核和中断占用 CPU 的百分比</li><li>wa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比</li><li>id，CPU 完全空闲的百分比</li></ul><p>举两个例子来分析一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 4  0    140 2915476 341288 3951700  0    0     0     0 1057  523 89 21  0  0  0</span><br><span class="line"> 4  0    140 2915724 341296 3951700  0    0     0     0 1048  546 79 11  0  0  0</span><br><span class="line"> 4  0    140 2915848 341296 3951700  0    0     0     0 1044  514 88 22  0  0  0</span><br><span class="line"> 4  0    140 2915848 341296 3951700  0    0     0    24 1044  564 80 20  0  0  0</span><br><span class="line"> 4  0    140 2915848 341296 3951700  0    0     0     0 1060  546 78 12  0  0  0</span><br></pre></td></tr></table></figure><p>从上面的数据可以看出几点：</p><ol><li>interrupts(in) 非常高，context switch(cs) 比较低，说明这个 CPU 一直在不停的请求资源</li><li>user time(us) 一直保持在 80% 以上，而且上下文切换较低 (cs)，说明某个进程可能一直霸占着 CPU</li></ol><ul><li>run queue(r) 刚好在 4 个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vmstat 1</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line">14  0    140 2904316 341912 3952308  0    0     0   460 1106 9593 36 64  1  0  0</span><br><span class="line">17  0    140 2903492 341912 3951780  0    0     0     0 1037 9614 35 65  1  0  0</span><br><span class="line">20  0    140 2902016 341912 3952000  0    0     0     0 1046 9739 35 64  1  0  0</span><br><span class="line">17  0    140 2903904 341912 3951888  0    0     0    76 1044 9879 37 63  0  0  0</span><br><span class="line">16  0    140 2904580 341912 3952108  0    0     0     0 1055 9808 34 65  1  0  0</span><br></pre></td></tr></table></figure><p>从上面的数据可以看出几点：</p><ol><li>context switch(cs) 比 interrupts(in) 要高的多，说明内核不得不来回切换进程</li><li>进一步观察发现 system time(sy) 很高而 user time(us) 很低，而且加上高频度的上下文切换 (cs)，说明正在运行的应用程序调用了大量的系统调用</li><li>run queue(r) 在 14 个线程以上，而这个机器的硬件配置 (4 核），应该保持在 12 以内。</li></ol><h3 id="iostat-工具"><a href="#iostat-工具" class="headerlink" title="iostat 工具"></a>iostat 工具</h3><p>iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180725153253123443993.png" alt="20180725153253123443993.png"></p><p>cpu属性值说明：</p><p>%user：CPU处在用户模式下的时间百分比。</p><p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p><p>%system：CPU处在系统模式下的时间百分比。</p><p>%iowait：CPU等待输入输出完成时间的百分比。</p><p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p><p>%idle：CPU空闲时间百分比。</p><p><strong>如果%iowait的值过高，表示硬盘存在I/O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</strong></p><p>disk属性值说明：</p><p>rrqm/s:  每秒进行 merge 的读操作数目。即 rmerge/s</p><p>wrqm/s:  每秒进行 merge 的写操作数目。即 wmerge/s</p><p>r/s:  每秒完成的读 I/O 设备次数。即 rio/s</p><p>w/s:  每秒完成的写 I/O 设备次数。即 wio/s</p><p>rsec/s:  每秒读扇区数。即 rsect/s</p><p>wsec/s:  每秒写扇区数。即 wsect/s</p><p>rkB/s:  每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。</p><p>wkB/s:  每秒写K字节数。是 wsect/s 的一半。</p><p>avgrq-sz:  平均每次设备I/O操作的数据大小 (扇区)。</p><p>avgqu-sz:  平均I/O队列长度。</p><p>await:  平均每次设备I/O操作的等待时间 (毫秒)。</p><p>svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</p><p>%util:  一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</p><p><strong>如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</strong></p><p><strong>如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；</strong></p><p><strong>如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。</strong></p><p><strong>如果avgqu-sz比较大，也表示有大量io在等待。</strong></p><ul><li>sar 工具</li></ul><p>sar是System Activity Reporter（系统活动情况报告）的缩写。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。</p><ul><li>查看 cpu使用率</li></ul><p><strong>sar -u</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257950431065.png" alt="20180726153257950431065.png"></p><p>%user 用户模式下消耗的CPU时间的比例；</p><p>%nice 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例</p><p>%system 系统模式下消耗的CPU时间的比例；</p><p>%iowait CPU等待磁盘I/O导致空闲状态消耗的时间比例；</p><p>%steal 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例；</p><p>%idle CPU空闲时间比例；</p><p><strong>查看平均负载</strong></p><p><strong>sar -q</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257961321989.png" alt="20180726153257961321989.png"></p><p>runq-sz：运行队列的长度（等待运行的进程数）</p><p>plist-sz：进程列表中进程（processes）和线程（threads）的数量</p><p>ldavg-1：最后1分钟的系统平均负载</p><p>ldavg-5：过去5分钟的系统平均负载</p><p>ldavg-15：过去15分钟的系统平均负载</p><p><strong>查看内存使用状况</strong></p><p><strong>sar -r</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257975922020.png" alt="20180726153257975922020.png"></p><p>kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.</p><p>kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.</p><p>%memused：物理内存使用率，这个值是kbmemused和内存总量(不包括swap)的一个百分比.</p><p>kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.</p><p>kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).</p><p>%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.</p><p><strong>sar参数说明</strong></p><p>-A 汇总所有的报告</p><p>-a 报告文件读写使用情况</p><p>-B 报告附加的缓存的使用情况</p><p>-b 报告缓存的使用情况</p><p>-c 报告系统调用的使用情况</p><p>-d 报告磁盘的使用情况</p><p>-g 报告串口的使用情况</p><p>-h 报告关于buffer使用的统计数据</p><p>-m 报告IPC消息队列和信号量的使用情况</p><p>-n 报告命名cache的使用情况</p><p>-p 报告调页活动的使用情况</p><p>-q 报告运行队列和交换队列的平均长度</p><p>-R 报告进程的活动情况</p><p>-r 报告没有使用的内存页面和硬盘块</p><p>-u 报告CPU的利用率</p><p>-v 报告进程、i节点、文件和锁表状态</p><p>-w 报告系统交换活动状况</p><p>-y 报告TTY设备活动状况</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近了解了下 Linux 性能相关的东西，主要是如何查看服务器性能的一些工具，在这里做个记录，以后遇到相关使用场景的时候，方便查看。&lt;/p&gt;
&lt;h3 id=&quot;Linux-性能指标&quot;&gt;&lt;a href=&quot;#Linux-性能指标&quot; class=&quot;headerlink&quot; title=&quot;Linux 性能指标&quot;&gt;&lt;/a&gt;Linux 性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU利用率、用户时间（表示CPU在用户进程上的时间百分比）、系统时间（表示CPU花在内核操作上的时间百分比）、空闲时间、平均负载、阻塞、上下文切换、中断等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空闲内存、Swap利用率、缓冲和缓存、活动和非活动内存等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IO等待、平均队列长度、每秒传输（TPS）等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收和发送的包、每秒碰撞（各个网络接口所连接网络的所发生的冲突数量）、丢包、错误等&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.tenpercent.top/tags/Linux/"/>
    
      <category term="工具" scheme="http://www.tenpercent.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 泛型总结</title>
    <link href="http://www.tenpercent.top/2018/06/23/%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.tenpercent.top/2018/06/23/泛型总结/</id>
    <published>2018-06-22T16:00:00.000Z</published>
    <updated>2020-04-06T03:05:41.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T testname;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">testfunction</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">test</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需注意点：</p><ul><li>在声明类实现泛型接口时，若泛型参数未传入实参，则实现类也需要声明泛型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">one</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在声明类实现泛型接口时，若泛型参数有传入实参，则实现类里所有使用泛型的地方都需要声明对应的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">implements</span> <span class="title">Test</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">one</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">test</span><span class="params">(T name)</span></span>&#123;</span><br><span class="line">System.out.print(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需注意点：</p><ul><li>泛型方法也可以定义在泛型类中，泛型方法里的泛型参数 T 不受泛型类的泛型参数 T 的影响，是独立的。</li><li>\&lt;T>用来声明该方法为泛型方法，\<t>只是一个代表符号，也可以用\<e> 或其他（ K,V 等）表达。</e></t></li><li>有了<t> 才可以在泛型方法的参数里声明参数泛型 T ，符号需保持一致，如<e> 对应 E。</e></t></li></ul><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><h3 id="上界通配符"><a href="#上界通配符" class="headerlink" title="上界通配符"></a>上界通配符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? extends T&gt;</span><br></pre></td></tr></table></figure><p>需注意点：</p><ul><li>上界通配符只支持从通配类型里 get，而不支持将多种类型的 set 进去, 所以上界描述符Extends适合频繁读取的场景。</li></ul><p>原因是：</p><p>一个Plate&lt;? extends Fruit&gt;的引用，指向的可能是一个Plate类型的盘子，要往这个盘子里放Banana当然是不被允许的。一个理解是：Plate&lt;? extends Fruit&gt;代表某个只能放某种类型水果的盘子，而不是什么水果都能往里放的盘子</p><h3 id="下界通配符"><a href="#下界通配符" class="headerlink" title="下界通配符"></a>下界通配符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;? <span class="keyword">super</span> T&gt;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">需注意点：</span><br><span class="line"></span><br><span class="line">* 下界通配符&lt;? <span class="keyword">super</span> T&gt;不影响往里面存储，但是读取出来的数据只能是Object类型。</span><br><span class="line"></span><br><span class="line">原因是：</span><br><span class="line"></span><br><span class="line">下界通配符规定了元素最小的粒度，必须是T及其基类，那么我往里面存储T及其派生类都是可以的，因为它都可以隐式的转化为T类型。但是往外读就不好控制了，里面存储的都是T及其基类，无法转型为任何一种类型，只有Object基类才能装下。</span><br><span class="line"></span><br><span class="line">### PECS原则</span><br><span class="line"></span><br><span class="line">Effective Java书里的PECS原则。</span><br><span class="line"></span><br><span class="line">* 上界&lt;? extends T&gt;不能往里存，只能往外取，适合频繁往外面读取内容的场景。</span><br><span class="line">* 下界&lt;? <span class="keyword">super</span> T&gt;不影响往里存，但往外取只能放在Object对象里，适合经常往里面插入数据的场景。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 无线通配符</span><br><span class="line"></span><br><span class="line">```java </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span>&lt;?&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型的擦除"><a href="#泛型的擦除" class="headerlink" title="泛型的擦除"></a>泛型的擦除</h2><p>泛型参数将会被擦除到它的第一个边界（边界可以有多个，重用 extends 关键字，通过它能给与参数类型添加一个边界）。编译器事实上会把类型参数替换为它的第一个边界的类型。如果没有指明边界，那么类型参数将被擦除到Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manipulator</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Test</span>&gt; </span>&#123;</span><br><span class="line">    T obj;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extend关键字后后面的类型信息决定了泛型参数能保留的信息。Java类型擦除只会擦除到 Test 类型。</p><h3 id="泛型擦除的缺陷"><a href="#泛型擦除的缺陷" class="headerlink" title="泛型擦除的缺陷"></a>泛型擦除的缺陷</h3><p>泛型类型不能显式地运用在运行时类型的操作当中，例如：转型、instanceof 和 new。因为在运行时，所有参数的类型信息都丢失了。类似下面的代码都是无法通过编译的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Erased</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> T) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        T <span class="keyword">var</span> = <span class="keyword">new</span> T();</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        T[] array = <span class="keyword">new</span> T[SIZE];</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        T[] array = (T) <span class="keyword">new</span> Object[SIZE];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;泛型类&quot;&gt;&lt;a href=&quot;#泛型类&quot; class=&quot;headerlink&quot; title=&quot;泛型类&quot;&gt;&lt;/a&gt;泛型类&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T testname;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;testfunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;泛型接口&quot;&gt;&lt;a href=&quot;#泛型接口&quot; class=&quot;headerlink&quot; title=&quot;泛型接口&quot;&gt;&lt;/a&gt;泛型接口&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在声明类实现泛型接口时，若泛型参数未传入实参，则实现类也需要声明泛型&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyTest&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; T &lt;span class=&quot;title&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在声明类实现泛型接口时，若泛型参数有传入实参，则实现类里所有使用泛型的地方都需要声明对应的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JAVA" scheme="http://www.tenpercent.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>深入解析 composer 的自动加载原理</title>
    <link href="http://www.tenpercent.top/2018/05/17/composer-autoload/"/>
    <id>http://www.tenpercent.top/2018/05/17/composer-autoload/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2019-08-30T14:05:19.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP 自5.3的版本之后，已经重焕新生，命名空间、性状（trait）、闭包、接口、PSR 规范、以及 composer 的出现已经让 PHP 变成了一门现代化的脚本语言。PHP 的生态系统也一直在演进，而 composer 的出现更是彻底的改变了以往构建 PHP 应用的方式，我们可以根据 PHP 的应用需求混合搭配最合适的 PHP 组件。当然这也得益于 PSR 规范的提出。</p><h3 id="掌握-composer-自动加载原理的好处"><a href="#掌握-composer-自动加载原理的好处" class="headerlink" title="掌握 composer 自动加载原理的好处"></a>掌握 composer 自动加载原理的好处</h3><ul><li><p>更好的运用 composer 来构建我们的 PHP 应用程序</p></li><li><p>对 PSR 规范有进一步的了解</p></li><li><p>当需要用到没有 composer 化的第三方库时，可以将其 composer 化来提高工程效率</p></li><li><p>学习比较严谨、高深的编码技巧</p></li></ul><a id="more"></a><hr><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>PHP 自动加载功能</li><li>PSR 规范</li><li>comoposer 的自动加载过程</li><li>composer 源码分析</li></ul><hr><h2 id="一、PHP-自动加载功能"><a href="#一、PHP-自动加载功能" class="headerlink" title="一、PHP 自动加载功能"></a>一、PHP 自动加载功能</h2><h3 id="PHP-自动加载功能的由来"><a href="#PHP-自动加载功能的由来" class="headerlink" title="PHP 自动加载功能的由来"></a>PHP 自动加载功能的由来</h3><p>在 PHP 开发过程中，如果希望从外部引入一个 Class ，通常会使用 <code>include</code> 和 <code>require</code> 方法，去把定义这个 Class 的文件包含进来。这个在小规模开发的时候，没什么大问题。但在大型的开发项目中，使用这种方式会带来一些隐含的问题：如果一个 PHP 文件需要使用很多其它类，那么就需要很多的 <code>require/include</code> 语句，这样有可能会 <strong>造成遗漏</strong> 或者 <strong>包含进不必要的类文件</strong>。如果大量的文件都需要使用其它的类，那么要保证每个文件都包含正确的类文件肯定是一个噩梦， 况且 require或 incloud 的性能代价很大。</p><p>PHP5 为这个问题提供了一个解决方案，这就是 <code>类的自动加载(autoload)机制</code>。<code>autoload机制</code> 可以使得 PHP 程序有可能在使用类时才自动包含类文件，而不是一开始就将所有的类文件<code>include</code>进来，这种机制也称为 <code>Lazy loading (惰性加载)</code>。</p><ul><li><p>总结起来，自动加载功能带来了几处优点：</p><blockquote><ol><li>使用类之前无需 <code>include / require</code></li><li>使用类的时候才会 <code>include / require</code> 文件，实现了 <code>lazy loading</code> ，避免了 <code>include / require</code> 多余文件。</li><li>无需考虑引入 <strong>类的实际磁盘地址</strong> ，实现了逻辑和实体文件的分离。</li></ol></blockquote></li></ul><h3 id="PHP-自动加载函数-autoload"><a href="#PHP-自动加载函数-autoload" class="headerlink" title="PHP 自动加载函数 __autoload()"></a>PHP 自动加载函数 __autoload()</h3><ul><li><p>通常 PHP5 在使用一个类时，如果发现这个类没有加载，就会自动运行 __autoload() 函数，这个函数是我们在程序中自定义的，在这个函数中我们可以加载需要使用的类。下面是个简单的示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($classname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">require_once</span> ($classname . <span class="string">".class.php"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在我们这个简单的例子中，我们直接将类名加上扩展名 <code>.class.php</code> 构成了类文件名，然后使用 <code>require_once</code> 将其加载。</p><blockquote><p>从这个例子中，我们可以看出 __autoload 至少要做三件事情：</p></blockquote><blockquote><ol><li><p>根据类名确定类文件名；</p></li><li><p>确定类文件所在的磁盘路径；</p></li><li><p>将类从磁盘文件中加载到系统中。</p></li></ol></blockquote></li></ul><ul><li><p>第三步最简单，只需要使用 <code>include / require</code> 即可。要实现第一步，第二步的功能，必须在开发时约定类名与磁盘文件的映射方法，只有这样我们才能根据类名找到它对应的磁盘文件。</p></li><li><p>当有大量的类文件要包含的时候，我们只要确定相应的规则，然后在 <strong><code>__autoload()</code> 函数中，将类名与实际的磁盘文件对应起来，就可以实现 <code>lazy loading</code> 的效果</strong> 。</p></li><li>如果想详细的了解关于 autoload 自动加载的过程，可以查看手册资料：<a href="http://php.net/manual/zh/function.autoload.php" target="_blank" rel="noopener">PHP autoload函数说明</a></li></ul><h2 id="autoload-函数存在的问题"><a href="#autoload-函数存在的问题" class="headerlink" title="__autoload() 函数存在的问题"></a>__autoload() 函数存在的问题</h2><ul><li><p>如果在一个系统的实现中，如果需要使用很多其它的类库，这些类库可能是由不同的开发人员编写的，  其类名与实际的磁盘文件的映射规则不尽相同。这时如果要实现类库文件的自动加载，就必须 <strong>在 __autoload() 函数中将所有的映射规则全部实现</strong>，这样的话 <code>__autoload()</code> 函数有可能会非常复杂，甚至无法实现。最后可能会导致 <code>__autoload()</code> 函数十分臃肿，这时即便能够实现，也会给将来的维护和系统效率带来很大的负面影响。</p></li><li><p>那么问题出现在哪里呢？问题出现在 <strong>__autoload() 是全局函数只能定义一次</strong> ，不够灵活，所以所有的类名与文件名对应的逻辑规则都要在一个函数里面实现，造成这个函数的臃肿。那么如何来解决这个问题呢？答案就是使用一个 <strong>__autoload调用堆栈</strong> ，不同的映射关系写到不同的 <code>__autoload函数</code> 中去，然后统一注册统一管理，这个就是 PHP5 引入的 <code>SPL Autoload</code> 。</p></li></ul><h3 id="SPL-Autoload"><a href="#SPL-Autoload" class="headerlink" title="SPL Autoload"></a>SPL Autoload</h3><ul><li>SPL是 Standard PHP Library(标准PHP库)的缩写。它是 PHP5 引入的一个扩展标准库，包括 spl autoload 相关的函数以及各种数据结构和迭代器的接口或类。spl autoload 相关的函数具体可见 <a href="http://php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">php中spl_autoload</a></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// __autoload 函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// function __autoload($class) &#123;</span></span><br><span class="line"><span class="comment">//     include 'classes/' . $class . '.class.php';</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_autoloader</span><span class="params">($class)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">'classes/'</span> . $class . <span class="string">'.class.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="string">'my_autoloader'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义的 autoload 函数在 class 里</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="keyword">array</span>(<span class="string">'MyClass'</span>, <span class="string">'autoload'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非静态方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$instance = <span class="keyword">new</span> MyClass();</span><br><span class="line">spl_autoload_register(<span class="keyword">array</span>($instance, <span class="string">'autoload'</span>));</span><br></pre></td></tr></table></figure><p>spl_autoload_register() 就是我们上面所说的__autoload调用堆栈，我们可以向这个函数注册多个我们自己的 autoload() 函数，当 PHP 找不到类名时，PHP就会调用这个堆栈，然后去调用自定义的 autoload() 函数，实现自动加载功能。如果我们不向这个函数输入任何参数，那么就会默认注册 spl_autoload() 函数。</p><hr><h2 id="二、PSR-规范"><a href="#二、PSR-规范" class="headerlink" title="二、PSR 规范"></a>二、PSR 规范</h2><p>与自动加载相关的规范是 PSR4，在说 PSR4 之前先介绍一下PSR标准。PSR 标准的发明和推出组织是：PHP-FIG，它的网站是：<a href="www.php-fig.org">www.php-fig.org</a>。由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来，虽然不是 “官方” 组织，但也代表了社区中不小的一块。组织的目的在于：以最低程度的限制，来统一各个项目的编码规范，避免各家自行发展的风格阻碍了程序员开发的困扰，于是大伙发明和总结了 PSR，PSR是 PHP Standards Recommendation 的缩写，截止到目前为止，总共有 14 套 PSR 规范，其中有 7 套PSR规范已通过表决并推出使用，分别是：</p><blockquote><p>PSR-0 <strong>自动加载标准</strong>（已废弃，一些旧的第三方库还有在使用）</p></blockquote><blockquote><p>PSR-1 <strong>基础编码标准</strong></p></blockquote><blockquote><p>PSR-2 <strong>编码风格向导</strong></p></blockquote><blockquote><p>PSR-3 <strong>日志接口</strong></p></blockquote><blockquote><p>PSR-4 <strong>自动加载的增强版，替换掉了 PSR-0</strong></p></blockquote><blockquote><p>PSR-6 <strong>缓存接口规范</strong></p></blockquote><blockquote><p>PSR-7 <strong>HTTP 消息接口规范</strong></p></blockquote><p>具体详细的规范标准可以查看<a href="https://psr.phphub.org/" target="_blank" rel="noopener">PHP 标准规范</a></p><h2 id="PSR4-标准"><a href="#PSR4-标准" class="headerlink" title="PSR4 标准"></a>PSR4 标准</h2><p>2013 年底，PHP-FIG 推出了第 5 个规范——PSR-4。</p><p>PSR-4 规范了如何指定文件路径从而自动加载类定义，同时规范了自动加载文件的位置。 </p><h4 id="1）一个完整的类名需具有以下结构："><a href="#1）一个完整的类名需具有以下结构：" class="headerlink" title="1）一个完整的类名需具有以下结构："></a>1）一个完整的类名需具有以下结构：</h4><p><code>\&lt;命名空间&gt;\&lt;子命名空间&gt;\&lt;类名&gt;</code></p><ul><li><p>完整的类名<strong>必须</strong>要有一个顶级命名空间，被称为 “vendor namespace”；</p></li><li><p>完整的类名<strong>可以</strong>有一个或多个子命名空间；</p></li><li><p>完整的类名<strong>必须</strong>有一个最终的类名；</p></li><li><p>完整的类名中<strong>任意一部分</strong>中的下滑线都是没有特殊含义的；</p></li><li><p>完整的类名<strong>可以</strong>由任意大小写字母组成；</p></li><li><p>所有类名都<strong>必须</strong>是大小写敏感的。</p></li></ul><h5 id="2）根据完整的类名载入相应的文件"><a href="#2）根据完整的类名载入相应的文件" class="headerlink" title="2）根据完整的类名载入相应的文件"></a>2）根据完整的类名载入相应的文件</h5><ul><li><p>完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为「命名空间前缀」，其必须与至少一个「文件基目录」相对应；</p></li><li><p>紧接命名空间前缀后的子命名空间 必须 与相应的「文件基目录」相匹配，其中的命名空间分隔符将作为目录分隔符。</p></li><li><p>末尾的类名<strong>必须</strong>与对应的以 .php 为后缀的文件同名。</p></li><li><p>自动加载器（autoloader）的实现<strong>一定不可</strong>抛出异常、<strong>一定不可</strong>触发任一级别的错误信息以及<strong>不应该</strong>有返回值。</p></li></ul><h4 id="3-例子"><a href="#3-例子" class="headerlink" title="3) 例子"></a>3) 例子</h4><p>PSR-4风格</p><blockquote><p>类名：\Zend\Abc<br>命名空间前缀：Zend<br>文件基目录：/usr/includes/Zend/<br>文件路径：/usr/includes/Zend/Abc.php</p></blockquote><blockquote><p>类名：\Symfony\Core\Request<br>命名空间前缀：Symfony\Core<br>文件基目录：./vendor/Symfony/Core/<br>文件路径：./vendor/Symfony/Core/Request.php</p></blockquote><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-vendor/</span><br><span class="line">| -vendor_name/</span><br><span class="line">| | -package_name/</span><br><span class="line">| | | -src/</span><br><span class="line">| | | | -ClassName.php       # Vendor_Name\Package_Name\ClassName</span><br><span class="line">| | | -tests/</span><br><span class="line">| | | | -ClassNameTest.php   # Vendor_Name\Package_Name\ClassNameTest</span><br></pre></td></tr></table></figure><h2 id="Composer自动加载过程"><a href="#Composer自动加载过程" class="headerlink" title="Composer自动加载过程"></a>Composer自动加载过程</h2><h4 id="Composer-做了哪些事情"><a href="#Composer-做了哪些事情" class="headerlink" title="Composer 做了哪些事情"></a>Composer 做了哪些事情</h4><ul><li>你有一个项目依赖于若干个库。</li><li>其中一些库依赖于其他库。</li><li>你声明你所依赖的东西。</li><li>Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</li></ul><p>例如，你正在创建一个项目，需要做一些单元测试。你决定使用 <code>phpunit</code> 。为了将它添加到你的项目中，你所需要做的就是在 <code>composer.json</code> 文件里描述项目的依赖关系。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"require"</span>: &#123;</span><br><span class="line">    <span class="string">"phpunit/phpunit"</span>:<span class="string">"~6.0"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>composer require</code> 之后我们只要在项目里面直接 <code>use</code> phpunit 的类即可使用。</p><h4 id="执行-composer-require-时发生了什么"><a href="#执行-composer-require-时发生了什么" class="headerlink" title="执行 composer require 时发生了什么"></a>执行 composer require 时发生了什么</h4><ul><li>composer 会找到符合 PR4 规范的第三方库的源</li><li>将其加载到 vendor 目录下</li><li>初始化顶级域名的映射并写入到指定的文件里<br>（如：<code>&#39;PHPUnit\\Framework\\Assert&#39; =&gt; __DIR__ . &#39;/..&#39; . &#39;/phpunit/phpunit/src/Framework/Assert.php&#39;</code>）</li><li>写好一个 autoload 函数，并且注册到 spl_autoload_register()里</li></ul><p><em>题外话：现在很多框架都已经帮我们写好了顶级域名映射了，我们只需要在框架里面新建文件，在新建的文件中写好命名空间，就可以在任何地方 use 我们的命名空间了。</em></p><hr><h2 id="Composer-源码分析"><a href="#Composer-源码分析" class="headerlink" title="Composer 源码分析"></a>Composer 源码分析</h2><p>下面我们通过对源码的分析来看看 composer 是如何实现 <code>PSR4标准</code> 的自动加载功能。</p><p>很多框架在初始化的时候都会引入 composer 来协助自动加载的，以 Laravel 为例，它入口文件 index.php 第一句就是利用 composer 来实现自动加载功能。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  define(<span class="string">'LARAVEL_START'</span>, microtime(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</span><br></pre></td></tr></table></figure><p>去 vendor 目录下的 <code>autoload.php</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/composer'</span> . <span class="string">'/autoload_real.php'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29::getLoader();</span><br></pre></td></tr></table></figure><p>这里就是 Composer 真正开始的地方了</p><h3 id="Composer自动加载文件"><a href="#Composer自动加载文件" class="headerlink" title="Composer自动加载文件"></a>Composer自动加载文件</h3><p>首先，我们先大致了解一下Composer自动加载所用到的源文件。</p><blockquote><ol><li>autoload_real.php: 自动加载功能的引导类。<ul><li>composer 加载类的初始化<code>(顶级命名空间与文件路径映射初始化)</code>和注册(spl_autoload_register())。</li></ul></li><li>ClassLoader.php : composer 加载类。<ul><li>composer 自动加载功能的核心类。</li></ul></li><li>autoload_static.php : 顶级命名空间初始化类，<ul><li>用于给核心类初始化顶级命名空间。</li></ul></li><li>autoload_classmap.php : 自动加载的最简单形式，<ul><li>有完整的命名空间和文件目录的映射；</li></ul></li><li>autoload_files.php : 用于加载全局函数的文件，<ul><li>存放各个全局函数所在的文件路径名；</li></ul></li><li>autoload_namespaces.php : 符合 PSR0 标准的自动加载文件，<ul><li>存放着顶级命名空间与文件的映射；</li></ul></li><li>autoload_psr4.php : 符合 PSR4 标准的自动加载文件，<ul><li>存放着顶级命名空间与文件的映射；</li></ul></li></ol></blockquote><h3 id="autoload-real-引导类"><a href="#autoload-real-引导类" class="headerlink" title="autoload_real 引导类"></a>autoload_real 引导类</h3><hr><p>在 vendor 目录下的 <code>autoload.php</code> 文件中我们可以看出，程序主要调用了引导类的静态方法 <code>getLoader()</code> ，我们接着看看这个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  spl_autoload_register(</span><br><span class="line">        <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line"></span><br><span class="line">  spl_autoload_unregister(</span><br><span class="line">        <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">'HHVM_VERSION'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">      <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</span><br><span class="line"></span><br><span class="line">      call_user_func(</span><br><span class="line">          \Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::getInitializer($loader)</span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</span><br><span class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">          $loader-&gt;set($namespace, $path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">          $loader-&gt;setPsr4($namespace, $path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</span><br><span class="line">      <span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">          $loader-&gt;addClassMap($classMap);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/***********************注册自动加载核心类对象********************/</span></span><br><span class="line">  $loader-&gt;register(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/***********************自动加载全局函数********************/</span></span><br><span class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">      $includeFiles = Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</span><br><span class="line">      composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我把自动加载引导类分为 5 个部分。</p><h3 id="第一部分——单例"><a href="#第一部分——单例" class="headerlink" title="第一部分——单例"></a>第一部分——单例</h3><p>第一部分很简单，就是个最经典的单例模式，自动加载类只能有一个。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="第二部分——构造ClassLoader核心类"><a href="#第二部分——构造ClassLoader核心类" class="headerlink" title="第二部分——构造ClassLoader核心类"></a>第二部分——构造ClassLoader核心类</h3><p>第二部分 new 一个自动加载的核心类对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">/***********************获得自动加载核心类对象********************/</span></span><br><span class="line">  spl_autoload_register(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line"></span><br><span class="line">  spl_autoload_unregister(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p><code>loadClassLoader()</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'Composer\Autoload\ClassLoader'</span> === $class) &#123;</span><br><span class="line">        <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/ClassLoader.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从程序里面我们可以看出，composer 先向 PHP 自动加载机制注册了一个函数，这个函数 require 了 ClassLoader 文件。成功 new 出该文件中核心类 ClassLoader() 后，又销毁了该函数。</p><h3 id="第三部分-——-初始化核心类对象"><a href="#第三部分-——-初始化核心类对象" class="headerlink" title="第三部分 —— 初始化核心类对象"></a>第三部分 —— 初始化核心类对象</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">/***********************初始化自动加载核心类对象********************/</span></span><br><span class="line">  $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">'HHVM_VERSION'</span>);</span><br><span class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">     <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</span><br><span class="line"></span><br><span class="line">     call_user_func(</span><br><span class="line">       \Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::getInitializer($loader)</span><br><span class="line">     );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</span><br><span class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">         $loader-&gt;set($namespace, $path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">         $loader-&gt;setPsr4($namespace, $path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</span><br><span class="line">      <span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">          $loader-&gt;addClassMap($classMap);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 这一部分就是对自动加载类的初始化，主要是给自动加载核心类初始化顶级命名空间映射。</p><p>   初始化的方法有两种：</p><pre><code>1. 使用 autoload_static 进行静态初始化；2. 调用核心类接口初始化。</code></pre><h3 id="autoload-static-静态初始化-PHP-gt-5-6"><a href="#autoload-static-静态初始化-PHP-gt-5-6" class="headerlink" title="autoload_static 静态初始化 ( PHP &gt;= 5.6 )"></a>autoload_static 静态初始化 ( PHP &gt;= 5.6 )</h3><p>静态初始化只支持 PHP5.6 以上版本并且不支持 HHVM 虚拟机。我们深入 <code>autoload_static.php</code> 这个文件发现这个文件定义了一个用于静态初始化的类，名字叫 <code>ComposerStaticInit7b790917ce8899df9af8ed53631a1c29</code>，仍然为了避免冲突而加了 hash 值。这个类很简单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ComposerStaticInit7b790917ce8899df9af8ed53631a1c29</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $files = <span class="keyword">array</span>(...);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixLengthsPsr4 = <span class="keyword">array</span>(...);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixDirsPsr4 = <span class="keyword">array</span>(...);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixesPsr0 = <span class="keyword">array</span>(...);</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (...);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInitializer</span><span class="params">(ClassLoader $loader)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> \Closure::bind(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($loader)</span> </span>&#123;</span><br><span class="line">          $loader-&gt;prefixLengthsPsr4</span><br><span class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixLengthsPsr4;</span><br><span class="line"></span><br><span class="line">          $loader-&gt;prefixDirsPsr4</span><br><span class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixDirsPsr4;</span><br><span class="line"></span><br><span class="line">          $loader-&gt;prefixesPsr0</span><br><span class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixesPsr0;</span><br><span class="line"></span><br><span class="line">          $loader-&gt;classMap</span><br><span class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$classMap;</span><br><span class="line"></span><br><span class="line">      &#125;, <span class="keyword">null</span>, ClassLoader::class);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个静态初始化类的核心就是 <code>getInitializer()</code> 函数，它将自己类中的顶级命名空间映射给了 ClassLoader 类。值得注意的是这个函数返回的是一个匿名函数，为什么呢？原因就是 <code>ClassLoader类</code> 中的 <code>prefixLengthsPsr4</code> 、<code>prefixDirsPsr4</code>等等变量都是 private的。利用匿名函数的绑定功能就可以将这些 private 变量赋给 ClassLoader 类 里的成员变量。</p><p>关于匿名函数的<a href="http://php.net/manual/zh/closure.bind.php" target="_blank" rel="noopener">绑定功能</a>。</p><p>接下来就是命名空间初始化的关键了。</p><h4 id="classMap（命名空间映射）"><a href="#classMap（命名空间映射）" class="headerlink" title="classMap（命名空间映射）"></a>classMap（命名空间映射）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (</span><br><span class="line">  <span class="string">'App\\Console\\Kernel'</span></span><br><span class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Console/Kernel.php'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'App\\Exceptions\\Handler'</span></span><br><span class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Exceptions/Handler.php'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\ForgotPasswordController'</span></span><br><span class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/ForgotPasswordController.php'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\LoginController'</span></span><br><span class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/LoginController.php'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\RegisterController'</span></span><br><span class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/RegisterController.php'</span>,</span><br><span class="line">  ...)</span><br></pre></td></tr></table></figure><p>直接命名空间全名与目录的映射，简单粗暴，也导致这个数组相当的大。</p><h4 id="PSR4-标准顶级命名空间映射数组："><a href="#PSR4-标准顶级命名空间映射数组：" class="headerlink" title="PSR4 标准顶级命名空间映射数组："></a>PSR4 标准顶级命名空间映射数组：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $prefixLengthsPsr4 = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">'p'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line"><span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; <span class="number">25</span>,</span><br><span class="line">),</span><br><span class="line">  <span class="string">'S'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line"><span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="number">26</span>,</span><br><span class="line"><span class="string">'Symfony\\Component\\Yaml\\'</span> =&gt; <span class="number">23</span>,</span><br><span class="line"><span class="string">'Symfony\\Component\\VarDumper\\'</span> =&gt; <span class="number">28</span>,</span><br><span class="line">...</span><br><span class="line">),</span><br><span class="line">  ...);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $prefixDirsPsr4 = <span class="keyword">array</span> (</span><br><span class="line">  <span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-common/src'</span>,</span><br><span class="line"><span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/type-resolver/src'</span>,</span><br><span class="line"><span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-docblock/src'</span>,</span><br><span class="line">),</span><br><span class="line">   <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring'</span>,</span><br><span class="line">),</span><br><span class="line">  <span class="string">'Symfony\\Component\\Yaml\\'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/yaml'</span>,</span><br><span class="line">),</span><br><span class="line">  ...)</span><br></pre></td></tr></table></figure><p>PSR4 标准顶级命名空间映射用了两个数组，第一个是用命名空间第一个字母作为前缀索引，然后是 顶级命名空间，但是最终并不是文件路径，而是 顶级命名空间的长度。为什么呢？</p><p>因为 PSR4 标准是用顶级命名空间目录替换顶级命名空间，所以获得顶级命名空间的长度很重要。</p><p>具体说明这些数组的作用：</p><p>假如我们找 <code>Symfony\Polyfill\Mbstring\example</code> 这个命名空间，通过前缀索引和字符串匹配我们得到了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="number">26</span>,</span><br></pre></td></tr></table></figure><p>这条记录，键是顶级命名空间，值是命名空间的长度。拿到顶级命名空间后去 <code>$prefixDirsPsr4数组</code> 获取它的映射目录数组：<strong>(注意映射目录可能不止一条)</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="keyword">array</span> (</span><br><span class="line">          <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring'</span>,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p>然后我们就可以将命名空间 <code>Symfony\\Polyfill\\Mbstring\\example</code> 前26个字符替换成目录 <code>__DIR__ . &#39;/..&#39; . &#39;/symfony/polyfill-mbstring</code> ，我们就得到了<code>__DIR__ . &#39;/..&#39; . &#39;/symfony/polyfill-mbstring/example.php</code>，先验证磁盘上这个文件是否存在，如果不存在接着遍历。如果遍历后没有找到，则加载失败。</p><h3 id="ClassLoader-接口初始化（-PHP-lt-5-6-）"><a href="#ClassLoader-接口初始化（-PHP-lt-5-6-）" class="headerlink" title="ClassLoader 接口初始化（ PHP &lt; 5.6 ）"></a>ClassLoader 接口初始化（ PHP &lt; 5.6 ）</h3><hr><p>如果PHP版本低于 5.6 或者使用 HHVM 虚拟机环境，那么就要使用核心类的接口进行初始化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PSR0 标准</span></span><br><span class="line">$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">   $loader-&gt;set($namespace, $path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR4 标准</span></span><br><span class="line">$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">   $loader-&gt;setPsr4($namespace, $path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</span><br><span class="line"><span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">   $loader-&gt;addClassMap($classMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PSR4-标准的映射"><a href="#PSR4-标准的映射" class="headerlink" title="PSR4 标准的映射"></a>PSR4 标准的映射</h4><p>autoload_psr4.php 的顶级命名空间映射</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'XdgBaseDir\\'</span></span><br><span class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/dnoegel/php-xdg-base-dir/src'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'Webmozart\\Assert\\'</span></span><br><span class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/webmozart/assert/src'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'TijsVerkoyen\\CssToInlineStyles\\'</span></span><br><span class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/tijsverkoyen/css-to-inline-styles/src'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'Tests\\'</span></span><br><span class="line">=&gt; <span class="keyword">array</span>($baseDir . <span class="string">'/tests'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span></span><br><span class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/symfony/polyfill-mbstring'</span>),</span><br><span class="line">    ...</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>PSR4 标准的初始化接口:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPsr4</span><span class="params">($prefix, $paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$prefix) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;fallbackDirsPsr4 = (<span class="keyword">array</span>) $paths;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $length = strlen($prefix);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'\\'</span> !== $prefix[$length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(</span><br><span class="line">                  <span class="string">"A non-empty PSR-4 prefix must end with a namespace separator."</span></span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$prefix[<span class="number">0</span>]][$prefix] = $length;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;prefixDirsPsr4[$prefix] = (<span class="keyword">array</span>) $paths;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PSR4初始化接口也很简单。如果没有顶级命名空间，就直接保存目录。如果有命名空间的话，要保证顶级命名空间最后是 <code>\</code> ，然后分别保存。</p><p>总结下上面的顶级命名空间映射过程：</p><pre><code>( 前缀 -&gt; 顶级命名空间，顶级命名空间 -&gt; 顶级命名空间长度 )( 顶级命名空间 -&gt; 目录 )</code></pre><p>这两个映射数组。具体形式也可以查看下面的 <code>autoload_static</code> 的 prefixLengthsPsr4 、 $prefixDirsPsr4 。</p><h4 id="命名空间映射"><a href="#命名空间映射" class="headerlink" title="命名空间映射"></a>命名空间映射</h4><p>autoload_classmap：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'App\\Console\\Kernel'</span></span><br><span class="line">=&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Console/Kernel.php'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'App\\Exceptions\\Handler'</span></span><br><span class="line">=&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Exceptions/Handler.php'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>addClassMap:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addClassMap</span><span class="params">(array $classMap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;classMap) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classMap = array_merge(<span class="keyword">$this</span>-&gt;classMap, $classMap);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;classMap = $classMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自动加载核心类 ClassLoader 的静态初始化到这里就完成了！</strong></p><p>其实说是5部分，真正重要的就两部分——初始化与注册。初始化负责顶层命名空间的目录映射，注册负责实现顶层以下的命名空间映射规则。</p><h3 id="第四部分-——-注册"><a href="#第四部分-——-注册" class="headerlink" title="第四部分 —— 注册"></a>第四部分 —— 注册</h3><hr><p>讲完了 Composer 自动加载功能的启动与初始化，经过启动与初始化，自动加载核心类对象已经获得了顶级命名空间与相应目录的映射，也就是说，如果有命名空间 ‘App\Console\Kernel，我们已经可以找到它对应的类文件所在位置。那么，它是什么时候被触发去找的呢？</p><p>这就是 composer 自动加载的核心了，我们先回顾一下自动加载引导类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="comment">/***************************经典单例模式********************/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/***********************获得自动加载核心类对象********************/</span></span><br><span class="line">    spl_autoload_register(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit</span></span><br><span class="line"><span class="string">    7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</span><br><span class="line">    </span><br><span class="line">    spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit</span></span><br><span class="line"><span class="string">    7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***********************初始化自动加载核心类对象********************/</span></span><br><span class="line">    $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; </span><br><span class="line">    !defined(<span class="string">'HHVM_VERSION'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">        <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</span><br><span class="line"></span><br><span class="line">        call_user_func(\Composer\Autoload\ComposerStaticInit</span><br><span class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29::getInitializer($loader));</span><br><span class="line">  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">            $loader-&gt;set($namespace, $path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</span><br><span class="line">        <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</span><br><span class="line">            $loader-&gt;setPsr4($namespace, $path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</span><br><span class="line">        <span class="keyword">if</span> ($classMap) &#123;</span><br><span class="line">            $loader-&gt;addClassMap($classMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***********************注册自动加载核心类对象********************/</span></span><br><span class="line">    $loader-&gt;register(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***********************自动加载全局函数********************/</span></span><br><span class="line">    <span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">        $includeFiles = Composer\Autoload\ComposerStaticInit</span><br><span class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29::$files;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</span><br><span class="line">        composerRequire</span><br><span class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们开始引导类的第四部分：注册自动加载核心类对象。我们来看看核心类的 register() 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($prepend = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    spl_autoload_register(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'loadClass'</span>), <span class="keyword">true</span>, $prepend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一行代码实现自动加载！</p><p>其实奥秘都在自动加载核心类 ClassLoader 的 loadClass() 函数上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($file = <span class="keyword">$this</span>-&gt;findFile($class)) &#123;</span><br><span class="line">            includeFile($file);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个函数负责按照 PSR 标准将顶层命名空间以下的内容转为对应的目录，也就是上面所说的将  ‘App\Console\Kernel 中’ Console\Kernel 这一段转为目录，至于怎么转的在下面 “运行”的部分讲。核心类 ClassLoader 将 loadClass() 函数注册到PHP SPL中的 spl_autoload_register() 里面去。这样，每当PHP遇到一个不认识的命名空间的时候，PHP会自动调用注册到 spl_autoload_register 里面的 loadClass() 函数，然后找到命名空间对应的文件。</p><h3 id="全局函数的自动加载"><a href="#全局函数的自动加载" class="headerlink" title="全局函数的自动加载"></a>全局函数的自动加载</h3><p> Composer 不止可以自动加载命名空间，还可以加载全局函数。怎么实现的呢？把全局函数写到特定的文件里面去，在程序运行前挨个 require就行了。这个就是 composer 自动加载的第五步，加载全局函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($useStaticLoader) &#123;</span><br><span class="line">    $includeFiles = Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</span><br><span class="line">    composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟核心类的初始化一样，全局函数自动加载也分为两种：静态初始化和普通初始化，静态加载只支持PHP5.6以上并且不支持HHVM。</p><h4 id="静态初始化："><a href="#静态初始化：" class="headerlink" title="静态初始化："></a>静态初始化：</h4><p>  <code>ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files：</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $files = <span class="keyword">array</span> (</span><br><span class="line"><span class="string">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</span><br><span class="line"><span class="string">'667aeda72477189d0494fecd327c3641'</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/var-dumper/Resources/functions/dump.php'</span>,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="普通初始化"><a href="#普通初始化" class="headerlink" title="普通初始化"></a>普通初始化</h4><p>autoload_files:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$vendorDir = dirname(dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">$baseDir = dirname($vendorDir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; $vendorDir . <span class="string">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</span><br><span class="line"><span class="string">'667aeda72477189d0494fecd327c3641'</span> =&gt; $vendorDir . <span class="string">'/symfony/var-dumper/Resources/functions/dump.php'</span>,</span><br><span class="line">   ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其实跟静态初始化区别不大。</p><h4 id="加载全局函数"><a href="#加载全局函数" class="headerlink" title="加载全局函数"></a>加载全局函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</span><br><span class="line">        composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">composerRequire7b790917ce8899df9af8ed53631a1c29</span><span class="params">($fileIdentifier, $file)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(\$GLOBALS[<span class="string">'__composer_autoload_files'</span>][\$fileIdentifier])) &#123;</span><br><span class="line">        <span class="keyword">require</span> $file;</span><br><span class="line"></span><br><span class="line">        $GLOBALS[<span class="string">'__composer_autoload_files'</span>][$fileIdentifier] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第五部分-——-运行"><a href="#第五部分-——-运行" class="headerlink" title="第五部分 —— 运行"></a>第五部分 —— 运行</h4><p>到这里，终于来到了核心的核心—— composer 自动加载的真相，命名空间如何通过 composer 转为对应目录文件的奥秘就在这一章。<br>前面说过，ClassLoader 的 register() 函数将 loadClass() 函数注册到 PHP 的 SPL 函数堆栈中，每当 PHP 遇到不认识的命名空间时就会调用函数堆栈的每个函数，直到加载命名空间成功。所以 loadClass() 函数就是自动加载的关键了。</p><p> 看下 loadClass() 函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($file = <span class="keyword">$this</span>-&gt;findFile($class)) &#123;</span><br><span class="line">        includeFile($file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findFile</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'\\'</span> == $class[<span class="number">0</span>]) &#123;</span><br><span class="line">        $class = substr($class, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// class map lookup</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;classMap[$class])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classMap[$class];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;classMapAuthoritative) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $file = <span class="keyword">$this</span>-&gt;findFileWithExtension($class, <span class="string">'.php'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Search for Hack files if we are running on HHVM</span></span><br><span class="line">    <span class="keyword">if</span> ($file === <span class="keyword">null</span> &amp;&amp; defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;findFileWithExtension($class, <span class="string">'.hh'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($file === <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Remember that this class does not exist.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classMap[$class] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到 loadClass() ，主要调用 findFile() 函数。findFile() 在解析命名空间的时候主要分为两部分：classMap 和 findFileWithExtension() 函数。classMap 很简单，直接看命名空间是否在映射数组中即可。麻烦的是 findFileWithExtension() 函数，这个函数包含了 PSR0 和 PSR4 标准的实现。还有个值得我们注意的是查找路径成功后 includeFile() 仍然是外面的函数，并不是 ClassLoader 的成员函数，原理跟上面一样，防止有用户写 $this 或 self。还有就是如果命名空间是以\开头的，要去掉\然后再匹配。</p><p> 看下 findFileWithExtension 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findFileWithExtension</span><span class="params">($class, $ext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// PSR-4 lookup</span></span><br><span class="line">$logicalPathPsr4 = strtr($class, <span class="string">'\\'</span>, DIRECTORY_SEPARATOR) . $ext;</span><br><span class="line"></span><br><span class="line">$first = $class[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$first])) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$first] <span class="keyword">as</span> $prefix =&gt; $length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($class, $prefix)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixDirsPsr4[$prefix] <span class="keyword">as</span> $dir) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) &#123;</span><br><span class="line">                    <span class="keyword">return</span> $file;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-4 fallback dirs</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr4 <span class="keyword">as</span> $dir) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-0 lookup</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span> !== $pos = strrpos($class, <span class="string">'\\'</span>)) &#123;</span><br><span class="line">    <span class="comment">// namespaced class name</span></span><br><span class="line">    $logicalPathPsr0 = substr($logicalPathPsr4, <span class="number">0</span>, $pos + <span class="number">1</span>)</span><br><span class="line">        . strtr(substr($logicalPathPsr4, $pos + <span class="number">1</span>), <span class="string">'_'</span>, DIRECTORY_SEPARATOR);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// PEAR-like class name</span></span><br><span class="line">    $logicalPathPsr0 = strtr($class, <span class="string">'_'</span>, DIRECTORY_SEPARATOR) . $ext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixesPsr0[$first])) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixesPsr0[$first] <span class="keyword">as</span> $prefix =&gt; $dirs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($class, $prefix)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($dirs <span class="keyword">as</span> $dir) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> $file;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-0 fallback dirs</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr0 <span class="keyword">as</span> $dir) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PSR-0 include paths.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;useIncludePath &amp;&amp; $file = stream_resolve_include_path($logicalPathPsr0)) &#123;</span><br><span class="line">    <span class="keyword">return</span> $file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后小结"><a href="#最后小结" class="headerlink" title="最后小结"></a>最后小结</h4><p>我们通过举例来说下上面代码的流程：</p><p>如果我们在代码中写下 <code>new phpDocumentor\Reflection\Element()</code>，PHP 会通过 SPL_autoload_register 调用 loadClass -&gt; findFile -&gt; findFileWithExtension。步骤如下：</p><blockquote><ul><li>将 \ 转为文件分隔符/，加上后缀php，变成 $logicalPathPsr4, 即 phpDocumentor/Reflection//Element.php;</li><li>利用命名空间第一个字母p作为前缀索引搜索 prefixLengthsPsr4 数组，查到下面这个数组：</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p<span class="string">' =&gt; </span></span><br><span class="line"><span class="string">       array (</span></span><br><span class="line"><span class="string">           '</span>phpDocumentor\\Reflection\\<span class="string">' =&gt; 25,</span></span><br><span class="line"><span class="string">           '</span>phpDocumentor\\Fake\\<span class="string">' =&gt; 19,</span></span><br><span class="line"><span class="string">     )</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>遍历这个数组，得到两个顶层命名空间 phpDocumentor\Reflection\ 和 phpDocumentor\Fake\</li><li>在这个数组中查找 phpDocumentor\Reflection\Element，找出 phpDocumentor\Reflection\ 这个顶层命名空间并且长度为25。</li><li>在prefixDirsPsr4 映射数组中得到phpDocumentor\Reflection\ 的目录映射为：</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; </span><br><span class="line">       <span class="keyword">array</span> (</span><br><span class="line">           <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-common/src'</span>,</span><br><span class="line">           <span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/type-resolver/src'</span>,</span><br><span class="line">           <span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-docblock/src'</span>,</span><br><span class="line">       ),</span><br></pre></td></tr></table></figure><blockquote><ul><li>遍历这个映射数组，得到三个目录映射；</li><li>查看 “目录+文件分隔符//+substr(\$logicalPathPsr4, \$length)”文件是否存在，存在即返回。这里就是<br><code>&#39;__DIR__/../phpdocumentor/reflection-common/src + substr(phpDocumentor/Reflection/Element.php,25)&#39;</code></li><li>如果失败，则利用 fallbackDirsPsr4 数组里面的目录继续判断是否存在文件</li></ul></blockquote><hr><h4 id="The-end-Thanks"><a href="#The-end-Thanks" class="headerlink" title="The end. Thanks!"></a>The end. Thanks!</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP 自5.3的版本之后，已经重焕新生，命名空间、性状（trait）、闭包、接口、PSR 规范、以及 composer 的出现已经让 PHP 变成了一门现代化的脚本语言。PHP 的生态系统也一直在演进，而 composer 的出现更是彻底的改变了以往构建 PHP 应用的方式，我们可以根据 PHP 的应用需求混合搭配最合适的 PHP 组件。当然这也得益于 PSR 规范的提出。&lt;/p&gt;
&lt;h3 id=&quot;掌握-composer-自动加载原理的好处&quot;&gt;&lt;a href=&quot;#掌握-composer-自动加载原理的好处&quot; class=&quot;headerlink&quot; title=&quot;掌握 composer 自动加载原理的好处&quot;&gt;&lt;/a&gt;掌握 composer 自动加载原理的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更好的运用 composer 来构建我们的 PHP 应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对 PSR 规范有进一步的了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当需要用到没有 composer 化的第三方库时，可以将其 composer 化来提高工程效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习比较严谨、高深的编码技巧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="composer" scheme="http://www.tenpercent.top/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>对PHP 后期静态绑定的理解</title>
    <link href="http://www.tenpercent.top/2018/04/20/late-static-bindings/"/>
    <id>http://www.tenpercent.top/2018/04/20/late-static-bindings/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2019-08-30T14:02:32.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是后期静态绑定"><a href="#什么是后期静态绑定" class="headerlink" title="什么是后期静态绑定"></a>什么是后期静态绑定</h2><p>在看一些框架源码或者是某个项目的代码时，经常能看到后期静态绑定的用法<br>。比如下面这段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">static</span>::$instance)) &#123;</span><br><span class="line">        <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到的就是后期静态绑定。那么，什么是后期静态绑定？</p><p>“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。<br><a id="more"></a></p><p>这里要先说两个概念，一个是转发调用，另一个是非转发调用。</p><ul><li><p>转发调用<br>所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::, parent::, static:: 以及 forward_ <em>static</em> _call()。即在进行静态调用时未指名类名的调用属于转发调用。</p></li><li><p>非转发调用<br>非转发调用其实就是明确指定类名的静态调用（foo::bar()）和非静态调用($foo-&gt;bar())。即明确地指定类名的静态调用和非静态调用。</p></li></ul><p>顾名思义，非转发调用前面有类名所以调用的函数一定是属于“这个类的”，不需要转到别的类。转发调用就是由于前期的静态绑定导致在后面调用静态方法时可能“转发到其他的类”</p><p>在PHP的官方文档里，对于后期静态绑定是这样说的：后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）中的类名。意思是当我们调用一个转发调用的静态调用时，实际调用的类是上一个非转发调用的类。</p><p>来看两个例子：</p><p>例1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::who(); <span class="comment">// 后期静态绑定从这里开始</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">B::test();</span><br></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::who();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        A::foo();</span><br><span class="line">        <span class="keyword">parent</span>::foo();</span><br><span class="line">        <span class="keyword">self</span>::foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::test();</span><br></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">C</span><br><span class="line">C</span><br></pre></td></tr></table></figure><p>在这里主要分析下例2。</p><p>1.C::test()，这是一个非转发调用，因为::前面有类名C。</p><p>2.进入test()方法，有三个静态调用 A::foo(),parent::foo(),self::foo(),对于这三个静态调用来说，他们的非转发调用类就是 C。</p><p>3.现在执行A::foo(),这是一个非转发调用。A::foo()中的代码是 static::who(),这是一个转发调用，对于这个转发调用来说他的非转发调用类就是不再是C而是A（因为之前执行了A::foo()）。因此执行的结果为A</p><p>4.现在执行 parent::foo(),这是一个转发调用，转发到哪里呢？就是它的上一个非转发调用的类，也就是类C（在步骤2中提到的）。在这里一定要注意虽然在这之前执行了 A::foo(),但是 parent::foo()的上一个非转发调用的类任然是类C。因此执行的结果是 C.</p><p>5.现在执行 self::foo(),这个和 parent::foo()一样都是转发调用，因此也输出 C。</p><h2 id="使用后期静态绑定的好处"><a href="#使用后期静态绑定的好处" class="headerlink" title="使用后期静态绑定的好处"></a>使用后期静态绑定的好处</h2><p>后期静态绑定目前我看到较多的是用于对象实例化中，在实例化对象时，static 会根据运行时调用的类来决定实例化对象，而 self 则是根据所在位置的类来决定实例化对象。当我们只想实例化子类，并且不希望后续在对子类的使用中由于父类的变化对子类产生影响时，后期静态绑定就能发挥它的作用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是后期静态绑定&quot;&gt;&lt;a href=&quot;#什么是后期静态绑定&quot; class=&quot;headerlink&quot; title=&quot;什么是后期静态绑定&quot;&gt;&lt;/a&gt;什么是后期静态绑定&lt;/h2&gt;&lt;p&gt;在看一些框架源码或者是某个项目的代码时，经常能看到后期静态绑定的用法&lt;br&gt;。比如下面这段：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_null(&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用到的就是后期静态绑定。那么，什么是后期静态绑定？&lt;/p&gt;
&lt;p&gt;“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——SOLID原则</title>
    <link href="http://www.tenpercent.top/2018/03/23/clean-code-solid/"/>
    <id>http://www.tenpercent.top/2018/03/23/clean-code-solid/</id>
    <published>2018-03-22T16:00:00.000Z</published>
    <updated>2019-08-30T14:02:15.415Z</updated>
    
    <content type="html"><![CDATA[<p>SOLID 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则</p><ul><li>S: 单一职责原则 (SRP)</li><li>O: 开闭原则 (OCP)</li><li>L: 里氏替换原则 (LSP)</li><li>I: 接口隔离原则 (ISP)</li><li>D: 依赖反转原则 (DIP)</li></ul><h2 id="单一职责原则-Single-Responsibility-Principle-SRP"><a href="#单一职责原则-Single-Responsibility-Principle-SRP" class="headerlink" title="单一职责原则 Single Responsibility Principle (SRP)"></a>单一职责原则 Single Responsibility Principle (SRP)</h2><p>“修改一个类应该只为一个理由”。人们总是易于用一堆方法塞满一个类，如同我们在飞机上只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做的问题是：从概念上这样的类不是高内聚的，并且留下了很多理由去修改它。将你需要修改类的次数降低到最小很重要。这是因为，当有很多方法在类中时，修改其中一处，你很难知晓在代码库中哪些依赖的模块会被影响到。<br><a id="more"></a></p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">($settings)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line">    <span class="keyword">private</span> $auth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;auth = <span class="keyword">new</span> UserAuth($user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">($settings)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开闭原则-Open-Closed-Principle-OCP"><a href="#开闭原则-Open-Closed-Principle-OCP" class="headerlink" title="开闭原则 Open/Closed Principle (OCP)"></a>开闭原则 Open/Closed Principle (OCP)</h2><p>正如Bertrand Meyer所述，”软件的实体（类, 模块, 函数,等）应该对扩展开放，对修改关闭。”这个原则是在说明应该允许用户在不改变已有代码的情况下增加新的功能。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'ajaxAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'nodeAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $adapterName = <span class="keyword">$this</span>-&gt;adapter-&gt;getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($adapterName === <span class="string">'ajaxAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeAjaxCall($url);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($adapterName === <span class="string">'httpNodeAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeHttpCall($url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，对于HttpRequester类中的fetch方法，如果我新增了一个新的xxxAdapter类并且要在fetch方法中用到的话，就需要在HttpRequester类中去修改类（如加上一个elseif 判断），而通过下面的代码，就可很好的解决这个问题。下面代码很好的说明了如何在不改变原有代码的情况下增加新功能。</p><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;adapter-&gt;request($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="里氏替换原则-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则 Liskov Substitution Principle (LSP)"></a>里氏替换原则 Liskov Substitution Principle (LSP)</h2><p>对这个概念最好的解释是：如果你有一个父类和一个子类，在不改变原有结果正确性的前提下父类和子类可以互换。这个听起来让人有些迷惑，所以让我们来看一个经典的正方形-长方形的例子。从数学上讲，正方形是一种长方形，但是当你的模型通过继承使用了”is-a”的关系时，就不对了。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($area)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">($height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span><span class="params">($rectangles)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</span><br><span class="line">        $rectangle-&gt;setWidth(<span class="number">4</span>);</span><br><span class="line">        $rectangle-&gt;setHeight(<span class="number">5</span>);</span><br><span class="line">        $area = $rectangle-&gt;getArea(); <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></span><br><span class="line">        $rectangle-&gt;render($area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles($rectangles);</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($area)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">($height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLength</span><span class="params">($length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;length = $length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pow(<span class="keyword">$this</span>-&gt;length, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span><span class="params">($rectangles)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($rectangle <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line">            $rectangle-&gt;setLength(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($rectangle <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">            $rectangle-&gt;setWidth(<span class="number">4</span>);</span><br><span class="line">            $rectangle-&gt;setHeight(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $area = $rectangle-&gt;getArea(); </span><br><span class="line">        $rectangle-&gt;render($area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$shapes = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles($shapes);</span><br></pre></td></tr></table></figure><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口隔离原则：”客户端不应该被强制去实现于它不需要的接口”。</p><p>有一个清晰的例子来说明示范这条原则。当一个类需要一个大量的设置项，为了方便不会要求客户端去设置大量的选项，因为在通常他们不需要所有的设置项。使设置项可选有助于我们避免产生”胖接口”</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... robot can't eat, but it must implement this method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，Robot类并不需要eat()这个方法，但是实现了Emplyee接口，于是只能实现所有的方法了，这使得Robot实现了它并不需要的方法。所以在这里应该对Emplyee接口进行拆分，正确的代码如下：</p><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Feedable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Feedable</span>, <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// robot can only work</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖反转原则-Dependency-Inversion-Principle-DIP"><a href="#依赖反转原则-Dependency-Inversion-Principle-DIP" class="headerlink" title="依赖反转原则 Dependency Inversion Principle (DIP)"></a>依赖反转原则 Dependency Inversion Principle (DIP)</h2><p>这条原则说明两个基本的要点：</p><ul><li>高阶的模块不应该依赖低阶的模块，它们都应该依赖于抽象</li><li>抽象不应该依赖于实现，实现应该依赖于抽象</li></ul><p>这条起初看起来有点晦涩难懂，但是如果你使用过php框架（例如 Symfony），你应该见过依赖注入（DI）对这个概念的实现。虽然它们不是完全相通的概念，依赖倒置原则使高阶模块与低阶模块的实现细节和创建分离。可以使用依赖注入（DI）这种方式来实现它。更多的好处是它使模块之间解耦。耦合会导致你难于重构，它是一种非常糟糕的的开发模式。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="别写重复代码-DRY"><a href="#别写重复代码-DRY" class="headerlink" title="别写重复代码 (DRY)"></a>别写重复代码 (DRY)</h2><p>这条原则大家应该都是比较熟悉了。</p><p>尽你最大的努力去避免复制代码，它是一种非常糟糕的行为，复制代码通常意味着当你需要变更一些逻辑时，你需要修改不止一处。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span><span class="params">($developers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($developers <span class="keyword">as</span> $developer) &#123;</span><br><span class="line">        $expectedSalary = $developer-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $developer-&gt;getExperience();</span><br><span class="line">        $githubLink = $developer-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span><span class="params">($managers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($managers <span class="keyword">as</span> $manager) &#123;</span><br><span class="line">        $expectedSalary = $manager-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $manager-&gt;getExperience();</span><br><span class="line">        $githubLink = $manager-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">($employees)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        $expectedSalary = $employee-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $employee-&gt;getExperience();</span><br><span class="line">        $githubLink = $employee-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Very good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">($employees)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        render([</span><br><span class="line">            $employee-&gt;calculateExpectedSalary(),</span><br><span class="line">            $employee-&gt;getExperience(),</span><br><span class="line">            $employee-&gt;getGithubLink()</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后记：虽然OOP设计需要遵守如上原则，不过实际的代码设计一定要简单、简单、简单。在实际编码中要根据情况进行取舍，一味遵守原则，而不注重实际情况的话，可能会让你的代码变的难以理解!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SOLID 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S: 单一职责原则 (SRP)&lt;/li&gt;
&lt;li&gt;O: 开闭原则 (OCP)&lt;/li&gt;
&lt;li&gt;L: 里氏替换原则 (LSP)&lt;/li&gt;
&lt;li&gt;I: 接口隔离原则 (ISP)&lt;/li&gt;
&lt;li&gt;D: 依赖反转原则 (DIP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单一职责原则-Single-Responsibility-Principle-SRP&quot;&gt;&lt;a href=&quot;#单一职责原则-Single-Responsibility-Principle-SRP&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则 Single Responsibility Principle (SRP)&quot;&gt;&lt;/a&gt;单一职责原则 Single Responsibility Principle (SRP)&lt;/h2&gt;&lt;p&gt;“修改一个类应该只为一个理由”。人们总是易于用一堆方法塞满一个类，如同我们在飞机上只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做的问题是：从概念上这样的类不是高内聚的，并且留下了很多理由去修改它。将你需要修改类的次数降低到最小很重要。这是因为，当有很多方法在类中时，修改其中一处，你很难知晓在代码库中哪些依赖的模块会被影响到。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——类和对象部分</title>
    <link href="http://www.tenpercent.top/2018/03/10/clean-code-php-object/"/>
    <id>http://www.tenpercent.top/2018/03/10/clean-code-php-object/</id>
    <published>2018-03-09T16:00:00.000Z</published>
    <updated>2019-08-30T14:01:35.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用getter和setter"><a href="#使用getter和setter" class="headerlink" title="使用getter和setter"></a>使用getter和setter</h2><p>在 PHP 中，通过为属性或方法设置 public, protected 和 private 关键字可以实现对属性或方法的可见性控制。不过，通过 getter 和 setter 也可以达到控制可见性的目的，并且在某些场景下它具备一些额外的好处。</p><p>使用 getter和 setter 有以下好处：</p><ul><li>当你除了获取对象之外还想做一些别的事情时，就不用到项目中去查找所有的属性并修改</li><li>使添加验证更简单</li><li>在获取和设置时添加日志和错误处理更方便</li><li>我们可以延迟加载类的属性</li><li>继承了类，你可以重写默认的函数</li></ul><p>另外，这是面向对象的基本设计原则中的开放/封闭原则。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $balance = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 买了一双鞋...</span></span><br><span class="line">$bankAccount-&gt;balance -= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($balance = <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;balance = $balance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//做一些事情</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withdrawBalance</span><span class="params">($amount)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($amount &gt; <span class="keyword">$this</span>-&gt;balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Amount greater than available balance.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance -= $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depositBalance</span><span class="params">($amount)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance += $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 买了一双鞋...</span></span><br><span class="line">$bankAccount-&gt;withdrawBalance($shoesPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结余</span></span><br><span class="line">$balance = $bankAccount-&gt;getBalance();</span><br></pre></td></tr></table></figure><h2 id="让对象具有私有或受保护的的成员"><a href="#让对象具有私有或受保护的的成员" class="headerlink" title="让对象具有私有或受保护的的成员"></a>让对象具有私有或受保护的的成员</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;name; <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;getName(); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><h2 id="使用组合而不是继承"><a href="#使用组合而不是继承" class="headerlink" title="使用组合而不是继承"></a>使用组合而不是继承</h2><p>这里不是说不使用继承，使用“组合模式”和使用“继承”都有很多好的理由。</p><p>这里想说的是当你本能的要使用继承时就想一想“组合模式”是否能更好帮你的解决问题。</p><p>那么，你可能想知道，“什么时候应该用继承？”， 这取决于你手头上问题。</p><p>以下几点说明了什么时候使用继承会更合适。</p><ul><li>你的继承表达了一个对等（比如”人类是动物”）的关系，不是包含的关系（比如”用户具有用户详情”）</li><li>你能从基类中复用代码</li><li>你想通过修改全局类来对所有派生类进行修改。</li></ul><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为雇员和税收不是对等关系而是包含的关系</span></span><br><span class="line"><span class="comment">// 所以这里应用组合比较合适</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email, $ssn, $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($name, $email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ssn, $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line">    <span class="keyword">private</span> $taxData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTaxData</span><span class="params">($ssn, $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;taxData = <span class="keyword">new</span> EmployeeTaxData($ssn, $salary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用getter和setter&quot;&gt;&lt;a href=&quot;#使用getter和setter&quot; class=&quot;headerlink&quot; title=&quot;使用getter和setter&quot;&gt;&lt;/a&gt;使用getter和setter&lt;/h2&gt;&lt;p&gt;在 PHP 中，通过为属性或方法设置 public, protected 和 private 关键字可以实现对属性或方法的可见性控制。不过，通过 getter 和 setter 也可以达到控制可见性的目的，并且在某些场景下它具备一些额外的好处。&lt;/p&gt;
&lt;p&gt;使用 getter和 setter 有以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你除了获取对象之外还想做一些别的事情时，就不用到项目中去查找所有的属性并修改&lt;/li&gt;
&lt;li&gt;使添加验证更简单&lt;/li&gt;
&lt;li&gt;在获取和设置时添加日志和错误处理更方便&lt;/li&gt;
&lt;li&gt;我们可以延迟加载类的属性&lt;/li&gt;
&lt;li&gt;继承了类，你可以重写默认的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，这是面向对象的基本设计原则中的开放/封闭原则。&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BankAccount&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $balance = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$bankAccount = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BankAccount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 买了一双鞋...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$bankAccount-&amp;gt;balance -= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——函数部分</title>
    <link href="http://www.tenpercent.top/2018/03/01/clean-code-php-function/"/>
    <id>http://www.tenpercent.top/2018/03/01/clean-code-php-function/</id>
    <published>2018-02-28T16:00:00.000Z</published>
    <updated>2019-08-30T14:00:40.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数参数不要超过两个"><a href="#函数参数不要超过两个" class="headerlink" title="函数参数不要超过两个"></a>函数参数不要超过两个</h2><p>限制函数的参数数量是非常重要的，因为它使你的函数更容易测试。超过三个参数会导致参数之间的组合过多，你必须对每个单独的参数测试大量不同的情况。</p><p>没有参数是最理想的情况，一个或两个参数是可以接受的，三个以上则是应该避免的。这很重要。如果你有两个以上的参数，那么你的函数可能试图做的太多，如果不是，你可能需要将一个高级别的对象传当做参数传进去。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">($title, $body, $buttonText, $cancellable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $title;</span><br><span class="line">    <span class="keyword">public</span> $body;</span><br><span class="line">    <span class="keyword">public</span> $buttonText;</span><br><span class="line">    <span class="keyword">public</span> $cancellable = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$config = <span class="keyword">new</span> MenuConfig();</span><br><span class="line">$config-&gt;title = <span class="string">'Foo'</span>;</span><br><span class="line">$config-&gt;body = <span class="string">'Bar'</span>;</span><br><span class="line">$config-&gt;buttonText = <span class="string">'Baz'</span>;</span><br><span class="line">$config-&gt;cancellable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">(MenuConfig $config)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="一个函数只做一件事"><a href="#一个函数只做一件事" class="headerlink" title="一个函数只做一件事"></a>一个函数只做一件事</h2><p>这是软件工程中一个重要的原则。这会让你的代码清晰易懂以及易于复用。</p><p>Bad：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">($clients)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($clients <span class="keyword">as</span> $client) &#123;</span><br><span class="line">        $clientRecord = $db-&gt;find($client);</span><br><span class="line">        <span class="keyword">if</span> ($clientRecord-&gt;isActive()) &#123;</span><br><span class="line">            email($client);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">($clients)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $activeClients = activeClients($clients);</span><br><span class="line">    array_walk($activeClients, <span class="string">'email'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">activeClients</span><span class="params">($clients)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_filter($clients, <span class="string">'isClientActive'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span><span class="params">($client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $clientRecord = $db-&gt;find($client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $clientRecord-&gt;isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数名要能说明它是做什么的"><a href="#函数名要能说明它是做什么的" class="headerlink" title="函数名要能说明它是做什么的"></a>函数名要能说明它是做什么的</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">// 这是什么？一条消息的句柄？还是要写一个文件？（读者的疑问）</span></span><br><span class="line">$message-&gt;handle();</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">//  一目了然</span></span><br><span class="line">$message-&gt;send();</span><br></pre></td></tr></table></figure><h2 id="函数应该只做一层抽象"><a href="#函数应该只做一层抽象" class="headerlink" title="函数应该只做一层抽象"></a>函数应该只做一层抽象</h2><p>当你有多个层次的抽象时，你的函数就已经做的太多了。拆分这些函数，可以让代码可重用性更高且更易测试。<br>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        <span class="comment">// lex...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// parse...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bad too:<br>我们从函数中迁出去了一些工作，但是 parseBetterJSAlternative() 函数还是很复杂，不可测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span><span class="params">($tokens)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tokens = tokenize($code);</span><br><span class="line">    $ast = lexer($tokens);</span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// parse...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><p>最好的解决方案是移除 parseBetterJSAlternative 函数的依赖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $regexes = [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">        $tokens = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">                $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $tokens;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lexer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lexify</span><span class="params">($tokens)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ast = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">            $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $ast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BetterJSAlternative</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $tokenizer;</span><br><span class="line">    <span class="keyword">private</span> $lexer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Tokenizer $tokenizer, Lexer $lexer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tokenizer = $tokenizer;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lexer = $lexer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span><span class="params">($code)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tokens = <span class="keyword">$this</span>-&gt;tokenizer-&gt;tokenize($code);</span><br><span class="line">        $ast = <span class="keyword">$this</span>-&gt;lexer-&gt;lexify($tokens);</span><br><span class="line">        <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">            <span class="comment">// parse...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不要使用标志作为函数的参数"><a href="#不要使用标志作为函数的参数" class="headerlink" title="不要使用标志作为函数的参数"></a>不要使用标志作为函数的参数</h2><p>当你在函数中使用标志来作为参数时，你的函数就不是只做一件事情了，这与我们前面所讲的每个函数只做一件事的原则相违背，所以不要使用标志作为函数的参数。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">($name, $temp = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($temp) &#123;</span><br><span class="line">        touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        touch($name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h2><p>如果一个函数做了“拿到一个值并返回一个值或者多个值”以外的事情，那么这个函数就有可能产生副作用，副作用可能是意外的写入了文件、修改了全局变量、或者打钱给了陌生人。</p><p>现在假如你确实要在函数中做一些有可能产生副作用的事情。 比如要写一个文件，你需要做的是将写文件的操作集中到一处，而不是在几个函数或者类里对同一个文件做操作，实现一个服务（函数或者类）去操作它，有且仅有一个。</p><p>关键是要能避免常见的陷阱：像是在没有结构的对象之间共享状态、使用可能被写入任何值的可变数据类型、 不集中处理有可能产生副作用的操作。 如果你能做到这些，你会比绝大多数程序员更快乐。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $name;</span><br><span class="line"></span><br><span class="line">    $name = explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoFirstAndLastName();</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line">$newName = splitIntoFirstAndLastName($name);</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// 'Ryan McDermott';</span></span><br><span class="line">var_dump($newName); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><h2 id="不要修改全局变量"><a href="#不要修改全局变量" class="headerlink" title="不要修改全局变量"></a>不要修改全局变量</h2><p>在许多编程语言中污染全局是一种糟糕的做法，因为你的库可能会与另一个库冲突，但是你的库的用户却一无所知，直到在生产环境中爆发异常。让我们来考虑一个例子：如果你想要拿到配置数组怎么办？你可以编写全局函数，如config()，但是它可能与另一个试图做同样事情的库冲突。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  [</span><br><span class="line">        <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $configuration = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $configuration)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;configuration = $configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;configuration[$key]) ? <span class="keyword">$this</span>-&gt;configuration[$key] : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$configuration = <span class="keyword">new</span> Configuration([</span><br><span class="line">    <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h2 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h2><p>人们会问“如果不用 if 语句我该怎么做？”，答案是在许多情况下，你可以用多态来实现同样的效果。那这样做什么好处，还是那句话：“一个函数应该只做一件事”， 当你的类或函数中有了 if 语句，你的函数就不止是只做一件事情了。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数参数不要超过两个&quot;&gt;&lt;a href=&quot;#函数参数不要超过两个&quot; class=&quot;headerlink&quot; title=&quot;函数参数不要超过两个&quot;&gt;&lt;/a&gt;函数参数不要超过两个&lt;/h2&gt;&lt;p&gt;限制函数的参数数量是非常重要的，因为它使你的函数更容易测试。超过三个参数会导致参数之间的组合过多，你必须对每个单独的参数测试大量不同的情况。&lt;/p&gt;
&lt;p&gt;没有参数是最理想的情况，一个或两个参数是可以接受的，三个以上则是应该避免的。这很重要。如果你有两个以上的参数，那么你的函数可能试图做的太多，如果不是，你可能需要将一个高级别的对象传当做参数传进去。&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($title, $body, $buttonText, $cancellable)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MenuConfig&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $body;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $buttonText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $cancellable = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MenuConfig();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config-&amp;gt;title = &lt;span class=&quot;string&quot;&gt;&#39;Foo&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config-&amp;gt;body = &lt;span class=&quot;string&quot;&gt;&#39;Bar&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config-&amp;gt;buttonText = &lt;span class=&quot;string&quot;&gt;&#39;Baz&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$config-&amp;gt;cancellable = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MenuConfig $config)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——变量部分</title>
    <link href="http://www.tenpercent.top/2018/02/24/clean-code-php/"/>
    <id>http://www.tenpercent.top/2018/02/24/clean-code-php/</id>
    <published>2018-02-23T16:00:00.000Z</published>
    <updated>2019-08-30T14:01:17.896Z</updated>
    
    <content type="html"><![CDATA[<p>将代码写的简洁并且易读易懂是每一位优秀的coder所应该具备的基本功。</p><p>前几天在github上看到<a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="noopener">clean-code-php</a>这个项目，感觉很有收获，于是在这里记录一下。</p><h2 id="使用有意义并且可读的变量名称"><a href="#使用有意义并且可读的变量名称" class="headerlink" title="使用有意义并且可读的变量名称"></a>使用有意义并且可读的变量名称</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ymdstr = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$currentDate = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="对同一只类型的变量使用同样的词汇"><a href="#对同一只类型的变量使用同样的词汇" class="headerlink" title="对同一只类型的变量使用同样的词汇"></a>对同一只类型的变量使用同样的词汇</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo();</span><br><span class="line">getUserData();</span><br><span class="line">getUserRecord();</span><br><span class="line">getUserProfile();</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUser();</span><br></pre></td></tr></table></figure><h2 id="使用易于查找的命名"><a href="#使用易于查找的命名" class="headerlink" title="使用易于查找的命名"></a>使用易于查找的命名</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的4是什么鬼??</span></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_READ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_CREATE = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_UPDATE = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> ACCESS_DELETE = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; User::ACCESS_UPDATE) &#123;</span><br><span class="line">    <span class="comment">// do edit ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不要让读者猜"><a href="#不要让读者猜" class="headerlink" title="不要让读者猜"></a>不要让读者猜</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$l = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($l); $i++) &#123;</span><br><span class="line">    $li = $l[$i];</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// $li 变量代表什么？？？</span></span><br><span class="line">    dispatch($li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($locations <span class="keyword">as</span> $location) &#123;</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dispatch($location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免过深的嵌套"><a href="#避免过深的嵌套" class="headerlink" title="避免过深的嵌套"></a>避免过深的嵌套</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($day) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string($day)) &#123;</span><br><span class="line">            $day = strtolower($day);</span><br><span class="line">            <span class="keyword">if</span> ($day === <span class="string">'friday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'saturday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'sunday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($day) &amp;&amp; ! is_string($day)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $openingDays = [</span><br><span class="line">        <span class="string">'friday'</span>, <span class="string">'saturday'</span>, <span class="string">'sunday'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> in_array(strtolower($day), $openingDays);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($n !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($n !== <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">($n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($n &gt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不要添加不必要的上下文"><a href="#不要添加不必要的上下文" class="headerlink" title="不要添加不必要的上下文"></a>不要添加不必要的上下文</h2><p>如果你的类/对象已经说明了一些信息,不要在你的变量名和属性里重复</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $carMake;</span><br><span class="line">    <span class="keyword">public</span> $carModel;</span><br><span class="line">    <span class="keyword">public</span> $carColor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $make;</span><br><span class="line">    <span class="keyword">public</span> $model;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数初始化时设置默认值"><a href="#参数初始化时设置默认值" class="headerlink" title="参数初始化时设置默认值"></a>参数初始化时设置默认值</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $newName = $name ?: <span class="string">'ABC'</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置默认值一个比较明显的好处是，当对一个较早之前已经定义好的函数添加参数时,将新增的参数设置默认值可以省得去修改以前使用该函数的地方。</p><p><a href="https://github.com/chenjiehui/clean-code-php" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将代码写的简洁并且易读易懂是每一位优秀的coder所应该具备的基本功。&lt;/p&gt;
&lt;p&gt;前几天在github上看到&lt;a href=&quot;https://github.com/jupeter/clean-code-php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;clean-code-php&lt;/a&gt;这个项目，感觉很有收获，于是在这里记录一下。&lt;/p&gt;
&lt;h2 id=&quot;使用有意义并且可读的变量名称&quot;&gt;&lt;a href=&quot;#使用有意义并且可读的变量名称&quot; class=&quot;headerlink&quot; title=&quot;使用有意义并且可读的变量名称&quot;&gt;&lt;/a&gt;使用有意义并且可读的变量名称&lt;/h2&gt;&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ymdstr = $moment-&amp;gt;format(&lt;span class=&quot;string&quot;&gt;&#39;y-m-d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$currentDate = $moment-&amp;gt;format(&lt;span class=&quot;string&quot;&gt;&#39;y-m-d&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
</feed>
