<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刻意练习，每日精进</title>
  <icon>https://www.gravatar.com/avatar/c7953fb7f3bc4f8181191e5e6f352f05</icon>
  <subtitle>但行好事，莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.tenpercent.top/"/>
  <updated>2019-08-24T13:33:48.206Z</updated>
  <id>http://www.tenpercent.top/</id>
  
  <author>
    <name>Jeffrey</name>
    <email>chenjiehui0807@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【深入 PHP】PHP7 数组的底层实现</title>
    <link href="http://www.tenpercent.top/2019/08/23/PHP7-Array/"/>
    <id>http://www.tenpercent.top/2019/08/23/PHP7-Array/</id>
    <published>2019-08-22T16:00:00.000Z</published>
    <updated>2019-08-24T13:33:48.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-数组具有的特性"><a href="#PHP-数组具有的特性" class="headerlink" title="PHP 数组具有的特性"></a>PHP 数组具有的特性</h2><p>PHP 的数组是一种非常强大灵活的数据类型，在讲它的底层实现之前，先看一下 PHP 的数组都具有哪些特性。</p><ul><li>可以使用数字或字符串作为数组健值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span> =&gt; <span class="string">'ok'</span>, <span class="string">'one'</span> =&gt; <span class="string">'hello'</span>];</span><br></pre></td></tr></table></figure><ul><li>可按顺序读取数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($arr <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line"><span class="keyword">echo</span> $arr[$key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可随机读取数组中的元素</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$arr = [<span class="number">1</span> =&gt; <span class="string">'ok'</span>, <span class="string">'one'</span> =&gt; <span class="string">'hello'</span>, <span class="string">'a'</span> =&gt; <span class="string">'world'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $arr[<span class="string">'one'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> current($arr);</span><br></pre></td></tr></table></figure><ul><li>数组的长度是可变的</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">$arr[] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">array_push($arr, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>正是基于这些特性，我们可以使用 PHP 中的数组轻易的实现集合、栈、列表、字典等多种数据结构。那么这些特性在底层是如何实现的呢？ 这就得从数据结构说起了。 </p><a id="more"></a><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><blockquote><p>PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。</p></blockquote><p>PHP 数组的底层实现是散列表（也叫 hashTable )，散列表是根据键（Key）直接访问内存存储位置的数据结构，它的key - value 之间存在一个映射函数，可以根据 key 通过映射函数得到的散列值直接索引到对应的 value 值，无需通过关键字比较，在理想情况下，不考虑散列冲突，散列表的查找效率是非常高的，时间复杂度是 O(1)。</p><p>从源码中我们可以看到 zend_array 的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">zend_array</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> <span class="title">hashTable</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_array</span> &#123;</span></span><br><span class="line">    zend_refcounted_h gc;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ZEND_ENDIAN_LOHI_4(</span><br><span class="line">                    zend_uchar    flags,</span><br><span class="line">                    zend_uchar    nApplyCount,</span><br><span class="line">                    zend_uchar    nIteratorsCount,</span><br><span class="line">                    zend_uchar    reserve)</span><br><span class="line">        &#125; v;</span><br><span class="line">        <span class="keyword">uint32_t</span> flags;</span><br><span class="line">    &#125; u;</span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableMask; <span class="comment">// 哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span><br><span class="line">    Bucket           *arData;     <span class="comment">// 存储元素数组，指向第一个Bucket</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumUsed;   <span class="comment">// 已用Bucket数（含失效的 Bucket）</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nNumOfElements; <span class="comment">// 哈希表有效元素数</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nTableSize;     <span class="comment">// 哈希表总大小，为2的n次方（包括无效的元素）</span></span><br><span class="line">    <span class="keyword">uint32_t</span>          nInternalPointer; <span class="comment">// 内部指针，用于遍历</span></span><br><span class="line">    zend_long         nNextFreeElement; <span class="comment">// 下一个可用的数值索引,如:arr[] = 1;arr["a"] = 2;arr[] = 3;  则nNextFreeElement = 2;</span></span><br><span class="line">    <span class="keyword">dtor_func_t</span>       pDestructor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该结构中的 Bucket 即储存元素的数组，arData 指向数组的起始位置，使用映射函数对 key 值进行映射后可以得到偏移值，通过内存起始位置 + 偏移值即可在散列表中进行寻址操作。</p><p>Bucket 的数据结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Bucket</span> &#123;</span></span><br><span class="line">    zval              val; <span class="comment">// 存储的具体 value，这里是一个 zval，而不是一个指针</span></span><br><span class="line">    zend_ulong        h;   <span class="comment">// 数字 key 或字符串 key 的哈希值。用于查找时 key 的比较    </span></span><br><span class="line">    zend_string      *key; <span class="comment">// 当 key 值为字符串时，指向该字符串对应的 zend_string（使用数字索引时该值为 NULL），用于查找时 key 的比较</span></span><br><span class="line">&#125; Bucket;</span><br></pre></td></tr></table></figure><p>到这里有个问题出现了：存储在散列表里的元素是无序的，PHP 数组如何做到按顺序读取的呢？</p><p>答案是中间映射表，为了实现散列表的有序性，PHP 为其增加了一张中间映射表，该表是一个大小与 Bucket 相同的数组，数组中储存整形数据，用于保存元素实际储存的 Value 在 Bucekt 中的下标。Bucekt 中的数据是有序的，而中间映射表中的数据是无序的。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190824170828.png" alt></p><p>而通过映射函数映射后的散列值要在中间映射表的区间内，这就对映射函数提出了要求。</p><h2 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h2><p>PHP7 数组采用的映射方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nIndex = h | ht-&gt;nTableMask;</span><br></pre></td></tr></table></figure><p>将 key 经过 time33 算法生成的哈希值 h 和 nTableMask 进行或运算即可得出映射表的下标，其中 nTableMask 数值为 nTableSize 的负数。并且由于  nTableSize 的值为 2 的幂次方，所以 nTableMask 二进制位右侧全部为 0，保证了 h | ht-&gt;nTableMask 的取值范围会在 [-nTableSize, -1] 之间，正好在映射表的下标范围内。另外，用按位或运算的方法和其他方法如取余的方法相比运算速度较高，这个映射函数可以说设计的非常巧妙了。</p><h2 id="散列（哈希）冲突"><a href="#散列（哈希）冲突" class="headerlink" title="散列（哈希）冲突"></a>散列（哈希）冲突</h2><p>不同键名的通过映射函数计算得到的散列值有可能相同，此时便发生了散列冲突。</p><p>对于散列冲突有以下 4 种常用方法：</p><p>1.将散列值放到相邻的最近地址里</p><p>2.换个散列函数重新计算散列值</p><p>3.将冲突的散列值统一放到另一个地方</p><p>4.在冲突位置构造一个单向链表，将散列值相同的元素放到相同槽位对应的链表中。这个方法叫链地址法，PHP 数组就是采用这个方法解决散列冲突的问题。</p><p>其具体实现是：将冲突的 Bucket 串成链表，这样中间映射表映射出的就不是某一个元素，而是一个 Bucket 链表，通过散列函数定位到对应的 Bucket 链表时，需要遍历链表，逐个对比 Key 值，继而找到目标元素。而每个 Bucket 之间的链接则是将原 value 的下标保存到新 value 的 zval.u2.next 里，新 value 放在当前位置上，从而形成一个单向链表。</p><p>举个例子：</p><p>当我们访问 $arr[‘key’] 的过程中，假设首先通过散列运算得出映射表下标为 -2 ，然后访问映射表发现其内容指向 arData 数组下标为 1 的元素。此时我们将该元素的 key 和要访问的键名相比较，发现两者并不相等，则该元素并非我们所想访问的元素，而元素的 zval.u2.next 保存的值正是另一个具有相同散列值的元素对应 arData 数组的下标，所以我们可以不断通过 zval.u2.next 的值遍历直到找到键名相同的元素。</p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>PHP 的数组在底层实现了自动扩容机制，当插入一个元素且没有空闲空间时，就会触发自动扩容机制，扩容后再执行插入。</p><p>扩容的过程为：</p><p>如果已删除元素所占比例达到阈值，则会移除已被逻辑删除的 Bucket，然后将后面的 Bucket 向前补上空缺的 Bucket，因为 Bucket 的下标发生了变动，所以还需要更改每个元素在中间映射表中储存的实际下标值。</p><p>如果未达到阈值，PHP 则会申请一个大小是原数组两倍的新数组，并将旧数组中的数据复制到新数组中，因为数组长度发生了改变，所以 key-value 的映射关系需要重新计算，这个步骤为重建索引。</p><h2 id="重建散列表"><a href="#重建散列表" class="headerlink" title="重建散列表"></a>重建散列表</h2><p>在删除某一个数组元素时，会先使用标志位对该元素进行逻辑删除，即在删除 value 时只是将 value 的 type 设置为 IS_UNDEF，而不会立即删除该元素所在的 Bucket，因为如果每次删除元素立刻删除 Bucket 的话，每次都需要进行排列操作，会造成不必要的性能开销。</p><p>所以，当删除元素达到一定数量或扩容后都需要重建散列表，即移除被标记为删除的 value。因为 value 在 Bucket 位置移动了或哈希数组 nTableSize 变化了导致 key 与 value 的映射关系改变，重建过程就是遍历 Bucket 数组中的 value，然后重新计算映射值更新到散列表。</p><hr><p>关于 PHP7 的数组底层实现就总结这么些了，因为水平有限也无法研究的十分详尽清楚，如果有疑问或者不足之处欢迎提出~~</p><p><em>参考资料</em></p><p>《PHP7 的底层设计与源码实现》</p><p><a href="https://github.com/pangudashu/php7-internal/blob/master/2/zend_ht.md" target="_blank" rel="noopener">php7-internal</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP-数组具有的特性&quot;&gt;&lt;a href=&quot;#PHP-数组具有的特性&quot; class=&quot;headerlink&quot; title=&quot;PHP 数组具有的特性&quot;&gt;&lt;/a&gt;PHP 数组具有的特性&lt;/h2&gt;&lt;p&gt;PHP 的数组是一种非常强大灵活的数据类型，在讲它的底层实现之前，先看一下 PHP 的数组都具有哪些特性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用数字或字符串作为数组健值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可按顺序读取数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($arr &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $key =&amp;gt; $value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $arr[$key];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可随机读取数组中的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $arr[&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; current($arr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;数组的长度是可变的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$arr[] = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array_push($arr, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正是基于这些特性，我们可以使用 PHP 中的数组轻易的实现集合、栈、列表、字典等多种数据结构。那么这些特性在底层是如何实现的呢？ 这就得从数据结构说起了。 &lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>【深入 PHP】PHP7 的基本变量</title>
    <link href="http://www.tenpercent.top/2019/08/15/php-zval-struct/"/>
    <id>http://www.tenpercent.top/2019/08/15/php-zval-struct/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-08-15T13:12:46.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的基础结构"><a href="#变量的基础结构" class="headerlink" title="变量的基础结构"></a>变量的基础结构</h2><p>我们都知道PHP的变量是弱类型的，声明的时候无需指定类型。那么这里面具体是怎么实现的呢？这就得从变量的基础结构说起了。</p><h3 id="zval的实现"><a href="#zval的实现" class="headerlink" title="zval的实现"></a>zval的实现</h3><p>在源码文件 zend_type.h 中，可以看到 zval 的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zval_struct     zval;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">zend_value        value;<span class="comment">/* value */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    type,<span class="comment">/* active type */</span></div><div class="line">zend_uchar    type_flags,</div><div class="line">zend_uchar    const_flags,</div><div class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u1;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></div><div class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></div><div class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></div><div class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></div><div class="line"><span class="keyword">uint32_t</span>     access_flags;         <span class="comment">/* class constant access flags */</span></div><div class="line"><span class="keyword">uint32_t</span>     property_guard;       <span class="comment">/* single property guard */</span></div><div class="line"><span class="keyword">uint32_t</span>     extra;                <span class="comment">/* not further specified */</span></div><div class="line">&#125; u2;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>zval 的结构由一个保存变量类型的值或指针的 union 联合体 zend_value 以及两个 union 联合体 u1 和 u2 组成</p><a id="more"></a><ul><li>u1</li></ul><p>u1的作用是用来保存变量类型及其信息，其里面的字段用处如下：</p><p>type：记录变量类型。  即可通过 u2.v.type 来访问到</p><p>type_flags：对应变量特有类型的标记（如常量类型，需引用计数类型，不可变类型），不同类型的变量对应的 flag 不一样。</p><p>const_flags：常量类型的标记</p><p>reserved：保留字段</p><ul><li>u2</li></ul><p>u2 主要是辅助作用，由于结构体的内存对齐，所以 u2 的的这块空间有或者没有 u2 都是已经占据空间了，所以就利用起来。u2的辅助字段里面记录了很多类型信息，这些信息对内部功能有很大的好处，或提升缓存友好性或减少了内存寻址的操作。这里介绍其中部分字段。</p><p>next：用来解决哈希冲突问题（哈希冲突这个目前还不懂），记录冲突的下一个元素位置。</p><p>cache_slot：运行时缓存。在执行函数时会优先去缓存中查找，若缓存中没有，再去全局的 function 表中查找。</p><p>num_args：函数调用时传入参数的个数</p><p>access_flags：对象类的访问标识，如public protected private 这些。</p><ul><li>zend_value</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">zend_long         lval;<span class="comment">/* 整型*/</span></div><div class="line"><span class="keyword">double</span>            dval;<span class="comment">/* 浮点型 */</span></div><div class="line">zend_refcounted  *counted;</div><div class="line">zend_string      *str;</div><div class="line">zend_array       *arr;</div><div class="line">zend_object      *obj;</div><div class="line">zend_resource    *res;</div><div class="line">zend_reference   *ref;</div><div class="line">zend_ast_ref     *ast;</div><div class="line">zval             *zv;</div><div class="line"><span class="keyword">void</span>             *ptr;</div><div class="line">zend_class_entry *ce;</div><div class="line">zend_function    *func;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span> w1;</div><div class="line"><span class="keyword">uint32_t</span> w2;</div><div class="line">&#125; ww;</div><div class="line">&#125; zend_value;</div></pre></td></tr></table></figure><p>从 zend__value 中可以看出，long、double 类型直接存储值，而其它类型都为指针，指向各自的结构。所以，由于 zval 这样的结构，PHP 变量在声明的时候不用显示的指定其类型，因为不管你赋给变量什么类型的值，它都能帮你找到对应的存储结构。</p><p>以值为字符串的变量为例，其结构是这样的：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193819.png" alt=""></p><h3 id="PHP5-与-PHP7-的-zval-结构对比"><a href="#PHP5-与-PHP7-的-zval-结构对比" class="headerlink" title="PHP5 与 PHP7 的 zval 结构对比"></a>PHP5 与 PHP7 的 zval 结构对比</h3><ul><li>PHP5 </li></ul><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193906.png" alt=""></p><ul><li>PHP7 </li></ul><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190815193952.png" alt=""></p><p>可以看到 php7 的 zval 总的只占 16 个字节，相比 PHP5 的 zval 所占用的 48 个字节节省了很大的内存。</p><p>此外，在 PHP5 中，所有的变量都在堆中申请，但是对于临时变量来说，没有必要在堆中申请。所以在 PHP7 中对此做了优化，临时变量是直接在栈中申请的。</p><h2 id="常见变量类型"><a href="#常见变量类型" class="headerlink" title="常见变量类型"></a>常见变量类型</h2><p>下面介绍几个常见类型的变量结构，其他更多的类型，可自行查看源码。</p><h3 id="整型和浮点型"><a href="#整型和浮点型" class="headerlink" title="整型和浮点型"></a>整型和浮点型</h3><p>对于整型和浮点型，由于其占用空间小，在 zval 中是直接存储的 整型的值是存在 lval 里，浮点型值则是存储在 dval 里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">    zend_long         lval;             <span class="comment">/* 整型*/</span></div><div class="line">    <span class="keyword">double</span>            dval;             <span class="comment">/* 浮点型 */</span></div><div class="line">    ... </div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>PHP 7 中定义了新的字符串结构体。结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_string &#123;</div><div class="line">zend_refcounted_h ;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value */</span></div><div class="line"><span class="keyword">size_t</span>            len;</div><div class="line"><span class="keyword">char</span>              val[<span class="number">1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面各个字段的意思：</p><p>gc： 变量引用信息，所有用到引用计数的变量类型都会有这个结构。</p><p>h： 哈希值，数组中计算索引时会用到。（据说这个操作为 PHP7 提高了 5% 的性能）</p><p>len： 字符串长度，通过这个值保证二进制安全</p><p>val： 字符串内容，变长struct，分配时按len长度申请内存<br>数组</p><p>array 是 PHP 中非常强大的一个数据结构，它的底层实现就是普通的有序HashTable，这里简单看下它的结构。后续再具体深入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zend_array HashTable;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> _zend_array &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    flags,</div><div class="line">zend_uchar    nApplyCount,</div><div class="line">zend_uchar    nIteratorsCount,</div><div class="line">zend_uchar    consistency)</div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> flags;</div><div class="line">&#125; u;</div><div class="line"><span class="keyword">uint32_t</span>          nTableMask;</div><div class="line">Bucket           *arData;</div><div class="line"><span class="keyword">uint32_t</span>          nNumUsed;</div><div class="line"><span class="keyword">uint32_t</span>          nNumOfElements;</div><div class="line"><span class="keyword">uint32_t</span>          nTableSize;</div><div class="line"><span class="keyword">uint32_t</span>          nInternalPointer;</div><div class="line">zend_long         nNextFreeElement;</div><div class="line"><span class="keyword">dtor_func_t</span>       pDestructor;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>###对象</p><p>PHP7 的对象结构也是重新设计了，和 PHP5 的实现有了很大的不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_object &#123;</div><div class="line">    zend_refcounted_h gc;</div><div class="line">    <span class="keyword">uint32_t</span>          handle;</div><div class="line">    zend_class_entry *ce; </div><div class="line">    <span class="keyword">const</span> zend_object_handlers *handlers;</div><div class="line">    HashTable        *properties; </div><div class="line">    zval              properties_table[<span class="number">1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这里介绍下其中几个字段：</p><p>gc：gc头部</p><p>*ce：对象对应的 class 类</p><p>*properties ：HashTable结构，key 为对象的属性名，value 是属性值在properties_tables数组中的偏移量，通过偏移量在 properties_talbe 找到对应的属性值。</p><p>properties_talbe[1]：存储对象的属性值</p><hr><p>ok，先写这到这里。</p><p><em>参考资料</em></p><p>《PHP7 底层设计与源码实现》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的基础结构&quot;&gt;&lt;a href=&quot;#变量的基础结构&quot; class=&quot;headerlink&quot; title=&quot;变量的基础结构&quot;&gt;&lt;/a&gt;变量的基础结构&lt;/h2&gt;&lt;p&gt;我们都知道PHP的变量是弱类型的，声明的时候无需指定类型。那么这里面具体是怎么实现的呢？这就得从变量的基础结构说起了。&lt;/p&gt;
&lt;h3 id=&quot;zval的实现&quot;&gt;&lt;a href=&quot;#zval的实现&quot; class=&quot;headerlink&quot; title=&quot;zval的实现&quot;&gt;&lt;/a&gt;zval的实现&lt;/h3&gt;&lt;p&gt;在源码文件 zend_type.h 中，可以看到 zval 的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct     zval;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	zend_value        value;			&lt;span class=&quot;comment&quot;&gt;/* value */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			ZEND_ENDIAN_LOHI_4(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				zend_uchar    type,			&lt;span class=&quot;comment&quot;&gt;/* active type */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				zend_uchar    type_flags,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				zend_uchar    const_flags,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				zend_uchar    reserved)	    &lt;span class=&quot;comment&quot;&gt;/* call info for EX(This) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; v;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; type_info;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125; u1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     next;                 &lt;span class=&quot;comment&quot;&gt;/* hash collision chain */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     cache_slot;           &lt;span class=&quot;comment&quot;&gt;/* literal cache slot */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     lineno;               &lt;span class=&quot;comment&quot;&gt;/* line number (for ast nodes) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     num_args;             &lt;span class=&quot;comment&quot;&gt;/* arguments number for EX(This) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     fe_pos;               &lt;span class=&quot;comment&quot;&gt;/* foreach position */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     fe_iter_idx;          &lt;span class=&quot;comment&quot;&gt;/* foreach iterator index */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     access_flags;         &lt;span class=&quot;comment&quot;&gt;/* class constant access flags */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     property_guard;       &lt;span class=&quot;comment&quot;&gt;/* single property guard */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt;     extra;                &lt;span class=&quot;comment&quot;&gt;/* not further specified */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125; u2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;zval 的结构由一个保存变量类型的值或指针的 union 联合体 zend_value 以及两个 union 联合体 u1 和 u2 组成&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>【深入 PHP】PHP7 底层运行机制</title>
    <link href="http://www.tenpercent.top/2019/08/09/PHP-internal-learning/"/>
    <id>http://www.tenpercent.top/2019/08/09/PHP-internal-learning/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-08-15T12:26:35.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP7-代码执行过程"><a href="#PHP7-代码执行过程" class="headerlink" title="PHP7 代码执行过程"></a>PHP7 代码执行过程</h2><p>PHP 是解释型语言，其执行过程需先编译成中间代码，再经由特定的虚拟机，翻译成特定的指令被执行。其执行过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP 代码 =&gt; Token =&gt; 抽象语法树 =&gt; Opcodes =&gt; 执行</div></pre></td></tr></table></figure><p>各个步骤内容如下：</p><ul><li>源代码通过词法分析得到 Token </li></ul><p>Token 是 PHP 代码被切割成的有意义的标识。PHP7 一共有 137 种 Token，在zend_language_parser.h 文件中做了定义。</p><ul><li>基于语法分析器将 Token 转换成抽象语法树（AST）</li></ul><p>Token 就是一个个的词块，但是单独的词块不能表达完整的语义，还需要借助一定的规则进行组织串联。所以就需要语法分析器根据语法匹配Token，将 Token 进行串联。语法分析器串联完 Token 后的产物就是抽象语法树（AST，Abstract Syntax Tree）。<br>AST 是 PHP7 版本的新特性，之前版本的 PHP 代码的执行过程中是没有生成 AST 这一步的。它的作用主要是实现了PHP编译器和解释器的解耦，提升了可维护性。</p><ul><li>将语法树转换成 Opcode</li></ul><p>需要将语法树转换成Opcode，才能被引擎直接执行。</p><ul><li>执行 Opcodes</li></ul><p>opcodes 是 opcode 的集合形式，是 PHP 执行过程中的中间代码。PHP工程优化措施中有一个比较常见的“开启 opcache”，指的技术这里将 opcodes 进行缓存。通过省去从源码到 opcode 的阶段，引擎直接执行缓存好的 opacode，以提升性能。</p><a id="more"></a><h2 id="PHP7-内核架构"><a href="#PHP7-内核架构" class="headerlink" title="PHP7 内核架构"></a>PHP7 内核架构</h2><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190809195522.png" alt=""></p><p><em>要把这张图印在脑海里</em></p><ul><li>zend引擎</li></ul><p>词法/语法分析、AST编译和 opcodes 的执行均在 Zend 引擎中实现。此外，PHP的变量设计、内存管理、进程管理等也在引擎层实现。</p><ul><li>PHP层</li></ul><p>zend 引擎为 PHP 提供基础能力，而来自外部的交互则需要通过 PHP 层来处理。</p><ul><li>SAPI</li></ul><p>server API 的缩写，其中包含了场景的 cli SAPI 和 fpm SAPI。只要遵守定义好的 SAPI 协议，外部模块便可与PHP完成交互。</p><ul><li>扩展部分</li></ul><p>依据 zend 引擎提供的核心能力和接口规范，可以进行开发扩展。</p><h2 id="PHP-7-源码结构"><a href="#PHP-7-源码结构" class="headerlink" title="PHP 7 源码结构"></a>PHP 7 源码结构</h2><p>php 7 的源码主要目录有：sapi 、Zend、main、ext 和 TSRM 这几个。</p><ul><li>sapi目录</li></ul><p>sapi目录是对输入和输出层的抽象，是PHP提供对外服务的规范。</p><p>几种常用的 SAPI：</p><p>1）apache2handler: Apache 扩展，编译后生成动态链接库，配置到Apache下。当有 http 请求到 Apache 时，根据配置会调用此动态链接库来执行PHP代码，完成与PHP的交互。</p><p>2）cgi-fcgi: 编译后生成支持 CGI 协议的可执行程序，webserver（如NGINX）通过 CGI 协议把请求传给CGI进程，CGI 进程根据请求执行相应代码后将执行结果返回给 webserver。</p><p>3）fpm-fcgi: fpm是 FastCGI 进程管理器。以 NGINX 服务器为例，当有请求发送到 NGINX 服务器，NGINX 按照 FastCGI 协议把请求交给 php-fpm 进程处理。</p><p>4）cli: PHP的命令行交互接口</p><ul><li>Zend 目录</li></ul><p>Zend 目录是 PHP 的核心代码。PHP中的内存管理，垃圾回收、进程管理、变量、数组实现等均在该目录的源码里。</p><ul><li>main 目录</li></ul><p>main目录是SAPI层和Zend层的黏合剂。Zend 层实现了 PHP 脚本的编译和执行，sapi 层实现了输入和输出的抽象，main目录则在它们中间起着承上启下的作用。承上，解析 SAPI 的请求，分析要执行的脚本文件和参数；启下，调用 zend 引擎之前，完成必要的模块初始化等工作。</p><ul><li>ext目录</li></ul><p>ext 是 PHP 扩展相关的目录，常用的 array、str、pdo 等系列函数都在这里定义。</p><ul><li>TSRM </li></ul><p>TSRM（Thread Safe Resource Manager）——线程安全资源管理器， 是用来保证资源共享的安全。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP7-代码执行过程&quot;&gt;&lt;a href=&quot;#PHP7-代码执行过程&quot; class=&quot;headerlink&quot; title=&quot;PHP7 代码执行过程&quot;&gt;&lt;/a&gt;PHP7 代码执行过程&lt;/h2&gt;&lt;p&gt;PHP 是解释型语言，其执行过程需先编译成中间代码，再经由特定的虚拟机，翻译成特定的指令被执行。其执行过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;PHP 代码 =&amp;gt; Token =&amp;gt; 抽象语法树 =&amp;gt; Opcodes =&amp;gt; 执行&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;各个步骤内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源代码通过词法分析得到 Token &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Token 是 PHP 代码被切割成的有意义的标识。PHP7 一共有 137 种 Token，在zend_language_parser.h 文件中做了定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于语法分析器将 Token 转换成抽象语法树（AST）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Token 就是一个个的词块，但是单独的词块不能表达完整的语义，还需要借助一定的规则进行组织串联。所以就需要语法分析器根据语法匹配Token，将 Token 进行串联。语法分析器串联完 Token 后的产物就是抽象语法树（AST，Abstract Syntax Tree）。&lt;br&gt;AST 是 PHP7 版本的新特性，之前版本的 PHP 代码的执行过程中是没有生成 AST 这一步的。它的作用主要是实现了PHP编译器和解释器的解耦，提升了可维护性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将语法树转换成 Opcode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要将语法树转换成Opcode，才能被引擎直接执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 Opcodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;opcodes 是 opcode 的集合形式，是 PHP 执行过程中的中间代码。PHP工程优化措施中有一个比较常见的“开启 opcache”，指的技术这里将 opcodes 进行缓存。通过省去从源码到 opcode 的阶段，引擎直接执行缓存好的 opacode，以提升性能。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="底层" scheme="http://www.tenpercent.top/tags/%E5%BA%95%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>深入 Nginx 之配置篇</title>
    <link href="http://www.tenpercent.top/2019/02/15/learn-nginx-configuration/"/>
    <id>http://www.tenpercent.top/2019/02/15/learn-nginx-configuration/</id>
    <published>2019-02-14T16:00:00.000Z</published>
    <updated>2019-03-01T11:18:38.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用配置项"><a href="#常用配置项" class="headerlink" title="常用配置项"></a>常用配置项</h2><p>在工作中，我们与 Nginx 打交道更多的是通过其配置文件来进行。那么掌握这些配置项各自的作用就很有必要了。</p><p>首先，nginx.conf 的内容通常是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">...              </div><div class="line">...        #核心摸块</div><div class="line"></div><div class="line">events &#123;        #事件模块</div><div class="line"> </div><div class="line">   ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;     # http 模块</div><div class="line"></div><div class="line">    server &#123;      # server块</div><div class="line">     </div><div class="line">        location [PATTERN] &#123;  # location块</div><div class="line">        </div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        location [PATTERN] &#123;</div><div class="line">        </div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    server &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">mail &#123;     # mail 模块</div><div class="line"> </div><div class="line"> server &#123;    # server块</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>我们依次看一下每个模块一般有哪些配置项：</p><h3 id="核心模块"><a href="#核心模块" class="headerlink" title="核心模块"></a>核心模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">user admin; #配置用户或者组。</div><div class="line"></div><div class="line">worker_processes 4; #允许生成的进程数，默认为1 </div><div class="line"></div><div class="line">pid /nginx/pid/nginx.pid; #指定 nginx 进程运行文件存放地址 </div><div class="line"></div><div class="line">error_log log/error.log debug; #错误日志路径，级别。</div></pre></td></tr></table></figure><h3 id="事件模块"><a href="#事件模块" class="headerlink" title="事件模块"></a>事件模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">events &#123; </div><div class="line">accept_mutex on; #设置网路连接序列化，防止惊群现象发生，默认为on </div><div class="line"></div><div class="line">multi_accept on; #设置一个进程是否同时接受多个网络连接，默认为off </div><div class="line"></div><div class="line">use epoll; #事件驱动模型select|poll|kqueue|epoll|resig</div><div class="line"></div><div class="line">worker_connections 1024; #最大连接数，默认为512</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    include       mime.types;   #文件扩展名与文件类型映射表</div><div class="line">    </div><div class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</div><div class="line">    </div><div class="line">    access_log off; #取消服务日志    </div><div class="line"></div><div class="line">    sendfile on;   #允许 sendfile 方式传输文件，默认为off，可以在http块，server块，location块。</div><div class="line">    </div><div class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</div><div class="line">    </div><div class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</div><div class="line"></div><div class="line">    server </div><div class="line">    &#123;</div><div class="line">    keepalive_requests 120; #单连接请求上限次数。</div><div class="line">    </div><div class="line">    listen 80; #监听端口</div><div class="line">    </div><div class="line">    server_name  127.0.0.1;   #监听地址      </div><div class="line">    </div><div class="line">    index index.html index.htm index.php;</div><div class="line">    </div><div class="line">    root your_path;  #根目录</div><div class="line">  </div><div class="line">location ~ \.php$</div><div class="line">&#123;</div><div class="line">  fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;</div><div class="line">  </div><div class="line">  #fastcgi_pass 127.0.0.1:9000;</div><div class="line">  </div><div class="line">  fastcgi_index index.php;</div><div class="line">  </div><div class="line">  include fastcgi_params;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="配置项解析"><a href="#配置项解析" class="headerlink" title="配置项解析"></a>配置项解析</h2><ul><li><p>worker_processes</p><p>worker_processes 用来设置 Nginx 服务的进程数。该值推荐使用 CPU 内核数。</p></li><li><p>worker_cpu_affinity</p><p>worker_cpu_affinity 用来为每个进程分配CPU的工作内核，参数有多个二进制值表示，每一组代表一个进程，每组中的每一位代表该进程使用CPU的情况，1代表使用，0代表不使用。所以我们使用 worker_cpu_affinity 0001 0010 0100 1000;来让进程分别绑定不同的核上。默认情况下worker进程不绑定在任何一个CPU上。</p></li><li><p>worker_rlimit_nofile</p><p>设置毎个进程的最大文件打开数。如果不设的话上限就是系统的 ulimit –n的数字，一般为65535。</p></li><li><p>worker_connections</p><p>设置一个进程理论允许的最大连接数，理论上越大越好，但不可以超过 worker_rlimit_nofile 的值。</p></li><li><p>use epoll</p><p>设置事件驱动模型使用 epoll。epoll 是 Nginx 支持的高性能事件驱动库之一。是公认的非  常优秀的事件驱动模型。</p></li><li><p>accept_mutex  off</p><p>关闭网络连接序列化，当其设置为开启的时候，将会对多个 Nginx 进程接受连接进行序列化，防止多个进程对连接的争抢。当服务器连接数不多时，开启这个参数会让负载有一定程度的降低。但是当服务器的吞吐量很大时，为了效率，请关闭这个参数；并且关闭这个参数的时候也可以让请求在多个 worker 间的分配更均衡。所以我们设置 accept_mutex off;</p></li><li><p>multi_accept  on </p><p>设置一个进程可同时接受多个网络连接</p></li><li><p>Sendfile on</p><p>Sendfile是 Linux2.0 以后的推出的一个系统调用,它能简化网络传输过程中的步骤，提高服务器性能。<br>不用 sendfile的传统网络传输过程：硬盘 &gt;&gt; kernel buffer &gt;&gt; user buffer &gt;&gt; kernel socket buffer &gt;&gt; 协议栈</p><p>用 sendfile()来进行网络传输的过程：<br>硬盘 &gt;&gt; kernel buffer (快速拷贝到 kernelsocket buffer) &gt;&gt; 协议栈</p></li><li><p>tcp_nopush on</p><p>设置数据包会累积一下再一起传输，可以提高一些传输效率。 tcp_nopush 必须和 sendfile 搭配使用。</p></li><li><p>tcp_nodelay on</p><p>小的数据包不等待直接传输。默认为on。看上去是和 tcp_nopush 相反的功能，但是两边都为 on 时 nginx 也可以平衡这两个功能的使用。</p></li><li><p>keepalive_timeout</p><p>HTTP 连接的持续时间。设的太长会使无用的线程变的太多。这个根据服务器访问数量、处理速度以及网络状况方面考虑。 </p></li><li><p>send_timeout</p><p>设置 Nginx 服务器响应客户端的超时时间，这个超时时间只针对两个客户端和服务器建立连接后，某次活动之间的时间，如果这个时间后，客户端没有任何活动，Nginx服务器将关闭连接</p></li><li><p>gzip on</p><p>启用 gzip，对响应数据进行在线实时压缩,减少数据传输量。</p></li><li><p>gzip_disable “msie6”</p><p>Nginx服务器在响应这些种类的客户端请求时，不使用 Gzip 功能缓存应用数据，gzip_disable “msie6”对IE6浏览器的数据不进行 GZIP 压缩。</p></li></ul><p>常用的配置项大致这些，对于不同的业务场景，有的需要额外的其他配置项，这里不做展开。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>http 配置里有 location 这一项，它是用来根据请求中的 uri 来为其匹配相应的处理规则。</p><h3 id="location-查找规则"><a href="#location-查找规则" class="headerlink" title="location 查找规则"></a>location 查找规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">location  = / &#123;</div><div class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</div><div class="line">  [ config A ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location  / &#123;</div><div class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</div><div class="line">  # 但是正则和最长字符串会优先匹配</div><div class="line">  [ config B ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /documents/ &#123;</div><div class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ config C ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~ /documents/Abc &#123;</div><div class="line">  # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索</div><div class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</div><div class="line">  [ config CC ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location ^~ /images/ &#123;</div><div class="line">  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</div><div class="line">  [ config D ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</div><div class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</div><div class="line">  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</div><div class="line">  [ config E ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /images/ &#123;</div><div class="line">  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</div><div class="line">  [ config F ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /images/abc &#123;</div><div class="line">  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</div><div class="line">  # F与G的放置顺序是没有关系的</div><div class="line">  [ config G ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">location ~ /images/abc/ &#123;</div><div class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</div><div class="line">    [ config H ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>正则查找优先级从高到低依次如下：</p><p>“ = ” 开头表示精确匹配，如 A 中只匹配根目录结尾的请求，后面不能带任何字符串。</p><p>“ ^~ ” 开头表示uri以某个常规字符串开头，不是正则匹配</p><p>“ ~ ” 开头表示区分大小写的正则匹配;</p><p>“ ~* ”开头表示不区分大小写的正则匹配</p><p>“ / ” 通用匹配, 如果没有其它匹配,任何请求都会匹配到</p><h3 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h3><p>Nginx 的负载均衡需要用到 upstream 模块，可通过以下配置来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">upstream test-upstream &#123;</div><div class="line">    ip_hash; # 使用 ip_hash 算法分配</div><div class="line"> </div><div class="line">    server 192.168.1.1; # 要分配的 ip</div><div class="line">    server 192.168.1.2;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line"></div><div class="line">location / &#123;   </div><div class="line">    proxy_pass http://test-upstream;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的例子定义了一个 test-upstream 的负载均衡配置，通过 proxy_pass 反向代理指令将请求转发给该模块进行分配处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用配置项&quot;&gt;&lt;a href=&quot;#常用配置项&quot; class=&quot;headerlink&quot; title=&quot;常用配置项&quot;&gt;&lt;/a&gt;常用配置项&lt;/h2&gt;&lt;p&gt;在工作中，我们与 Nginx 打交道更多的是通过其配置文件来进行。那么掌握这些配置项各自的作用就很有必要了。&lt;/p&gt;
&lt;p&gt;首先，nginx.conf 的内容通常是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...              &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;... 	       #核心摸块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;events &amp;#123;        #事件模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http &amp;#123;     # http 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    server &amp;#123;      # server块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        location [PATTERN] &amp;#123;  # location块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        location [PATTERN] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mail &amp;#123;     # mail 模块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	 server &amp;#123;    # server块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="配置" scheme="http://www.tenpercent.top/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>深入 Nginx 之架构篇</title>
    <link href="http://www.tenpercent.top/2019/01/18/depth-nginx/"/>
    <id>http://www.tenpercent.top/2019/01/18/depth-nginx/</id>
    <published>2019-01-17T16:00:00.000Z</published>
    <updated>2019-02-23T11:10:46.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在读 Nginx 相关的书籍，做一下读书笔记。</p><p>Nginx 作为业界知名的高性能服务器，被广泛的应用。它的高性能正是由于其优秀的架构设计，其架构主要包括这几点：模块化设计、事件驱动架构、请求的多阶段异步处理、管理进程与多工作进程设计、内存池的设计，以下内容依次进行说明。</p><a id="more"></a><h2 id="模块化设计"><a href="#模块化设计" class="headerlink" title="模块化设计"></a>模块化设计</h2><p>高度模块化的设计是 Nginx 的架构基础。在 Nginx 中，除了少量的核心代码，其他一切皆为模块。</p><p>所有模块间是分层次、分类别的，Nginx 官方共有五大类型的模块：核心模块、配置模块、事件模块、HTTP 模块、mail 模块。它们之间的关系如下：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220142626.png" alt=""></p><p>在这 5 种模块中，配置模块和核心模块是与 Nginx 框架密切相关的。而事件模块则是 HTTP 模块和 mail 模块的基础。HTTP 模块和 mail 模块的“地位”类似，它们都是更关注于应用层面。</p><h2 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h2><p>事件驱动架构，简单的说就是由一些事件发生源来产生事件，由事件收集器来收集、分发事件，然后由事件处理器来处理这些事件（事件处理器需要先在事件收集器里注册自己想处理的事件）。</p><p>对于 Nginx 服务器而言，一般由网卡、磁盘产生事件，Nginx 中的事件模块将负责事件的收集、分发操作；而所有的模块都可能是事件消费者，它们首先需要向事件模块注册感兴趣的事件类型，这样，在有事件产生时，事件模块会把事件分发到相应的模块中进行处理。</p><p>对于传统 web 服务器（如 Apache）而言，采用的所谓事件驱动往往局限在 TCP 连接建立、关闭事件上，一个连接建立以后，在其关闭之前的所有操作都不再是事件驱动，这时会退化成按顺序执行每个操作的批处理模式，这样每个请求在连接建立后都将始终占用着系统资源，直到关闭才会释放资源。这种请求占用着服务器资源等待处理的模式会造成服务器资源极大的浪费。如下图所示，传统 web 服务器往往把一个进程或线程作为时间消费者，当一个请求产生的事件被该进程处理时，直到这个请求处理结束时，进程资源都将被这一请求所占用。比较典型的例子如 Apache 同步阻塞的多进程模式就是这样的。</p><p>传统 web 服务器处理事件的简单模型（矩形代表进程）:<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220195312.png" alt=""></p><p>Nginx 采用事件驱动架构处理业务的方式与传统的 web 服务器是不同的。它不使用进程或者线程来作为事件消费者，所谓的事件消费者只能是某个模块。只有事件收集、分发器才有资格占用进程资源，它们会在分发某个事件时调用事件消费模块使用当前占用的进程资源，如下图所示，该图中列出了 5 个不同的事件，在事件收集、分发者进程的一次处理过程中，这 5 个事件按照顺序被收集后，将开始使用当前进程分发事件，从而调用相应的事件消费者来处理事件。当然，这种分发、调用也是有序的。</p><p>Nginx 处理事件的简单模型：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190220201030.png" alt=""></p><p>由上图可以看出，处理请求事件时，Nginx 的事件消费者只是被事件分发者进程短期调用而已，这种设计使得网络性能、用户感知的请求时延都得到了提升，每个用户的请求所产生的事件会及时响应，整个服务器的网络吞吐量都会由于事件的及时响应而增大。当然，这也带来一定的要求，即每个事件消费者都不能有阻塞行为，否则将会由于长时间占用事件分发者进程而导致其他事件得不到及时响应，Nginx 的非阻塞特性就是由于它的模块都是满足这个要求的。</p><h2 id="请求的多阶段异步处理"><a href="#请求的多阶段异步处理" class="headerlink" title="请求的多阶段异步处理"></a>请求的多阶段异步处理</h2><p>多阶段异步处理请求与事件驱动架构是密切相关的，也就是说，请求的多阶段异步处理只能基于事件驱动架构实现。多阶段异步处理就是把一个请求的处理过程按照事件的触发方式划分为多个阶段，每个阶段都可以由事件收集、分发器来触发。</p><p>处理获取静态文件的 HTTP 请求时切分的阶段及各阶段的触发事件如下所示：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190221171304.png" alt=""></p><p>这个例子中，该请求大致分为 7 个阶段，这些阶段是可以重复发生的，因此，一个下载静态资源请求可能会由于请求数据过大，网速不稳定等因素而被分解为成百上千个上图所列出的阶段。</p><p>异步处理和多阶段是相辅相成的，只有把请求分为多个阶段，才有所谓的异步处理。当一个时间被分发到事件消费者中进行处理时，事件消费者处理完这个事件只相当于处理完 1 个请求的阶段。什么时候可以处理下一个阶段呢？这只能等待内核的通知，即当下一次事件出现时，epoll 等事件分发器将会获取到通知，然后去调用事件消费者进行处理。</p><h2 id="管理进程、多工作进程设计"><a href="#管理进程、多工作进程设计" class="headerlink" title="管理进程、多工作进程设计"></a>管理进程、多工作进程设计</h2><p>Nginx 在启动后，会有一个 master 进程和多个 worker 进程。master 进程主要用来管理worker 进程，包括接收来自外界的信号，向各 worker 进程发送信号，监控 worker 进程的运行状态以及启动 worker 进程。 worker 进程是用来处理来自客户端的请求事件。多个 worker 进程之间是对等的，它们同等竞争来自客户端的请求，各进程互相独立，一个请求只能在一个 worker 进程中处理。worker 进程的个数是可以设置的，一般会设置与机器 CPU 核数一致，这里面的原因与事件处理模型有关。Nginx 的进程模型，可由下图来表示：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190217223753.png" alt=""></p><p>在服务器上查看 Nginx 进程：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190217223806.png" alt=""></p><p>这种设计带来以下优点：</p><p>1） 利用多核系统的并发处理能力</p><p>现代操作系统已经支持多核 CPU 架构，这使得多个进程可以分别占用不同的 CPU 核心来工作。Nginx 中所有的 worker 工作进程都是完全平等的。这提高了网络性能、降低了请求的时延。</p><p>2） 负载均衡</p><p>多个 worker 工作进程通过进程间通信来实现负载均衡，即一个请求到来时更容易被分配到负载较轻的 worker 工作进程中处理。这也在一定程度上提高了网络性能、降低了请求的时延。</p><p>3） 管理进程会负责监控工作进程的状态，并负责管理其行为</p><p>管理进程不会占用多少系统资源，它只是用来启动、停止、监控或使用其他行为来控制工作进程。首先，这提高了系统的可靠性，当 worker 进程出现问题时，管理进程可以启动新的工作进程来避免系统性能的下降。其次，管理进程支持 Nginx 服务运行中的程序升级、配置项修改等操作，这种设计使得动态可扩展性、动态定制性较容易实现。</p><h2 id="内存池的设计"><a href="#内存池的设计" class="headerlink" title="内存池的设计"></a>内存池的设计</h2><p>为了避免出现内存碎片，减少向操作系统申请内存的次数、降低各个模块的开发复杂度，Nginx 设计了简单的内存池，它的作用主要是把多次向系统申请内存的操作整合成一次，这大大减少了 CPU 资源的消耗，同时减少了内存碎片。</p><p>因此，通常每一个请求都有一个简易的独立内存池（如每个 TCP 连接都分配了一个内存池），而在请求结束时则会销毁整个内存池，把曾经分配的内存一次性归还给操作系统。这种设计大大提高了模块开发的简单些，因为在模块申请内存后不用关心它的释放问题；而且因为分配内存次数的减少使得请求执行的时延得到了降低。同时，通过减少内存碎片，提高了内存的有效利用率和系统可处理的并发连接数，从而增强了网络性能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在读 Nginx 相关的书籍，做一下读书笔记。&lt;/p&gt;
&lt;p&gt;Nginx 作为业界知名的高性能服务器，被广泛的应用。它的高性能正是由于其优秀的架构设计，其架构主要包括这几点：模块化设计、事件驱动架构、请求的多阶段异步处理、管理进程与多工作进程设计、内存池的设计，以下内容依次进行说明。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="架构" scheme="http://www.tenpercent.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM 与 Nginx 的通信机制总结</title>
    <link href="http://www.tenpercent.top/2018/12/21/php-fpm%20and%20nginx%20/"/>
    <id>http://www.tenpercent.top/2018/12/21/php-fpm and nginx /</id>
    <published>2018-12-20T16:00:00.000Z</published>
    <updated>2019-01-30T06:50:30.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-FPM-介绍"><a href="#PHP-FPM-介绍" class="headerlink" title="PHP-FPM 介绍"></a>PHP-FPM 介绍</h2><h3 id="CGI-协议与-FastCGI-协议"><a href="#CGI-协议与-FastCGI-协议" class="headerlink" title="CGI 协议与 FastCGI 协议"></a>CGI 协议与 FastCGI 协议</h3><p>每种动态语言（ PHP,Python 等）的代码文件需要通过对应的解析器才能被服务器识别，而 CGI 协议就是用来使解释器与服务器可以互相通信。PHP 文件在服务器上的解析需要用到 PHP 解释器，再加上对应的 CGI 协议，从而使服务器可以解析到 PHP 文件。</p><p>由于 CGI 的机制是每处理一个请求需要 fork 一个 CGI 进程，请求结束再kill掉这个进程，在实际应用上比较浪费资源，于是就出现了CGI 的改良版本 FastCGI，FastCGI 在请求处理完后，不会 kill 掉进程，而是继续处理多个请求，这样就大大提高了效率。</p><h3 id="PHP-FPM-是什么"><a href="#PHP-FPM-是什么" class="headerlink" title="PHP-FPM 是什么"></a>PHP-FPM 是什么</h3><p>PHP-FPM 即 PHP-FastCGI Process Manager， 它是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种；master 进程只有一个，负责监听端口，接收来自服务器的请求，而 worker 进程则一般有多个（具体数量根据实际需要进行配置），每个进程内部都会嵌入一个 PHP 解释器，是代码真正执行的地方。</p><a id="more"></a><h2 id="Nginx-与-php-fpm-通信机制"><a href="#Nginx-与-php-fpm-通信机制" class="headerlink" title="Nginx 与 php-fpm 通信机制"></a>Nginx 与 php-fpm 通信机制</h2><p>当我们访问一个网站（如 www.test.com）的时候，处理流程是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  www.test.com</div><div class="line">        |</div><div class="line">        |</div><div class="line">      Nginx</div><div class="line">        |</div><div class="line">        |</div><div class="line">路由到 www.test.com/index.php</div><div class="line">        |</div><div class="line">        |</div><div class="line">加载 nginx 的 fast-cgi 模块</div><div class="line">        |</div><div class="line">        |</div><div class="line">fast-cgi 监听 127.0.0.1:9000 地址</div><div class="line">        |</div><div class="line">        |</div><div class="line">www.test.com/index.php 请求到达 127.0.0.1:9000</div><div class="line">        |</div><div class="line">        |</div><div class="line">     等待处理...</div></pre></td></tr></table></figure><h3 id="Nginx-与-php-fpm-的结合"><a href="#Nginx-与-php-fpm-的结合" class="headerlink" title="Nginx 与 php-fpm 的结合"></a>Nginx 与 php-fpm 的结合</h3><p>在 Linux 上，nginx 与 php-fpm 的通信有 tcp socket 和 unix socket 两种方式。</p><p>tcp socket 的优点是可以跨服务器，当 nginx 和 php-fpm 不在同一台机器上时，只能使用这种方式。</p><p>Unix socket 又叫 IPC(inter-process communication 进程间通信) socket，用于实现同一主机上的进程间通信，这种方式需要在 nginx配置文件中填写 php-fpm 的 socket 文件位置。</p><p>两种方式的数据传输过程如下图所示：<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20190128194727.png" alt=""></p><p>二者的不同：</p><p>由于 Unix socket 不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。所以其效率比 tcp socket 的方式要高，可减少不必要的 tcp 开销。不过，unix socket 高并发时不稳定，连接数爆发时，会产生大量的长时缓存，在没有面向连接协议的支撑下，大数据包可能会直接出错不返回异常。而 tcp 这样的面向连接的协议，可以更好的保证通信的正确性和完整性。</p><p>Nginx 与 php-fpm 结合只需要在各自的配置文件中做设置即可：</p><p>1） Nginx 中的配置</p><p>以 tcp socket通信为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80; #监听 80 端口，接收http请求</div><div class="line">    server_name  www.test.com; #就是网站地址</div><div class="line">    root /usr/local/etc/nginx/www/huxintong_admin; # 准备存放代码工程的路径</div><div class="line">    #路由到网站根目录 www.test.com 时候的处理</div><div class="line">    location / &#123;</div><div class="line">        index index.php; #跳转到 www.test.com/index.php</div><div class="line">        autoindex on;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    #当请求网站下 php 文件的时候，反向代理到 php-fpm</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include /usr/local/etc/nginx/fastcgi.conf; #加载 nginx 的 fastcgi 模块</div><div class="line">        fastcgi_intercept_errors on;</div><div class="line">        fastcgi_pass   127.0.0.1:9000; # tcp 方式，php-fpm 监听的 IP 地址和端口</div><div class="line">       # fasrcgi_pass /usr/run/php-fpm.sock # unix socket 连接方式</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2) php-fpm 的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">listen = 127.0.0.1:9000</div><div class="line"># 或者下面这样</div><div class="line">listen = /var/run/php-fpm.sock</div></pre></td></tr></table></figure><blockquote><p>注意，在使用 unix socket 方式连接时，由于 socket 文件本质上是一个文件，存在权限控制的问题，所以需要注意 nginx 进程的权限与 php-fpm 的权限问题，不然会提示无权限访问。（在各自的配置文件里设置用户）</p></blockquote><p>通过以上配置即可完成 php-fpm 与 nginx 的通信。</p><h3 id="在应用中的选择"><a href="#在应用中的选择" class="headerlink" title="在应用中的选择"></a>在应用中的选择</h3><p>如果是在同一台服务器上运行的 nginx 和 php-fpm，且并发量不高（不超过1000），选择unix socket，以提高 nginx 和 php-fpm 的通信效率。<br>如果是面临高并发业务，则考虑选择使用更可靠的 tcp socket，以负载均衡、内核优化等运维手段维持效率。</p><p>若并发较高但仍想用 unix socket 时，可通过以下方式提高 unix socket 的稳定性。</p><p>1）将sock文件放在 /dev/shm 目录下，此目录下将 sock 文件放在内存里面，内存的读写更快。</p><p>2）提高 backlog</p><p>backlog 默认位 128，1024 这个值最好换算成自己正常的 QPS，配置如下。</p><p>nginx.conf 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 80 default backlog = 1024;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>php-fpm.conf 文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen.backlog = 1024</div></pre></td></tr></table></figure><p>3）增加 sock 文件和 php-fpm 实例</p><p>在 /dev/shm 新建一个 sock 文件，在 nginx 中通过 upstream 模块将请求负载均衡到两个 sock 文件，并且将两个 sock 文件分别对应到两套 php-fpm 实例上。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP-FPM-介绍&quot;&gt;&lt;a href=&quot;#PHP-FPM-介绍&quot; class=&quot;headerlink&quot; title=&quot;PHP-FPM 介绍&quot;&gt;&lt;/a&gt;PHP-FPM 介绍&lt;/h2&gt;&lt;h3 id=&quot;CGI-协议与-FastCGI-协议&quot;&gt;&lt;a href=&quot;#CGI-协议与-FastCGI-协议&quot; class=&quot;headerlink&quot; title=&quot;CGI 协议与 FastCGI 协议&quot;&gt;&lt;/a&gt;CGI 协议与 FastCGI 协议&lt;/h3&gt;&lt;p&gt;每种动态语言（ PHP,Python 等）的代码文件需要通过对应的解析器才能被服务器识别，而 CGI 协议就是用来使解释器与服务器可以互相通信。PHP 文件在服务器上的解析需要用到 PHP 解释器，再加上对应的 CGI 协议，从而使服务器可以解析到 PHP 文件。&lt;/p&gt;
&lt;p&gt;由于 CGI 的机制是每处理一个请求需要 fork 一个 CGI 进程，请求结束再kill掉这个进程，在实际应用上比较浪费资源，于是就出现了CGI 的改良版本 FastCGI，FastCGI 在请求处理完后，不会 kill 掉进程，而是继续处理多个请求，这样就大大提高了效率。&lt;/p&gt;
&lt;h3 id=&quot;PHP-FPM-是什么&quot;&gt;&lt;a href=&quot;#PHP-FPM-是什么&quot; class=&quot;headerlink&quot; title=&quot;PHP-FPM 是什么&quot;&gt;&lt;/a&gt;PHP-FPM 是什么&lt;/h3&gt;&lt;p&gt;PHP-FPM 即 PHP-FastCGI Process Manager， 它是 FastCGI 的实现，并提供了进程管理的功能。进程包含 master 进程和 worker 进程两种；master 进程只有一个，负责监听端口，接收来自服务器的请求，而 worker 进程则一般有多个（具体数量根据实际需要进行配置），每个进程内部都会嵌入一个 PHP 解释器，是代码真正执行的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="Nginx" scheme="http://www.tenpercent.top/tags/Nginx/"/>
    
      <category term="PHP-FPM" scheme="http://www.tenpercent.top/tags/PHP-FPM/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能监控工具</title>
    <link href="http://www.tenpercent.top/2018/07/10/Linux-performance-monitor/"/>
    <id>http://www.tenpercent.top/2018/07/10/Linux-performance-monitor/</id>
    <published>2018-07-09T16:00:00.000Z</published>
    <updated>2019-03-06T06:46:54.671Z</updated>
    
    <content type="html"><![CDATA[<p>最近了解了下 Linux 性能相关的东西，主要是如何查看服务器性能的一些工具，在这里做个记录，以后遇到相关使用场景的时候，方便查看。</p><h3 id="Linux-性能指标"><a href="#Linux-性能指标" class="headerlink" title="Linux 性能指标"></a>Linux 性能指标</h3><ul><li>CPU</li></ul><p>CPU利用率、用户时间（表示CPU在用户进程上的时间百分比）、系统时间（表示CPU花在内核操作上的时间百分比）、空闲时间、平均负载、阻塞、上下文切换、中断等</p><ul><li>内存</li></ul><p>空闲内存、Swap利用率、缓冲和缓存、活动和非活动内存等</p><ul><li>磁盘IO</li></ul><p>IO等待、平均队列长度、每秒传输（TPS）等</p><ul><li>网络</li></ul><p>接收和发送的包、每秒碰撞（各个网络接口所连接网络的所发生的冲突数量）、丢包、错误等</p><a id="more"></a><h3 id="监测工具"><a href="#监测工具" class="headerlink" title="监测工具"></a>监测工具</h3><p>以下是对 Linux 的性能进行监控的常用工具：</p><table><thead><tr><th style="text-align:center">工具</th><th>简介</th></tr></thead><tbody><tr><td style="text-align:center">top</td><td>查看进程活动状态以及一些系统状况</td></tr><tr><td style="text-align:center">vmstat</td><td>查看系统状态、硬件和系统信息等</td></tr><tr><td style="text-align:center">iostat</td><td>查看 CPU 负载、硬盘状况</td></tr><tr><td style="text-align:center">sar</td><td>综合工具，查看系统状况</td></tr><tr><td style="text-align:center">mpstat</td><td>查看多处理器状况</td></tr><tr><td style="text-align:center">netstat</td><td>查看网络状况</td></tr><tr><td style="text-align:center">iptraf</td><td>实时网络状态监测</td></tr><tr><td style="text-align:center">tcpdump</td><td>抓取网络数据包，详细分析</td></tr><tr><td style="text-align:center">tcptrace</td><td>网络包分析工具</td></tr><tr><td style="text-align:center">netperf</td><td>网络带宽工具</td></tr><tr><td style="text-align:center">dstat</td><td>综合了 vmstat、iostat、ifstat、netstat 等多个信息</td></tr></tbody></table><p>这里介绍其中几个。</p><h3 id="top-工具"><a href="#top-工具" class="headerlink" title="top 工具"></a>top 工具</h3><p>top是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180725153253005740341.png" alt="20180725153253005740341.png"> </p><p>PID：进程的ID </p><p>USER：进程所有者 </p><p>PR：进程的优先级别，越小越优先被执行 </p><p>NI：nice值 </p><p>VIRT：进程占用的虚拟内存 </p><p>RES：进程占用的物理内存 </p><p>SHR：进程使用的共享内存 </p><p>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数 </p><p>%CPU：进程占用CPU的使用率 </p><p>%MEM：进程使用的物理内存和总内存的百分比 </p><p>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。 </p><p>COMMAND：进程启动命令名称</p><h3 id="vmstat-工具"><a href="#vmstat-工具" class="headerlink" title="vmstat 工具"></a>vmstat 工具</h3><p>vmstat 是个查看系统整体性能的小工具，小巧，即使在机器负载很高的情况下也运行良好，并且可以用时间间隔采集得到连续的性能数据。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/2018072515325286132815.png" alt="2018072515325286132815.png"></p><p>参数介绍：</p><ul><li>r，可运行队列的线程数，这些线程都是可运行状态，只不过 CPU 暂时不可用</li><li>b，被 blocked 的进程数，正在等待 IO 请求</li><li>in，被处理过的中断数</li><li>cs，系统上正在做上下文切换的数目</li><li>us，用户占用 CPU 的百分比</li><li>sys，内核和中断占用 CPU 的百分比</li><li>wa，所有可运行的线程被 blocked 以后都在等待 IO，这时候 CPU 空闲的百分比</li><li>id，CPU 完全空闲的百分比</li></ul><p>举两个例子来分析一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vmstat 1</div><div class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</div><div class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line"> 4  0    140 2915476 341288 3951700  0    0     0     0 1057  523 89 21  0  0  0</div><div class="line"> 4  0    140 2915724 341296 3951700  0    0     0     0 1048  546 79 11  0  0  0</div><div class="line"> 4  0    140 2915848 341296 3951700  0    0     0     0 1044  514 88 22  0  0  0</div><div class="line"> 4  0    140 2915848 341296 3951700  0    0     0    24 1044  564 80 20  0  0  0</div><div class="line"> 4  0    140 2915848 341296 3951700  0    0     0     0 1060  546 78 12  0  0  0</div></pre></td></tr></table></figure><p>从上面的数据可以看出几点：</p><ol><li>interrupts(in) 非常高，context switch(cs) 比较低，说明这个 CPU 一直在不停的请求资源</li><li>user time(us) 一直保持在 80% 以上，而且上下文切换较低 (cs)，说明某个进程可能一直霸占着 CPU</li></ol><ul><li>run queue(r) 刚好在 4 个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vmstat 1</div><div class="line">procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------</div><div class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line">14  0    140 2904316 341912 3952308  0    0     0   460 1106 9593 36 64  1  0  0</div><div class="line">17  0    140 2903492 341912 3951780  0    0     0     0 1037 9614 35 65  1  0  0</div><div class="line">20  0    140 2902016 341912 3952000  0    0     0     0 1046 9739 35 64  1  0  0</div><div class="line">17  0    140 2903904 341912 3951888  0    0     0    76 1044 9879 37 63  0  0  0</div><div class="line">16  0    140 2904580 341912 3952108  0    0     0     0 1055 9808 34 65  1  0  0</div></pre></td></tr></table></figure><p>从上面的数据可以看出几点：</p><ol><li>context switch(cs) 比 interrupts(in) 要高的多，说明内核不得不来回切换进程</li><li>进一步观察发现 system time(sy) 很高而 user time(us) 很低，而且加上高频度的上下文切换 (cs)，说明正在运行的应用程序调用了大量的系统调用</li><li>run queue(r) 在 14 个线程以上，而这个机器的硬件配置 (4 核），应该保持在 12 以内。</li></ol><h3 id="iostat-工具"><a href="#iostat-工具" class="headerlink" title="iostat 工具"></a>iostat 工具</h3><p>iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180725153253123443993.png" alt="20180725153253123443993.png"></p><p>cpu属性值说明：</p><p>%user：CPU处在用户模式下的时间百分比。</p><p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p><p>%system：CPU处在系统模式下的时间百分比。</p><p>%iowait：CPU等待输入输出完成时间的百分比。</p><p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p><p>%idle：CPU空闲时间百分比。</p><p><strong>如果%iowait的值过高，表示硬盘存在I/O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。</strong></p><p>disk属性值说明：</p><p>rrqm/s:  每秒进行 merge 的读操作数目。即 rmerge/s</p><p>wrqm/s:  每秒进行 merge 的写操作数目。即 wmerge/s</p><p>r/s:  每秒完成的读 I/O 设备次数。即 rio/s</p><p>w/s:  每秒完成的写 I/O 设备次数。即 wio/s</p><p>rsec/s:  每秒读扇区数。即 rsect/s</p><p>wsec/s:  每秒写扇区数。即 wsect/s</p><p>rkB/s:  每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。</p><p>wkB/s:  每秒写K字节数。是 wsect/s 的一半。</p><p>avgrq-sz:  平均每次设备I/O操作的数据大小 (扇区)。</p><p>avgqu-sz:  平均I/O队列长度。</p><p>await:  平均每次设备I/O操作的等待时间 (毫秒)。</p><p>svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</p><p>%util:  一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</p><p><strong>如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</strong></p><p><strong>如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；</strong></p><p><strong>如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。</strong></p><p><strong>如果avgqu-sz比较大，也表示有大量io在等待。</strong></p><ul><li>sar 工具</li></ul><p>sar是System Activity Reporter（系统活动情况报告）的缩写。sar工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。</p><ul><li>查看 cpu使用率</li></ul><p><strong>sar -u</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257950431065.png" alt="20180726153257950431065.png"></p><p>%user 用户模式下消耗的CPU时间的比例；</p><p>%nice 通过nice改变了进程调度优先级的进程，在用户模式下消耗的CPU时间的比例</p><p>%system 系统模式下消耗的CPU时间的比例；</p><p>%iowait CPU等待磁盘I/O导致空闲状态消耗的时间比例；</p><p>%steal 利用Xen等操作系统虚拟化技术，等待其它虚拟CPU计算占用的时间比例；</p><p>%idle CPU空闲时间比例；</p><p><strong>查看平均负载</strong></p><p><strong>sar -q</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257961321989.png" alt="20180726153257961321989.png"></p><p>runq-sz：运行队列的长度（等待运行的进程数）</p><p>plist-sz：进程列表中进程（processes）和线程（threads）的数量</p><p>ldavg-1：最后1分钟的系统平均负载</p><p>ldavg-5：过去5分钟的系统平均负载</p><p>ldavg-15：过去15分钟的系统平均负载</p><p><strong>查看内存使用状况</strong></p><p><strong>sar -r</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20180726153257975922020.png" alt="20180726153257975922020.png"></p><p>kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.</p><p>kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.</p><p>%memused：物理内存使用率，这个值是kbmemused和内存总量(不包括swap)的一个百分比.</p><p>kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.</p><p>kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).</p><p>%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.</p><p><strong>sar参数说明</strong></p><p>-A 汇总所有的报告</p><p>-a 报告文件读写使用情况</p><p>-B 报告附加的缓存的使用情况</p><p>-b 报告缓存的使用情况</p><p>-c 报告系统调用的使用情况</p><p>-d 报告磁盘的使用情况</p><p>-g 报告串口的使用情况</p><p>-h 报告关于buffer使用的统计数据</p><p>-m 报告IPC消息队列和信号量的使用情况</p><p>-n 报告命名cache的使用情况</p><p>-p 报告调页活动的使用情况</p><p>-q 报告运行队列和交换队列的平均长度</p><p>-R 报告进程的活动情况</p><p>-r 报告没有使用的内存页面和硬盘块</p><p>-u 报告CPU的利用率</p><p>-v 报告进程、i节点、文件和锁表状态</p><p>-w 报告系统交换活动状况</p><p>-y 报告TTY设备活动状况</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近了解了下 Linux 性能相关的东西，主要是如何查看服务器性能的一些工具，在这里做个记录，以后遇到相关使用场景的时候，方便查看。&lt;/p&gt;
&lt;h3 id=&quot;Linux-性能指标&quot;&gt;&lt;a href=&quot;#Linux-性能指标&quot; class=&quot;headerlink&quot; title=&quot;Linux 性能指标&quot;&gt;&lt;/a&gt;Linux 性能指标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU利用率、用户时间（表示CPU在用户进程上的时间百分比）、系统时间（表示CPU花在内核操作上的时间百分比）、空闲时间、平均负载、阻塞、上下文切换、中断等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;空闲内存、Swap利用率、缓冲和缓存、活动和非活动内存等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘IO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IO等待、平均队列长度、每秒传输（TPS）等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接收和发送的包、每秒碰撞（各个网络接口所连接网络的所发生的冲突数量）、丢包、错误等&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.tenpercent.top/tags/Linux/"/>
    
      <category term="工具" scheme="http://www.tenpercent.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>深入解析 composer 的自动加载原理</title>
    <link href="http://www.tenpercent.top/2018/05/17/composer-autoload/"/>
    <id>http://www.tenpercent.top/2018/05/17/composer-autoload/</id>
    <published>2018-05-16T16:00:00.000Z</published>
    <updated>2018-05-18T06:49:15.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>PHP 自5.3的版本之后，已经重焕新生，命名空间、性状（trait）、闭包、接口、PSR 规范、以及 composer 的出现已经让 PHP 变成了一门现代化的脚本语言。PHP 的生态系统也一直在演进，而 composer 的出现更是彻底的改变了以往构建 PHP 应用的方式，我们可以根据 PHP 的应用需求混合搭配最合适的 PHP 组件。当然这也得益于 PSR 规范的提出。</p><h2 id="掌握-composer-自动加载原理的好处"><a href="#掌握-composer-自动加载原理的好处" class="headerlink" title="掌握 composer 自动加载原理的好处"></a>掌握 composer 自动加载原理的好处</h2><ul><li><p>更好的运用 composer 来构建我们的 PHP 应用程序</p></li><li><p>对 PSR 规范有进一步的了解</p></li><li><p>当需要用到没有 composer 化的第三方库时，可以将其 composer 化来提高工程效率</p></li><li><p>学习比较严谨、高深的编码技巧</p></li></ul><a id="more"></a><hr><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><ul><li>PHP 自动加载功能</li><li>PSR 规范</li><li>comoposer 的自动加载过程</li><li>composer 源码分析</li></ul><hr><h1 id="一、PHP-自动加载功能"><a href="#一、PHP-自动加载功能" class="headerlink" title="一、PHP 自动加载功能"></a>一、PHP 自动加载功能</h1><h2 id="PHP-自动加载功能的由来"><a href="#PHP-自动加载功能的由来" class="headerlink" title="PHP 自动加载功能的由来"></a>PHP 自动加载功能的由来</h2><p>在 PHP 开发过程中，如果希望从外部引入一个 Class ，通常会使用 <code>include</code> 和 <code>require</code> 方法，去把定义这个 Class 的文件包含进来。这个在小规模开发的时候，没什么大问题。但在大型的开发项目中，使用这种方式会带来一些隐含的问题：如果一个 PHP 文件需要使用很多其它类，那么就需要很多的 <code>require/include</code> 语句，这样有可能会 <strong>造成遗漏</strong> 或者 <strong>包含进不必要的类文件</strong>。如果大量的文件都需要使用其它的类，那么要保证每个文件都包含正确的类文件肯定是一个噩梦， 况且 require或 incloud 的性能代价很大。</p><p>PHP5 为这个问题提供了一个解决方案，这就是 <code>类的自动加载(autoload)机制</code>。<code>autoload机制</code> 可以使得 PHP 程序有可能在使用类时才自动包含类文件，而不是一开始就将所有的类文件<code>include</code>进来，这种机制也称为 <code>Lazy loading (惰性加载)</code>。</p><ul><li><p>总结起来，自动加载功能带来了几处优点：</p><blockquote><ol><li>使用类之前无需 <code>include / require</code></li><li>使用类的时候才会 <code>include / require</code> 文件，实现了 <code>lazy loading</code> ，避免了 <code>include / require</code> 多余文件。</li><li>无需考虑引入 <strong>类的实际磁盘地址</strong> ，实现了逻辑和实体文件的分离。</li></ol></blockquote></li></ul><h2 id="PHP-自动加载函数-autoload"><a href="#PHP-自动加载函数-autoload" class="headerlink" title="PHP 自动加载函数 __autoload()"></a>PHP 自动加载函数 __autoload()</h2><ul><li><p>通常 PHP5 在使用一个类时，如果发现这个类没有加载，就会自动运行 __autoload() 函数，这个函数是我们在程序中自定义的，在这个函数中我们可以加载需要使用的类。下面是个简单的示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span><span class="params">($classname)</span> </span>&#123;</div><div class="line"><span class="keyword">require_once</span> ($classname . <span class="string">".class.php"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在我们这个简单的例子中，我们直接将类名加上扩展名 <code>.class.php</code> 构成了类文件名，然后使用 <code>require_once</code> 将其加载。</p><blockquote><p>从这个例子中，我们可以看出 __autoload 至少要做三件事情：</p><ol><li><p>根据类名确定类文件名；</p></li><li><p>确定类文件所在的磁盘路径；</p></li><li><p>将类从磁盘文件中加载到系统中。</p></li></ol></blockquote></li></ul><ul><li><p>第三步最简单，只需要使用 <code>include / require</code> 即可。要实现第一步，第二步的功能，必须在开发时约定类名与磁盘文件的映射方法，只有这样我们才能根据类名找到它对应的磁盘文件。</p></li><li><p>当有大量的类文件要包含的时候，我们只要确定相应的规则，然后在 <strong><code>__autoload()</code> 函数中，将类名与实际的磁盘文件对应起来，就可以实现 <code>lazy loading</code> 的效果</strong> 。</p></li><li>如果想详细的了解关于 autoload 自动加载的过程，可以查看手册资料：<a href="http://php.net/manual/zh/function.autoload.php" target="_blank" rel="external">PHP autoload函数说明</a></li></ul><h2 id="autoload-函数存在的问题"><a href="#autoload-函数存在的问题" class="headerlink" title="__autoload() 函数存在的问题"></a>__autoload() 函数存在的问题</h2><ul><li><p>如果在一个系统的实现中，如果需要使用很多其它的类库，这些类库可能是由不同的开发人员编写的，  其类名与实际的磁盘文件的映射规则不尽相同。这时如果要实现类库文件的自动加载，就必须 <strong>在 __autoload() 函数中将所有的映射规则全部实现</strong>，这样的话 <code>__autoload()</code> 函数有可能会非常复杂，甚至无法实现。最后可能会导致 <code>__autoload()</code> 函数十分臃肿，这时即便能够实现，也会给将来的维护和系统效率带来很大的负面影响。</p></li><li><p>那么问题出现在哪里呢？问题出现在 <strong>__autoload() 是全局函数只能定义一次</strong> ，不够灵活，所以所有的类名与文件名对应的逻辑规则都要在一个函数里面实现，造成这个函数的臃肿。那么如何来解决这个问题呢？答案就是使用一个 <strong>__autoload调用堆栈</strong> ，不同的映射关系写到不同的 <code>__autoload函数</code> 中去，然后统一注册统一管理，这个就是 PHP5 引入的 <code>SPL Autoload</code> 。</p></li></ul><h2 id="SPL-Autoload"><a href="#SPL-Autoload" class="headerlink" title="SPL Autoload"></a>SPL Autoload</h2><ul><li>SPL是 Standard PHP Library(标准PHP库)的缩写。它是 PHP5 引入的一个扩展标准库，包括 spl autoload 相关的函数以及各种数据结构和迭代器的接口或类。spl autoload 相关的函数具体可见 <a href="http://php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="external">php中spl_autoload</a></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="comment">// __autoload 函数</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// function __autoload($class) &#123;</span></div><div class="line"><span class="comment">//     include 'classes/' . $class . '.class.php';</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_autoloader</span><span class="params">($class)</span> </span>&#123;</div><div class="line">    <span class="keyword">include</span> <span class="string">'classes/'</span> . $class . <span class="string">'.class.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">spl_autoload_register(<span class="string">'my_autoloader'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 定义的 autoload 函数在 class 里</span></div><div class="line"></div><div class="line"><span class="comment">// 静态方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">spl_autoload_register(<span class="keyword">array</span>(<span class="string">'MyClass'</span>, <span class="string">'autoload'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 非静态方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($className)</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$instance = <span class="keyword">new</span> MyClass();</div><div class="line">spl_autoload_register(<span class="keyword">array</span>($instance, <span class="string">'autoload'</span>));</div></pre></td></tr></table></figure><p>spl_autoload_register() 就是我们上面所说的__autoload调用堆栈，我们可以向这个函数注册多个我们自己的 autoload() 函数，当 PHP 找不到类名时，PHP就会调用这个堆栈，然后去调用自定义的 autoload() 函数，实现自动加载功能。如果我们不向这个函数输入任何参数，那么就会默认注册 spl_autoload() 函数。</p><hr><h1 id="二、PSR-规范"><a href="#二、PSR-规范" class="headerlink" title="二、PSR 规范"></a>二、PSR 规范</h1><p>与自动加载相关的规范是 PSR4，在说 PSR4 之前先介绍一下PSR标准。PSR 标准的发明和推出组织是：PHP-FIG，它的网站是：<a href="www.php-fig.org">www.php-fig.org</a>。由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来，虽然不是 “官方” 组织，但也代表了社区中不小的一块。组织的目的在于：以最低程度的限制，来统一各个项目的编码规范，避免各家自行发展的风格阻碍了程序员开发的困扰，于是大伙发明和总结了 PSR，PSR是 PHP Standards Recommendation 的缩写，截止到目前为止，总共有 14 套 PSR 规范，其中有 7 套PSR规范已通过表决并推出使用，分别是：</p><blockquote><p>PSR-0 <strong>自动加载标准</strong>（已废弃，一些旧的第三方库还有在使用）</p><p>PSR-1 <strong>基础编码标准</strong></p><p>PSR-2 <strong>编码风格向导</strong></p><p>PSR-3 <strong>日志接口</strong></p><p>PSR-4 <strong>自动加载的增强版，替换掉了 PSR-0</strong></p><p>PSR-6 <strong>缓存接口规范</strong></p><p>PSR-7 <strong>HTTP 消息接口规范</strong></p></blockquote><p>具体详细的规范标准可以查看<a href="https://psr.phphub.org/" target="_blank" rel="external">PHP 标准规范</a></p><h2 id="PSR4-标准"><a href="#PSR4-标准" class="headerlink" title="PSR4 标准"></a>PSR4 标准</h2><p>2013 年底，PHP-FIG 推出了第 5 个规范——PSR-4。</p><p>PSR-4 规范了如何指定文件路径从而自动加载类定义，同时规范了自动加载文件的位置。 </p><h4 id="1）一个完整的类名需具有以下结构："><a href="#1）一个完整的类名需具有以下结构：" class="headerlink" title="1）一个完整的类名需具有以下结构："></a>1）一个完整的类名需具有以下结构：</h4><p><code>\&lt;命名空间&gt;\&lt;子命名空间&gt;\&lt;类名&gt;</code></p><ul><li><p>完整的类名<strong>必须</strong>要有一个顶级命名空间，被称为 “vendor namespace”；</p></li><li><p>完整的类名<strong>可以</strong>有一个或多个子命名空间；</p></li><li><p>完整的类名<strong>必须</strong>有一个最终的类名；</p></li><li><p>完整的类名中<strong>任意一部分</strong>中的下滑线都是没有特殊含义的；</p></li><li><p>完整的类名<strong>可以</strong>由任意大小写字母组成；</p></li><li><p>所有类名都<strong>必须</strong>是大小写敏感的。</p></li></ul><h4 id="2）根据完整的类名载入相应的文件"><a href="#2）根据完整的类名载入相应的文件" class="headerlink" title="2）根据完整的类名载入相应的文件"></a>2）根据完整的类名载入相应的文件</h4><ul><li><p>完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为「命名空间前缀」，其必须与至少一个「文件基目录」相对应；</p></li><li><p>紧接命名空间前缀后的子命名空间 必须 与相应的「文件基目录」相匹配，其中的命名空间分隔符将作为目录分隔符。</p></li><li><p>末尾的类名<strong>必须</strong>与对应的以 .php 为后缀的文件同名。</p></li><li><p>自动加载器（autoloader）的实现<strong>一定不可</strong>抛出异常、<strong>一定不可</strong>触发任一级别的错误信息以及<strong>不应该</strong>有返回值。</p></li></ul><h4 id="3-例子"><a href="#3-例子" class="headerlink" title="3) 例子"></a>3) 例子</h4><p>PSR-4风格</p><blockquote><p>类名：\Zend\Abc<br>命名空间前缀：Zend<br>文件基目录：/usr/includes/Zend/<br>文件路径：/usr/includes/Zend/Abc.php</p><p>类名：\Symfony\Core\Request<br>命名空间前缀：Symfony\Core<br>文件基目录：./vendor/Symfony/Core/<br>文件路径：./vendor/Symfony/Core/Request.php</p></blockquote><p>目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-vendor/</div><div class="line">| -vendor_name/</div><div class="line">| | -package_name/</div><div class="line">| | | -src/</div><div class="line">| | | | -ClassName.php       # Vendor_Name\Package_Name\ClassName</div><div class="line">| | | -tests/</div><div class="line">| | | | -ClassNameTest.php   # Vendor_Name\Package_Name\ClassNameTest</div></pre></td></tr></table></figure><h1 id="Composer自动加载过程"><a href="#Composer自动加载过程" class="headerlink" title="Composer自动加载过程"></a>Composer自动加载过程</h1><h4 id="Composer-做了哪些事情"><a href="#Composer-做了哪些事情" class="headerlink" title="Composer 做了哪些事情"></a>Composer 做了哪些事情</h4><ul><li>你有一个项目依赖于若干个库。</li><li>其中一些库依赖于其他库。</li><li>你声明你所依赖的东西。</li><li>Composer 会找出哪个版本的包需要安装，并安装它们（将它们下载到你的项目中）。</li></ul><p>例如，你正在创建一个项目，需要做一些单元测试。你决定使用 <code>phpunit</code> 。为了将它添加到你的项目中，你所需要做的就是在 <code>composer.json</code> 文件里描述项目的依赖关系。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"require"</span>: &#123;</div><div class="line">    <span class="string">"phpunit/phpunit"</span>:<span class="string">"~6.0"</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在 <code>composer require</code> 之后我们只要在项目里面直接 <code>use</code> phpunit 的类即可使用。</p><h4 id="执行-composer-require-时发生了什么"><a href="#执行-composer-require-时发生了什么" class="headerlink" title="执行 composer require 时发生了什么"></a>执行 composer require 时发生了什么</h4><ul><li>composer 会找到符合 PR4 规范的第三方库的源</li><li>将其加载到 vendor 目录下</li><li>初始化顶级域名的映射并写入到指定的文件里<br>（如：<code>&#39;PHPUnit\\Framework\\Assert&#39; =&gt; __DIR__ . &#39;/..&#39; . &#39;/phpunit/phpunit/src/Framework/Assert.php&#39;</code>）</li><li>写好一个 autoload 函数，并且注册到 spl_autoload_register()里</li></ul><p><em>题外话：现在很多框架都已经帮我们写好了顶级域名映射了，我们只需要在框架里面新建文件，在新建的文件中写好命名空间，就可以在任何地方 use 我们的命名空间了。</em></p><hr><h1 id="Composer-源码分析"><a href="#Composer-源码分析" class="headerlink" title="Composer 源码分析"></a>Composer 源码分析</h1><p>下面我们通过对源码的分析来看看 composer 是如何实现 <code>PSR4标准</code> 的自动加载功能。</p><p>很多框架在初始化的时候都会引入 composer 来协助自动加载的，以 Laravel 为例，它入口文件 index.php 第一句就是利用 composer 来实现自动加载功能。</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  define(<span class="string">'LARAVEL_START'</span>, microtime(<span class="keyword">true</span>));</div><div class="line"></div><div class="line">  <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>;</div></pre></td></tr></table></figure><p>去 vendor 目录下的 <code>autoload.php</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/composer'</span> . <span class="string">'/autoload_real.php'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29::getLoader();</div></pre></td></tr></table></figure><p>这里就是 Composer 真正开始的地方了</p><h2 id="Composer自动加载文件"><a href="#Composer自动加载文件" class="headerlink" title="Composer自动加载文件"></a>Composer自动加载文件</h2><p>首先，我们先大致了解一下Composer自动加载所用到的源文件。</p><blockquote><ol><li>autoload_real.php: 自动加载功能的引导类。<ul><li>composer 加载类的初始化<code>(顶级命名空间与文件路径映射初始化)</code>和注册(spl_autoload_register())。</li></ul></li><li>ClassLoader.php : composer 加载类。<ul><li>composer 自动加载功能的核心类。</li></ul></li><li>autoload_static.php : 顶级命名空间初始化类，<ul><li>用于给核心类初始化顶级命名空间。</li></ul></li><li>autoload_classmap.php : 自动加载的最简单形式，<ul><li>有完整的命名空间和文件目录的映射；</li></ul></li><li>autoload_files.php : 用于加载全局函数的文件，<ul><li>存放各个全局函数所在的文件路径名；</li></ul></li><li>autoload_namespaces.php : 符合 PSR0 标准的自动加载文件，<ul><li>存放着顶级命名空间与文件的映射；</li></ul></li><li>autoload_psr4.php : 符合 PSR4 标准的自动加载文件，<ul><li>存放着顶级命名空间与文件的映射；</li></ul></li></ol></blockquote><h2 id="autoload-real-引导类"><a href="#autoload-real-引导类" class="headerlink" title="autoload_real 引导类"></a>autoload_real 引导类</h2><hr><p>在 vendor 目录下的 <code>autoload.php</code> 文件中我们可以看出，程序主要调用了引导类的静态方法 <code>getLoader()</code> ，我们接着看看这个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  spl_autoload_register(</div><div class="line">        <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span></div><div class="line">      );</div><div class="line"></div><div class="line">  <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</div><div class="line"></div><div class="line">  spl_autoload_unregister(</div><div class="line">        <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>)</div><div class="line">      );</div><div class="line"></div><div class="line">  $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">'HHVM_VERSION'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">      <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</div><div class="line"></div><div class="line">      call_user_func(</div><div class="line">          \Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::getInitializer($loader)</div><div class="line">          );</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</div><div class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">          $loader-&gt;set($namespace, $path);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</div><div class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">          $loader-&gt;setPsr4($namespace, $path);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</div><div class="line">      <span class="keyword">if</span> ($classMap) &#123;</div><div class="line">          $loader-&gt;addClassMap($classMap);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/***********************注册自动加载核心类对象********************/</span></div><div class="line">  $loader-&gt;register(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">  <span class="comment">/***********************自动加载全局函数********************/</span></div><div class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">      $includeFiles = Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class="line">      composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> $loader;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我把自动加载引导类分为 5 个部分。</p><h3 id="第一部分——单例"><a href="#第一部分——单例" class="headerlink" title="第一部分——单例"></a>第一部分——单例</h3><p>第一部分很简单，就是个最经典的单例模式，自动加载类只能有一个。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3 id="第二部分——构造ClassLoader核心类"><a href="#第二部分——构造ClassLoader核心类" class="headerlink" title="第二部分——构造ClassLoader核心类"></a>第二部分——构造ClassLoader核心类</h3><p>第二部分 new 一个自动加载的核心类对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">/***********************获得自动加载核心类对象********************/</span></div><div class="line">  spl_autoload_register(</div><div class="line">    <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span></div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</div><div class="line"></div><div class="line">  spl_autoload_unregister(</div><div class="line">    <span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29'</span>, <span class="string">'loadClassLoader'</span>)</div><div class="line">  );</div></pre></td></tr></table></figure><p><code>loadClassLoader()</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClassLoader</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'Composer\Autoload\ClassLoader'</span> === $class) &#123;</div><div class="line">        <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/ClassLoader.php'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从程序里面我们可以看出，composer 先向 PHP 自动加载机制注册了一个函数，这个函数 require 了 ClassLoader 文件。成功 new 出该文件中核心类 ClassLoader() 后，又销毁了该函数。</p><h3 id="第三部分-——-初始化核心类对象"><a href="#第三部分-——-初始化核心类对象" class="headerlink" title="第三部分 —— 初始化核心类对象"></a>第三部分 —— 初始化核心类对象</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="comment">/***********************初始化自动加载核心类对象********************/</span></div><div class="line">  $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; !defined(<span class="string">'HHVM_VERSION'</span>);</div><div class="line">  <span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">     <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</div><div class="line"></div><div class="line">     call_user_func(</div><div class="line">       \Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::getInitializer($loader)</div><div class="line">     );</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</div><div class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">         $loader-&gt;set($namespace, $path);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</div><div class="line">      <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">         $loader-&gt;setPsr4($namespace, $path);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</div><div class="line">      <span class="keyword">if</span> ($classMap) &#123;</div><div class="line">          $loader-&gt;addClassMap($classMap);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p> 这一部分就是对自动加载类的初始化，主要是给自动加载核心类初始化顶级命名空间映射。</p><p>   初始化的方法有两种：</p><pre><code>1. 使用 autoload_static 进行静态初始化；2. 调用核心类接口初始化。</code></pre><h3 id="autoload-static-静态初始化-PHP-gt-5-6"><a href="#autoload-static-静态初始化-PHP-gt-5-6" class="headerlink" title="autoload_static 静态初始化 ( PHP &gt;= 5.6 )"></a>autoload_static 静态初始化 ( PHP &gt;= 5.6 )</h3><p>静态初始化只支持 PHP5.6 以上版本并且不支持 HHVM 虚拟机。我们深入 <code>autoload_static.php</code> 这个文件发现这个文件定义了一个用于静态初始化的类，名字叫 <code>ComposerStaticInit7b790917ce8899df9af8ed53631a1c29</code>，仍然为了避免冲突而加了 hash 值。这个类很简单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ComposerStaticInit7b790917ce8899df9af8ed53631a1c29</span></span>&#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $files = <span class="keyword">array</span>(...);</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixLengthsPsr4 = <span class="keyword">array</span>(...);</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixDirsPsr4 = <span class="keyword">array</span>(...);</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $prefixesPsr0 = <span class="keyword">array</span>(...);</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (...);</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInitializer</span><span class="params">(ClassLoader $loader)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> \Closure::bind(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($loader)</span> </span>&#123;</div><div class="line">          $loader-&gt;prefixLengthsPsr4</div><div class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixLengthsPsr4;</div><div class="line"></div><div class="line">          $loader-&gt;prefixDirsPsr4</div><div class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixDirsPsr4;</div><div class="line"></div><div class="line">          $loader-&gt;prefixesPsr0</div><div class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$prefixesPsr0;</div><div class="line"></div><div class="line">          $loader-&gt;classMap</div><div class="line">  = ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$classMap;</div><div class="line"></div><div class="line">      &#125;, <span class="keyword">null</span>, ClassLoader::class);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>这个静态初始化类的核心就是 <code>getInitializer()</code> 函数，它将自己类中的顶级命名空间映射给了 ClassLoader 类。值得注意的是这个函数返回的是一个匿名函数，为什么呢？原因就是 <code>ClassLoader类</code> 中的 <code>prefixLengthsPsr4</code> 、<code>prefixDirsPsr4</code>等等变量都是 private的。利用匿名函数的绑定功能就可以将这些 private 变量赋给 ClassLoader 类 里的成员变量。</p><p>关于匿名函数的<a href="http://php.net/manual/zh/closure.bind.php" target="_blank" rel="external">绑定功能</a>。</p><p>接下来就是命名空间初始化的关键了。</p><h4 id="classMap（命名空间映射）"><a href="#classMap（命名空间映射）" class="headerlink" title="classMap（命名空间映射）"></a>classMap（命名空间映射）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (</div><div class="line">  <span class="string">'App\\Console\\Kernel'</span></div><div class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Console/Kernel.php'</span>,</div><div class="line"></div><div class="line">  <span class="string">'App\\Exceptions\\Handler'</span></div><div class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Exceptions/Handler.php'</span>,</div><div class="line"></div><div class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\ForgotPasswordController'</span></div><div class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/ForgotPasswordController.php'</span>,</div><div class="line"></div><div class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\LoginController'</span></div><div class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/LoginController.php'</span>,</div><div class="line"></div><div class="line">  <span class="string">'App\\Http\\Controllers\\Auth\\RegisterController'</span></div><div class="line">  =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Http/Controllers/Auth/RegisterController.php'</span>,</div><div class="line">  ...)</div></pre></td></tr></table></figure><p>直接命名空间全名与目录的映射，简单粗暴，也导致这个数组相当的大。</p><h4 id="PSR4-标准顶级命名空间映射数组："><a href="#PSR4-标准顶级命名空间映射数组：" class="headerlink" title="PSR4 标准顶级命名空间映射数组："></a>PSR4 标准顶级命名空间映射数组：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $prefixLengthsPsr4 = <span class="keyword">array</span>(</div><div class="line">  <span class="string">'p'</span> =&gt; <span class="keyword">array</span> (</div><div class="line"><span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; <span class="number">25</span>,</div><div class="line">),</div><div class="line">  <span class="string">'S'</span> =&gt; <span class="keyword">array</span> (</div><div class="line"><span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="number">26</span>,</div><div class="line"><span class="string">'Symfony\\Component\\Yaml\\'</span> =&gt; <span class="number">23</span>,</div><div class="line"><span class="string">'Symfony\\Component\\VarDumper\\'</span> =&gt; <span class="number">28</span>,</div><div class="line">...</div><div class="line">),</div><div class="line">  ...);</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> $prefixDirsPsr4 = <span class="keyword">array</span> (</div><div class="line">  <span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; <span class="keyword">array</span> (</div><div class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-common/src'</span>,</div><div class="line"><span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/type-resolver/src'</span>,</div><div class="line"><span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-docblock/src'</span>,</div><div class="line">),</div><div class="line">   <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="keyword">array</span> (</div><div class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring'</span>,</div><div class="line">),</div><div class="line">  <span class="string">'Symfony\\Component\\Yaml\\'</span> =&gt; <span class="keyword">array</span> (</div><div class="line"><span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/yaml'</span>,</div><div class="line">),</div><div class="line">  ...)</div></pre></td></tr></table></figure><p>PSR4 标准顶级命名空间映射用了两个数组，第一个是用命名空间第一个字母作为前缀索引，然后是 顶级命名空间，但是最终并不是文件路径，而是 顶级命名空间的长度。为什么呢？</p><p>因为 PSR4 标准是用顶级命名空间目录替换顶级命名空间，所以获得顶级命名空间的长度很重要。</p><p>具体说明这些数组的作用：</p><p>假如我们找 <code>Symfony\Polyfill\Mbstring\example</code> 这个命名空间，通过前缀索引和字符串匹配我们得到了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="number">26</span>,</div></pre></td></tr></table></figure><p>这条记录，键是顶级命名空间，值是命名空间的长度。拿到顶级命名空间后去 <code>$prefixDirsPsr4数组</code> 获取它的映射目录数组：<strong>(注意映射目录可能不止一条)</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span> =&gt; <span class="keyword">array</span> (</div><div class="line">          <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring'</span>,</div><div class="line">      )</div></pre></td></tr></table></figure><p>然后我们就可以将命名空间 <code>Symfony\\Polyfill\\Mbstring\\example</code> 前26个字符替换成目录 <code>__DIR__ . &#39;/..&#39; . &#39;/symfony/polyfill-mbstring</code> ，我们就得到了<code>__DIR__ . &#39;/..&#39; . &#39;/symfony/polyfill-mbstring/example.php</code>，先验证磁盘上这个文件是否存在，如果不存在接着遍历。如果遍历后没有找到，则加载失败。</p><h3 id="ClassLoader-接口初始化（-PHP-lt-5-6-）"><a href="#ClassLoader-接口初始化（-PHP-lt-5-6-）" class="headerlink" title="ClassLoader 接口初始化（ PHP &lt; 5.6 ）"></a>ClassLoader 接口初始化（ PHP &lt; 5.6 ）</h3><hr><p>如果PHP版本低于 5.6 或者使用 HHVM 虚拟机环境，那么就要使用核心类的接口进行初始化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// PSR0 标准</span></div><div class="line">$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</div><div class="line"><span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">   $loader-&gt;set($namespace, $path);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PSR4 标准</span></div><div class="line">$map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</div><div class="line"><span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">   $loader-&gt;setPsr4($namespace, $path);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</div><div class="line"><span class="keyword">if</span> ($classMap) &#123;</div><div class="line">   $loader-&gt;addClassMap($classMap);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="PSR4-标准的映射"><a href="#PSR4-标准的映射" class="headerlink" title="PSR4 标准的映射"></a>PSR4 标准的映射</h4><p>autoload_psr4.php 的顶级命名空间映射</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">    <span class="string">'XdgBaseDir\\'</span></div><div class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/dnoegel/php-xdg-base-dir/src'</span>),</div><div class="line"></div><div class="line">    <span class="string">'Webmozart\\Assert\\'</span></div><div class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/webmozart/assert/src'</span>),</div><div class="line"></div><div class="line">    <span class="string">'TijsVerkoyen\\CssToInlineStyles\\'</span></div><div class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/tijsverkoyen/css-to-inline-styles/src'</span>),</div><div class="line"></div><div class="line">    <span class="string">'Tests\\'</span></div><div class="line">=&gt; <span class="keyword">array</span>($baseDir . <span class="string">'/tests'</span>),</div><div class="line"></div><div class="line">    <span class="string">'Symfony\\Polyfill\\Mbstring\\'</span></div><div class="line">=&gt; <span class="keyword">array</span>($vendorDir . <span class="string">'/symfony/polyfill-mbstring'</span>),</div><div class="line">    ...</div><div class="line">    )</div></pre></td></tr></table></figure><p>PSR4 标准的初始化接口:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPsr4</span><span class="params">($prefix, $paths)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!$prefix) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;fallbackDirsPsr4 = (<span class="keyword">array</span>) $paths;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $length = strlen($prefix);</div><div class="line">        <span class="keyword">if</span> (<span class="string">'\\'</span> !== $prefix[$length - <span class="number">1</span>]) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \InvalidArgumentException(</div><div class="line">                  <span class="string">"A non-empty PSR-4 prefix must end with a namespace separator."</span></div><div class="line">                );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$prefix[<span class="number">0</span>]][$prefix] = $length;</div><div class="line">        <span class="keyword">$this</span>-&gt;prefixDirsPsr4[$prefix] = (<span class="keyword">array</span>) $paths;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PSR4初始化接口也很简单。如果没有顶级命名空间，就直接保存目录。如果有命名空间的话，要保证顶级命名空间最后是 <code>\</code> ，然后分别保存。</p><p>总结下上面的顶级命名空间映射过程：</p><pre><code>( 前缀 -&gt; 顶级命名空间，顶级命名空间 -&gt; 顶级命名空间长度 )( 顶级命名空间 -&gt; 目录 )</code></pre><p>这两个映射数组。具体形式也可以查看下面的 <code>autoload_static</code> 的 prefixLengthsPsr4 、 $prefixDirsPsr4 。</p><h4 id="命名空间映射"><a href="#命名空间映射" class="headerlink" title="命名空间映射"></a>命名空间映射</h4><p>autoload_classmap：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> $classMap = <span class="keyword">array</span> (</div><div class="line">    <span class="string">'App\\Console\\Kernel'</span></div><div class="line">=&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Console/Kernel.php'</span>,</div><div class="line"></div><div class="line">    <span class="string">'App\\Exceptions\\Handler'</span></div><div class="line">=&gt; <span class="keyword">__DIR__</span> . <span class="string">'/../..'</span> . <span class="string">'/app/Exceptions/Handler.php'</span>,</div><div class="line">    ...</div><div class="line">)</div></pre></td></tr></table></figure><p>addClassMap:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addClassMap</span><span class="params">(array $classMap)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;classMap) &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;classMap = array_merge(<span class="keyword">$this</span>-&gt;classMap, $classMap);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;classMap = $classMap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>自动加载核心类 ClassLoader 的静态初始化到这里就完成了！</strong></p><p>其实说是5部分，真正重要的就两部分——初始化与注册。初始化负责顶层命名空间的目录映射，注册负责实现顶层以下的命名空间映射规则。</p><h3 id="第四部分-——-注册"><a href="#第四部分-——-注册" class="headerlink" title="第四部分 —— 注册"></a>第四部分 —— 注册</h3><hr><p>讲完了 Composer 自动加载功能的启动与初始化，经过启动与初始化，自动加载核心类对象已经获得了顶级命名空间与相应目录的映射，也就是说，如果有命名空间 ‘App\Console\Kernel，我们已经可以找到它对应的类文件所在位置。那么，它是什么时候被触发去找的呢？</p><p>这就是 composer 自动加载的核心了，我们先回顾一下自动加载引导类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span></div><div class="line"> &#123;</div><div class="line">    <span class="comment">/***************************经典单例模式********************/</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> !== <span class="keyword">self</span>::$loader) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$loader;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/***********************获得自动加载核心类对象********************/</span></div><div class="line">    spl_autoload_register(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit</span></div><div class="line">    7b790917ce8899df9af8ed53631a1c29', <span class="string">'loadClassLoader'</span>), <span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>::$loader = $loader = <span class="keyword">new</span> \Composer\Autoload\ClassLoader();</div><div class="line">    </div><div class="line">    spl_autoload_unregister(<span class="keyword">array</span>(<span class="string">'ComposerAutoloaderInit</span></div><div class="line">    7b790917ce8899df9af8ed53631a1c29', <span class="string">'loadClassLoader'</span>));</div><div class="line"></div><div class="line">    <span class="comment">/***********************初始化自动加载核心类对象********************/</span></div><div class="line">    $useStaticLoader = PHP_VERSION_ID &gt;= <span class="number">50600</span> &amp;&amp; </div><div class="line">    !defined(<span class="string">'HHVM_VERSION'</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">        <span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_static.php'</span>;</div><div class="line"></div><div class="line">        call_user_func(\Composer\Autoload\ComposerStaticInit</div><div class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29::getInitializer($loader));</div><div class="line">  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_namespaces.php'</span>;</div><div class="line">        <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">            $loader-&gt;set($namespace, $path);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $map = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_psr4.php'</span>;</div><div class="line">        <span class="keyword">foreach</span> ($map <span class="keyword">as</span> $namespace =&gt; $path) &#123;</div><div class="line">            $loader-&gt;setPsr4($namespace, $path);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $classMap = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_classmap.php'</span>;</div><div class="line">        <span class="keyword">if</span> ($classMap) &#123;</div><div class="line">            $loader-&gt;addClassMap($classMap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/***********************注册自动加载核心类对象********************/</span></div><div class="line">    $loader-&gt;register(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">/***********************自动加载全局函数********************/</span></div><div class="line">    <span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">        $includeFiles = Composer\Autoload\ComposerStaticInit</div><div class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29::$files;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class="line">        composerRequire</div><div class="line">        <span class="number">7</span>b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $loader;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在我们开始引导类的第四部分：注册自动加载核心类对象。我们来看看核心类的 register() 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">($prepend = false)</span></span></div><div class="line">&#123;</div><div class="line">    spl_autoload_register(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="string">'loadClass'</span>), <span class="keyword">true</span>, $prepend);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一行代码实现自动加载！</p><p>其实奥秘都在自动加载核心类 ClassLoader 的 loadClass() 函数上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($file = <span class="keyword">$this</span>-&gt;findFile($class)) &#123;</div><div class="line">            includeFile($file);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>这个函数负责按照 PSR 标准将顶层命名空间以下的内容转为对应的目录，也就是上面所说的将  ‘App\Console\Kernel 中’ Console\Kernel 这一段转为目录，至于怎么转的在下面 “运行”的部分讲。核心类 ClassLoader 将 loadClass() 函数注册到PHP SPL中的 spl_autoload_register() 里面去。这样，每当PHP遇到一个不认识的命名空间的时候，PHP会自动调用注册到 spl_autoload_register 里面的 loadClass() 函数，然后找到命名空间对应的文件。</p><h2 id="全局函数的自动加载"><a href="#全局函数的自动加载" class="headerlink" title="全局函数的自动加载"></a>全局函数的自动加载</h2><p> Composer 不止可以自动加载命名空间，还可以加载全局函数。怎么实现的呢？把全局函数写到特定的文件里面去，在程序运行前挨个 require就行了。这个就是 composer 自动加载的第五步，加载全局函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($useStaticLoader) &#123;</div><div class="line">    $includeFiles = Composer\Autoload\ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $includeFiles = <span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">'/autoload_files.php'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class="line">    composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>跟核心类的初始化一样，全局函数自动加载也分为两种：静态初始化和普通初始化，静态加载只支持PHP5.6以上并且不支持HHVM。</p><h3 id="静态初始化："><a href="#静态初始化：" class="headerlink" title="静态初始化："></a>静态初始化：</h3><p>  <code>ComposerStaticInit7b790917ce8899df9af8ed53631a1c29::$files：</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> $files = <span class="keyword">array</span> (</div><div class="line"><span class="string">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</div><div class="line"><span class="string">'667aeda72477189d0494fecd327c3641'</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/symfony/var-dumper/Resources/functions/dump.php'</span>,</div><div class="line">...</div><div class="line">);</div></pre></td></tr></table></figure><h3 id="普通初始化"><a href="#普通初始化" class="headerlink" title="普通初始化"></a>普通初始化</h3><p>autoload_files:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$vendorDir = dirname(dirname(<span class="keyword">__FILE__</span>));</div><div class="line">$baseDir = dirname($vendorDir);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line"><span class="string">'0e6d7bf4a5811bfa5cf40c5ccd6fae6a'</span> =&gt; $vendorDir . <span class="string">'/symfony/polyfill-mbstring/bootstrap.php'</span>,</div><div class="line"><span class="string">'667aeda72477189d0494fecd327c3641'</span> =&gt; $vendorDir . <span class="string">'/symfony/var-dumper/Resources/functions/dump.php'</span>,</div><div class="line">   ....</div><div class="line">);</div></pre></td></tr></table></figure><p>其实跟静态初始化区别不大。</p><h3 id="加载全局函数"><a href="#加载全局函数" class="headerlink" title="加载全局函数"></a>加载全局函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComposerAutoloaderInit7b790917ce8899df9af8ed53631a1c29</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLoader</span><span class="params">()</span></span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">foreach</span> ($includeFiles <span class="keyword">as</span> $fileIdentifier =&gt; $file) &#123;</div><div class="line">        composerRequire7b790917ce8899df9af8ed53631a1c29($fileIdentifier, $file);</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">composerRequire7b790917ce8899df9af8ed53631a1c29</span><span class="params">($fileIdentifier, $file)</span></span></div><div class="line"> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(\$GLOBALS[<span class="string">'__composer_autoload_files'</span>][\$fileIdentifier])) &#123;</div><div class="line">        <span class="keyword">require</span> $file;</div><div class="line"></div><div class="line">        $GLOBALS[<span class="string">'__composer_autoload_files'</span>][$fileIdentifier] = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第五部分-——-运行"><a href="#第五部分-——-运行" class="headerlink" title="第五部分 —— 运行"></a>第五部分 —— 运行</h3><p>到这里，终于来到了核心的核心—— composer 自动加载的真相，命名空间如何通过 composer 转为对应目录文件的奥秘就在这一章。<br>前面说过，ClassLoader 的 register() 函数将 loadClass() 函数注册到 PHP 的 SPL 函数堆栈中，每当 PHP 遇到不认识的命名空间时就会调用函数堆栈的每个函数，直到加载命名空间成功。所以 loadClass() 函数就是自动加载的关键了。</p><p> 看下 loadClass() 函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadClass</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($file = <span class="keyword">$this</span>-&gt;findFile($class)) &#123;</div><div class="line">        includeFile($file);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findFile</span><span class="params">($class)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">'\\'</span> == $class[<span class="number">0</span>]) &#123;</div><div class="line">        $class = substr($class, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// class map lookup</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;classMap[$class])) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classMap[$class];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;classMapAuthoritative) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $file = <span class="keyword">$this</span>-&gt;findFileWithExtension($class, <span class="string">'.php'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Search for Hack files if we are running on HHVM</span></div><div class="line">    <span class="keyword">if</span> ($file === <span class="keyword">null</span> &amp;&amp; defined(<span class="string">'HHVM_VERSION'</span>)) &#123;</div><div class="line">        $file = <span class="keyword">$this</span>-&gt;findFileWithExtension($class, <span class="string">'.hh'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($file === <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Remember that this class does not exist.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;classMap[$class] = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $file;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们看到 loadClass() ，主要调用 findFile() 函数。findFile() 在解析命名空间的时候主要分为两部分：classMap 和 findFileWithExtension() 函数。classMap 很简单，直接看命名空间是否在映射数组中即可。麻烦的是 findFileWithExtension() 函数，这个函数包含了 PSR0 和 PSR4 标准的实现。还有个值得我们注意的是查找路径成功后 includeFile() 仍然是外面的函数，并不是 ClassLoader 的成员函数，原理跟上面一样，防止有用户写 $this 或 self。还有就是如果命名空间是以\开头的，要去掉\然后再匹配。</p><p> 看下 findFileWithExtension 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findFileWithExtension</span><span class="params">($class, $ext)</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">// PSR-4 lookup</span></div><div class="line">$logicalPathPsr4 = strtr($class, <span class="string">'\\'</span>, DIRECTORY_SEPARATOR) . $ext;</div><div class="line"></div><div class="line">$first = $class[<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$first])) &#123;</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixLengthsPsr4[$first] <span class="keyword">as</span> $prefix =&gt; $length) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($class, $prefix)) &#123;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixDirsPsr4[$prefix] <span class="keyword">as</span> $dir) &#123;</div><div class="line">                <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) &#123;</div><div class="line">                    <span class="keyword">return</span> $file;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PSR-4 fallback dirs</span></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr4 <span class="keyword">as</span> $dir) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) &#123;</div><div class="line">        <span class="keyword">return</span> $file;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PSR-0 lookup</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">false</span> !== $pos = strrpos($class, <span class="string">'\\'</span>)) &#123;</div><div class="line">    <span class="comment">// namespaced class name</span></div><div class="line">    $logicalPathPsr0 = substr($logicalPathPsr4, <span class="number">0</span>, $pos + <span class="number">1</span>)</div><div class="line">        . strtr(substr($logicalPathPsr4, $pos + <span class="number">1</span>), <span class="string">'_'</span>, DIRECTORY_SEPARATOR);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// PEAR-like class name</span></div><div class="line">    $logicalPathPsr0 = strtr($class, <span class="string">'_'</span>, DIRECTORY_SEPARATOR) . $ext;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;prefixesPsr0[$first])) &#123;</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;prefixesPsr0[$first] <span class="keyword">as</span> $prefix =&gt; $dirs) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($class, $prefix)) &#123;</div><div class="line">            <span class="keyword">foreach</span> ($dirs <span class="keyword">as</span> $dir) &#123;</div><div class="line">                <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) &#123;</div><div class="line">                    <span class="keyword">return</span> $file;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PSR-0 fallback dirs</span></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;fallbackDirsPsr0 <span class="keyword">as</span> $dir) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) &#123;</div><div class="line">        <span class="keyword">return</span> $file;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PSR-0 include paths.</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;useIncludePath &amp;&amp; $file = stream_resolve_include_path($logicalPathPsr0)) &#123;</div><div class="line">    <span class="keyword">return</span> $file;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="最后小结"><a href="#最后小结" class="headerlink" title="最后小结"></a>最后小结</h3><p>我们通过举例来说下上面代码的流程：</p><p>如果我们在代码中写下 <code>new phpDocumentor\Reflection\Element()</code>，PHP 会通过 SPL_autoload_register 调用 loadClass -&gt; findFile -&gt; findFileWithExtension。步骤如下：</p><blockquote><ul><li>将 \ 转为文件分隔符/，加上后缀php，变成 $logicalPathPsr4, 即 phpDocumentor/Reflection//Element.php;</li><li>利用命名空间第一个字母p作为前缀索引搜索 prefixLengthsPsr4 数组，查到下面这个数组：</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p<span class="string">' =&gt; </span></div><div class="line">       array (</div><div class="line">           'phpDocumentor\\Reflection\\<span class="string">' =&gt; 25,</span></div><div class="line">           'phpDocumentor\\Fake\\<span class="string">' =&gt; 19,</span></div><div class="line">     )</div></pre></td></tr></table></figure><blockquote><ul><li>遍历这个数组，得到两个顶层命名空间 phpDocumentor\Reflection\ 和 phpDocumentor\Fake\</li><li>在这个数组中查找 phpDocumentor\Reflection\Element，找出 phpDocumentor\Reflection\ 这个顶层命名空间并且长度为25。</li><li>在prefixDirsPsr4 映射数组中得到phpDocumentor\Reflection\ 的目录映射为：</li></ul></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">'phpDocumentor\\Reflection\\'</span> =&gt; </div><div class="line">       <span class="keyword">array</span> (</div><div class="line">           <span class="number">0</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-common/src'</span>,</div><div class="line">           <span class="number">1</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/type-resolver/src'</span>,</div><div class="line">           <span class="number">2</span> =&gt; <span class="keyword">__DIR__</span> . <span class="string">'/..'</span> . <span class="string">'/phpdocumentor/reflection-docblock/src'</span>,</div><div class="line">       ),</div></pre></td></tr></table></figure><blockquote><ul><li>遍历这个映射数组，得到三个目录映射；</li><li>查看 “目录+文件分隔符//+substr(\$logicalPathPsr4, \$length)”文件是否存在，存在即返回。这里就是<br><code>&#39;__DIR__/../phpdocumentor/reflection-common/src + substr(phpDocumentor/Reflection/Element.php,25)&#39;</code></li><li>如果失败，则利用 fallbackDirsPsr4 数组里面的目录继续判断是否存在文件</li></ul></blockquote><hr><h4 id="The-end-Thanks"><a href="#The-end-Thanks" class="headerlink" title="The end. Thanks!"></a>The end. Thanks!</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;PHP 自5.3的版本之后，已经重焕新生，命名空间、性状（trait）、闭包、接口、PSR 规范、以及 composer 的出现已经让 PHP 变成了一门现代化的脚本语言。PHP 的生态系统也一直在演进，而 composer 的出现更是彻底的改变了以往构建 PHP 应用的方式，我们可以根据 PHP 的应用需求混合搭配最合适的 PHP 组件。当然这也得益于 PSR 规范的提出。&lt;/p&gt;
&lt;h2 id=&quot;掌握-composer-自动加载原理的好处&quot;&gt;&lt;a href=&quot;#掌握-composer-自动加载原理的好处&quot; class=&quot;headerlink&quot; title=&quot;掌握 composer 自动加载原理的好处&quot;&gt;&lt;/a&gt;掌握 composer 自动加载原理的好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更好的运用 composer 来构建我们的 PHP 应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对 PSR 规范有进一步的了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当需要用到没有 composer 化的第三方库时，可以将其 composer 化来提高工程效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习比较严谨、高深的编码技巧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="composer" scheme="http://www.tenpercent.top/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>对PHP 后期静态绑定的理解</title>
    <link href="http://www.tenpercent.top/2018/03/20/late-static-bindings/"/>
    <id>http://www.tenpercent.top/2018/03/20/late-static-bindings/</id>
    <published>2018-03-19T16:00:00.000Z</published>
    <updated>2018-03-20T16:45:30.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是后期静态绑定"><a href="#什么是后期静态绑定" class="headerlink" title="什么是后期静态绑定"></a>什么是后期静态绑定</h2><p>在看一些框架源码或者是某个项目的代码时，经常能看到后期静态绑定的用法<br>。比如下面这段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">static</span>::$instance)) &#123;</div><div class="line">        <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里用到的就是后期静态绑定。那么，什么是后期静态绑定？</p><p>“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。<br><a id="more"></a></p><p>这里要先说两个概念，一个是转发调用，另一个是非转发调用。</p><ul><li><p>转发调用<br>所谓的“转发调用”（forwarding call）指的是通过以下几种方式进行的静态调用：self::, parent::, static:: 以及 forward_ <em>static</em> _call()。即在进行静态调用时未指名类名的调用属于转发调用。</p></li><li><p>非转发调用<br>非转发调用其实就是明确指定类名的静态调用（foo::bar()）和非静态调用($foo-&gt;bar())。即明确地指定类名的静态调用和非静态调用。</p></li></ul><p>顾名思义，非转发调用前面有类名所以调用的函数一定是属于“这个类的”，不需要转到别的类。转发调用就是由于前期的静态绑定导致在后面调用静态方法时可能“转发到其他的类”</p><p>在PHP的官方文档里，对于后期静态绑定是这样说的：后期静态绑定工作原理是存储了在上一个“非转发调用”（non-forwarding call）中的类名。意思是当我们调用一个转发调用的静态调用时，实际调用的类是上一个非转发调用的类。</p><p>来看两个例子：</p><p>例1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span>::who(); <span class="comment">// 后期静态绑定从这里开始</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">B::test();</div></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">B</div></pre></td></tr></table></figure><p>例2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span>::who();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        A::foo();</div><div class="line">        <span class="keyword">parent</span>::foo();</div><div class="line">        <span class="keyword">self</span>::foo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">who</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>.<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">C::test();</div></pre></td></tr></table></figure><p>以上代码会输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A</div><div class="line">C</div><div class="line">C</div></pre></td></tr></table></figure><p>在这里主要分析下例2。</p><p>1.C::test()，这是一个非转发调用，因为::前面有类名C。</p><p>2.进入test()方法，有三个静态调用 A::foo(),parent::foo(),self::foo(),对于这三个静态调用来说，他们的非转发调用类就是 C。</p><p>3.现在执行A::foo(),这是一个非转发调用。A::foo()中的代码是 static::who(),这是一个转发调用，对于这个转发调用来说他的非转发调用类就是不再是C而是A（因为之前执行了A::foo()）。因此执行的结果为A</p><p>4.现在执行 parent::foo(),这是一个转发调用，转发到哪里呢？就是它的上一个非转发调用的类，也就是类C（在步骤2中提到的）。在这里一定要注意虽然在这之前执行了 A::foo(),但是 parent::foo()的上一个非转发调用的类任然是类C。因此执行的结果是 C.</p><p>5.现在执行 self::foo(),这个和 parent::foo()一样都是转发调用，因此也输出 C。</p><h2 id="使用后期静态绑定的好处"><a href="#使用后期静态绑定的好处" class="headerlink" title="使用后期静态绑定的好处"></a>使用后期静态绑定的好处</h2><p>后期静态绑定目前我看到较多的是用于对象实例化中，在实例化对象时，static 会根据运行时调用的类来决定实例化对象，而 self 则是根据所在位置的类来决定实例化对象。当我们只想实例化子类，并且不希望后续在对子类的使用中由于父类的变化对子类产生影响时，后期静态绑定就能发挥它的作用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是后期静态绑定&quot;&gt;&lt;a href=&quot;#什么是后期静态绑定&quot; class=&quot;headerlink&quot; title=&quot;什么是后期静态绑定&quot;&gt;&lt;/a&gt;什么是后期静态绑定&lt;/h2&gt;&lt;p&gt;在看一些框架源码或者是某个项目的代码时，经常能看到后期静态绑定的用法&lt;br&gt;。比如下面这段：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_null(&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;::$instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里用到的就是后期静态绑定。那么，什么是后期静态绑定？&lt;/p&gt;
&lt;p&gt;“后期绑定”的意思是说，static:: 不再被解析为定义当前方法所在的类，而是在实际运行时计算的。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>关于 RESTful API 设计的总结</title>
    <link href="http://www.tenpercent.top/2017/12/09/RESTful/"/>
    <id>http://www.tenpercent.top/2017/12/09/RESTful/</id>
    <published>2017-12-08T16:00:00.000Z</published>
    <updated>2017-12-09T07:36:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要用-RESTful"><a href="#为什么要用-RESTful" class="headerlink" title="为什么要用 RESTful"></a>为什么要用 RESTful</h2><p>RESTful 给我的最大感觉就是规范、易懂和优雅，一个结构清晰、易于理解的 API 完全可以省去许多无意义的沟通和文档。并且 RESTful 现在越来越流行，</p><p>在开始介绍 RESTful API 之前，先介绍一下 RESTful 架构。</p><h2 id="RESTful-架构"><a href="#RESTful-架构" class="headerlink" title="RESTful 架构"></a>RESTful 架构</h2><p>REST，即Representational State Transfer 的缩写。意为 “ 表现层状态转化 “ 。</p><p>要理解RESTful架构，最好的方法就是去理解 Representational State Transfer 这个词组到底是什么意思，它的每一个词代表了什么涵义。如果把这个名称搞懂了，也就不难体会 REST 是一种什么样的设计。</p><a id="more"></a><h3 id="资源-（Resources）"><a href="#资源-（Resources）" class="headerlink" title="资源 （Resources）"></a>资源 （Resources）</h3><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要获取这个资源，访问它的 URI 就可以，因此 URI 就成了每一个资源的地址或独一无二的识别符。所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的 URI 。</p><h3 id="表现层（Representation）"><a href="#表现层（Representation）" class="headerlink" title="表现层（Representation）"></a>表现层（Representation）</h3><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。<br>比如，文本可以用 txt 格式表现，也可以用 HTML 格式、 XML 格式、JSON 格式表现，甚至可以采用二进制格式；图片可以用 JPG 格式表现，也可以用 PNG 格式表现。<br>URI 只代表资源的实体，不代表它的形式。严格地说，有些网址最后的” .html “后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而 URI 应该只代表”资源”的位置。它的具体表现形式，应该在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对”表现层”的描述。</p><h3 id="状态转化（State-Transfer）"><a href="#状态转化（State-Transfer）" class="headerlink" title="状态转化（State Transfer）"></a>状态转化（State Transfer）</h3><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。<br>互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。<br>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET 、 POST 、 PUT 、 DELETE 。 它们分别对应四种基本操作： GET 用来获取资源， POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>总结一下什么是RESTful架构：</p><ul><li>每一个URI代表一种资源；</li><li>客户端和服务器之间，传递这种资源的某种表现层；</li><li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li></ul><h2 id="RESTful-API-的设计"><a href="#RESTful-API-的设计" class="headerlink" title="RESTful API 的设计"></a>RESTful API 的设计</h2><p>介绍完 RESTful 的含义，再说说 RESTful API 的设计。</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>如果能全站 HTTPS 当然是最好的，不能的话也请尽量将登录、注册等涉及密码的接口使用 HTTPS。</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>应该尽量将API部署在专用域名之下。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://api.example.com</div></pre></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://example.org/api/</div></pre></td></tr></table></figure><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>API 的版本号和客户端 APP 的版本号是毫无关系的，不要让 APP 将它们用于提交应用市场的版本号传递到服务器，而是提供类似于v1、v2之类的 API 版本号。</p><p>版本号拼接在 URL 中。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">api.example.com/v1/users</div></pre></td></tr></table></figure><p>或是放在 Header 中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">api.xxx.com/users</div><div class="line"></div><div class="line">version=v1</div></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>一般来说 API 的外在形式无非就是增删改查（当然具体的业务逻辑肯定要复杂得多），而查询又分为详情和列表两种，在 RESTful 中这就相当于通用的模板。例如针对文章（Article）设计 API，那么最基础的 URL 就是这几种：</p><ul><li><code>GET /articles</code>： 文章列表</li><li><code>GET /articles/id</code>：文章详情</li><li><code>POST /articles/</code>： 创建文章</li><li><code>PUT /articles/id</code>：修改文章</li><li><code>DELETE /articles/id</code>：删除文章</li></ul><h3 id="Token-和-Sign"><a href="#Token-和-Sign" class="headerlink" title="Token 和 Sign"></a>Token 和 Sign</h3><p>API 需要设计成无状态，所以客户端在每次请求时都需要提供有效的 Token 和 Sign，在我看来它们的用途分别是：</p><ul><li>Token 用于证明请求所属的用户，一般都是服务端在登录后随机生成一段字符串（UUID）和登录用户进行绑定，再将其返回给客户端。Token 的状态保持一般有两种方式实现：一种是在用户每次操作都会延长或重置 TOKEN 的生存时间（类似于缓存的机制），另一种是 Token 的生存时间固定不变，但是同时返回一个刷新用的 Token，当 Token 过期时可以将其刷新而不是重新登录。</li><li>Sign 用于证明该次请求合理，所以一般客户端会把请求参数拼接后并加密作为 Sign 传给服务端，这样即使被抓包了，对方只修改参数而无法生成对应的 Sign 也会被服务端识破。当然也可以将时间戳、请求地址和 Token 也混入 Sign，这样 Sign 也拥有了所属人、时效性和目的地。</li></ul><h3 id="业务参数"><a href="#业务参数" class="headerlink" title="业务参数"></a>业务参数</h3><p>在 RESTful 的标准中，PUT 和 PATCH 都可以用于修改操作，它们的区别是 PUT 需要提交整个对象，而 PATCH 只需要提交修改的信息。但是在我看来实际应用中不需要这么麻烦，所以我一律使用 PUT，并且只提交修改的信息。</p><p>另一个问题是在 POST 创建对象时，究竟该用表单提交更好些还是用 JSON 提交更好些。其实两者都可以，在我看来它们唯一的区别是 JSON 可以比较方便的表示更为复杂的结构（有嵌套对象）。另外无论使用哪种，请保持统一，不要两者混用。</p><p>还有一个建议是最好将过滤、分页和排序的相关信息全权交给客户端，包括过滤条件、页数或是游标、每页的数量、排序方式、升降序等，这样可以使 API 更加灵活。但是对于过滤条件、排序方式等，不需要支持所有方式，只需要支持目前用得上的和以后可能会用上的方式即可，并通过字符串枚举解析，这样可见性要更好些。例如：</p><p>搜索，客户端只提供关键词，具体搜索的字段，和搜索方式（前缀、全文、精确）由服务端决定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/users/?query=ScienJus</div></pre></td></tr></table></figure><p>过滤，只需要对已有的情况进行支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/users/?gender=1</div></pre></td></tr></table></figure><p>分页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/users/?page=2&amp;pre_page=20</div></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>尽量使用 HTTP 状态码，常用的有：</p><ul><li>200：请求成功</li><li>201：创建、修改成功</li><li>204：删除成功</li><li>400：参数错误</li><li>401：未登录</li><li>403：禁止访问</li><li>404：未找到</li><li>500：系统错误</li></ul><p>但是有些时候仅仅使用 HTTP 状态码没有办法明确的表达错误信息，所以也可以在里面再包一层自定义的返回码，例如：</p><p>成功时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;code&quot;: 100,</div><div class="line">    &quot;msg&quot;: &quot;成功&quot;,</div><div class="line">    &quot;data&quot;: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;code&quot;: -1000,</div><div class="line">    &quot;msg&quot;: &quot;用户名或密码错误&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>data是真正需要返回的数据，并且只会在请求成功时才存在，msg只用在开发环境，并且只为了开发人员识别。客户端逻辑只允许识别code，并且不允许直接将msg的内容展示给用户。如果这个错误很复杂，无法使用一段话描述清楚，也可以在添加一个doc字段，包含指向该错误的文档的链接。</p><h3 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h3><p>JSON 比 XML 可视化更好，也更加节约流量，所以尽量不要使用 XML。</p><p>创建和修改操作成功后，需要返回该资源的全部信息。</p><p>返回数据不要和客户端界面强耦合，不要在设计 API 时就考虑少查询一张关联表或是少查询 / 返回几个字段能带来多大的性能提升。并且一定要以资源为单位，即使客户端一个页面需要展示多个资源，也不要在一个接口中全部返回，而是让客户端分别请求多个接口。</p><p>最好将返回数据进行加密和压缩，尤其是压缩在移动应用中还是比较重要的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要用-RESTful&quot;&gt;&lt;a href=&quot;#为什么要用-RESTful&quot; class=&quot;headerlink&quot; title=&quot;为什么要用 RESTful&quot;&gt;&lt;/a&gt;为什么要用 RESTful&lt;/h2&gt;&lt;p&gt;RESTful 给我的最大感觉就是规范、易懂和优雅，一个结构清晰、易于理解的 API 完全可以省去许多无意义的沟通和文档。并且 RESTful 现在越来越流行，&lt;/p&gt;
&lt;p&gt;在开始介绍 RESTful API 之前，先介绍一下 RESTful 架构。&lt;/p&gt;
&lt;h2 id=&quot;RESTful-架构&quot;&gt;&lt;a href=&quot;#RESTful-架构&quot; class=&quot;headerlink&quot; title=&quot;RESTful 架构&quot;&gt;&lt;/a&gt;RESTful 架构&lt;/h2&gt;&lt;p&gt;REST，即Representational State Transfer 的缩写。意为 “ 表现层状态转化 “ 。&lt;/p&gt;
&lt;p&gt;要理解RESTful架构，最好的方法就是去理解 Representational State Transfer 这个词组到底是什么意思，它的每一个词代表了什么涵义。如果把这个名称搞懂了，也就不难体会 REST 是一种什么样的设计。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="API" scheme="http://www.tenpercent.top/tags/API/"/>
    
      <category term="RESTful" scheme="http://www.tenpercent.top/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式的总结</title>
    <link href="http://www.tenpercent.top/2017/11/18/observer-pattern/"/>
    <id>http://www.tenpercent.top/2017/11/18/observer-pattern/</id>
    <published>2017-11-17T16:00:00.000Z</published>
    <updated>2017-12-03T08:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><p>观察者模式用于实现对对象进行观察：一旦主体对象状态发生改变，与之关联的观察者对象会收到通知，并进行相应操作。</p><p>举个例子说明：<br>假设一个这样的情景，当公司有一个新员工入职了，入职的当天，HR需要为他办理入职手续，网管需要给他配好电脑和办公用品，部门主管需要带他熟悉部门。传统的编程方式，就是在员工入职这个事件发生的代码之后直接加入处理逻辑,当后续我们需要增加处理逻辑时（比如员工入职后增加培训），代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要改变事件主题的代码。运用观察者模式，将员工的入职作为事件，其他的处理逻辑都做为观察者的操作，那么，当以后需要再增加更多的逻辑时，新增逻辑代码就会很方便。具体代码实现如下。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先定义一个观察者接口，所有的观察者都实现这个接口（为什么要定义成接口呢？因为每一个观察者的具体行为需要具体去实现，用接口定义一个统一的方法，具体的实现交给观察者去实现）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">observer</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>再定义一个事件生成器的抽象类，用来使继承它的事件都具有通知观察者的能力。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EventGenerator</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span> $observers = [];</div><div class="line"></div><div class="line"><span class="comment">//定义一个添加观察者的方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addOberver</span><span class="params">(Observer $observer)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;observers[] = $observer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义一个通知观察者的方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer)</div><div class="line">&#123;</div><div class="line">$observer-&gt;update();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后再来定义事件类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">event</span> <span class="keyword">extends</span> <span class="title">EventGenerator</span></span></div><div class="line">&#123;</div><div class="line"><span class="comment">//定义一个触发观察者的方法</span></div><div class="line"><span class="keyword">public</span> funtion trigger()</div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"Event &lt;br/&gt;"</span>;</div><div class="line"></div><div class="line"><span class="comment">//开始通知观察者</span></div><div class="line"><span class="keyword">$this</span>-&gt;notify();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>开始使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$event = <span class="keyword">new</span> event();</div><div class="line">$event-&gt;trigger();</div></pre></td></tr></table></figure><p>这个时候，当我们要在事件发生的时候增加别的操作，只需要新增观察者就可以了</p><p>新增一个观察者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"操作1&lt;br/&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后使用的时候就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$event = <span class="keyword">new</span> event();</div><div class="line"><span class="comment">// 增加观察者</span></div><div class="line">$event-&gt;addObserver(<span class="keyword">new</span> Observer1);</div><div class="line">$event-&gt;trigger();</div></pre></td></tr></table></figure><p>如果需要在事件发生后再增加操作，只需再新增相应的观察者即可。</p><h2 id="应用观察者模式的好处"><a href="#应用观察者模式的好处" class="headerlink" title="应用观察者模式的好处"></a>应用观察者模式的好处</h2><p>观察者模式解除了主体和具体观察者的耦合，让耦合的双方都依赖于抽象，而不是依赖具体。从而使得各自的变化都不会影响另一边的变化。降低对象之间的耦合度以达到解耦的目的，符合”开闭原则”的要求。</p><h2 id="利用-SPL-实现观察者模式"><a href="#利用-SPL-实现观察者模式" class="headerlink" title="利用 SPL 实现观察者模式"></a>利用 SPL 实现观察者模式</h2><p>PHP 通过内置的 SPL 扩展提供了对观察者模式的原生支持，其中的观察者由 3 个元素组成 ： SplObserver 接口、 SplSubject 接口和 SplObjectStorage 工具类。下面是利用 SPL 实现观察者模式的代码。SPL 的地址见<a href="https://secure.php.net/manual/zh/book.spl.php" target="_blank" rel="external">这里</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver1</span> <span class="keyword">implements</span> <span class="title">SplObserver</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span> . <span class="string">' - '</span> . $subject-&gt;getName();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver2</span> <span class="keyword">implements</span> <span class="title">SplObserver</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span> </span>&#123;</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span> . <span class="string">' - '</span> . $subject-&gt;getName();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">SplSubject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $observers;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;observers = <span class="keyword">new</span> SplObjectStorage();</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(SplObserver $observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;attach($observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">(SplObserver $observer)</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;observers-&gt;detach($observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) &#123;</div><div class="line">            $observer-&gt;update(<span class="keyword">$this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$observer1 = <span class="keyword">new</span> MyObserver1();</div><div class="line">$observer2 = <span class="keyword">new</span> MyObserver2();</div><div class="line"></div><div class="line">$subject = <span class="keyword">new</span> MySubject(<span class="string">"test"</span>);</div><div class="line"></div><div class="line">$subject-&gt;attach($observer1);</div><div class="line">$subject-&gt;attach($observer2);</div><div class="line">$subject-&gt;notify();</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">输出:</div><div class="line"></div><div class="line">MyObserver1 - test</div><div class="line">MyObserver2 - test</div><div class="line">*/</div><div class="line"></div><div class="line">$subject-&gt;detach($observer2);</div><div class="line">$subject-&gt;notify();</div><div class="line"></div><div class="line"><span class="comment">/* </span></div><div class="line">输出:</div><div class="line"></div><div class="line">MyObserver1 - test</div><div class="line">*/</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是观察者模式&quot;&gt;&lt;a href=&quot;#什么是观察者模式&quot; class=&quot;headerlink&quot; title=&quot;什么是观察者模式&quot;&gt;&lt;/a&gt;什么是观察者模式&lt;/h2&gt;&lt;p&gt;观察者模式用于实现对对象进行观察：一旦主体对象状态发生改变，与之关联的观察者对象会收到通知，并进行相应操作。&lt;/p&gt;
&lt;p&gt;举个例子说明：&lt;br&gt;假设一个这样的情景，当公司有一个新员工入职了，入职的当天，HR需要为他办理入职手续，网管需要给他配好电脑和办公用品，部门主管需要带他熟悉部门。传统的编程方式，就是在员工入职这个事件发生的代码之后直接加入处理逻辑,当后续我们需要增加处理逻辑时（比如员工入职后增加培训），代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要改变事件主题的代码。运用观察者模式，将员工的入职作为事件，其他的处理逻辑都做为观察者的操作，那么，当以后需要再增加更多的逻辑时，新增逻辑代码就会很方便。具体代码实现如下。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://www.tenpercent.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——SOLID原则</title>
    <link href="http://www.tenpercent.top/2017/10/14/clean-code-solid/"/>
    <id>http://www.tenpercent.top/2017/10/14/clean-code-solid/</id>
    <published>2017-10-13T16:00:00.000Z</published>
    <updated>2017-10-22T03:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>SOLID 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则</p><ul><li>S: 单一职责原则 (SRP)</li><li>O: 开闭原则 (OCP)</li><li>L: 里氏替换原则 (LSP)</li><li>I: 接口隔离原则 (ISP)</li><li>D: 依赖反转原则 (DIP)</li></ul><h2 id="单一职责原则-Single-Responsibility-Principle-SRP"><a href="#单一职责原则-Single-Responsibility-Principle-SRP" class="headerlink" title="单一职责原则 Single Responsibility Principle (SRP)"></a>单一职责原则 Single Responsibility Principle (SRP)</h2><p>“修改一个类应该只为一个理由”。人们总是易于用一堆方法塞满一个类，如同我们在飞机上只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做的问题是：从概念上这样的类不是高内聚的，并且留下了很多理由去修改它。将你需要修改类的次数降低到最小很重要。这是因为，当有很多方法在类中时，修改其中一处，你很难知晓在代码库中哪些依赖的模块会被影响到。<br><a id="more"></a></p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $user;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">($settings)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;verifyCredentials()) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $user;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $user;</div><div class="line">    <span class="keyword">private</span> $auth;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;user = $user;</div><div class="line">        <span class="keyword">$this</span>-&gt;auth = <span class="keyword">new</span> UserAuth($user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">($settings)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;verifyCredentials()) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="开闭原则-Open-Closed-Principle-OCP"><a href="#开闭原则-Open-Closed-Principle-OCP" class="headerlink" title="开闭原则 Open/Closed Principle (OCP)"></a>开闭原则 Open/Closed Principle (OCP)</h2><p>正如Bertrand Meyer所述，”软件的实体（类, 模块, 函数,等）应该对扩展开放，对修改关闭。”这个原则是在说明应该允许用户在不改变已有代码的情况下增加新的功能。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::__construct();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'ajaxAdapter'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::__construct();</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'nodeAdapter'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $adapter;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($adapter)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        $adapterName = <span class="keyword">$this</span>-&gt;adapter-&gt;getName();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($adapterName === <span class="string">'ajaxAdapter'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeAjaxCall($url);</div><div class="line">        &#125; <span class="keyword">elseif</span> ($adapterName === <span class="string">'httpNodeAdapter'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeHttpCall($url);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// request and return promise</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// request and return promise</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的代码中，对于HttpRequester类中的fetch方法，如果我新增了一个新的xxxAdapter类并且要在fetch方法中用到的话，就需要在HttpRequester类中去修改类（如加上一个elseif 判断），而通过下面的代码，就可很好的解决这个问题。下面代码很好的说明了如何在不改变原有代码的情况下增加新功能。</p><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// request and return promise</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// request and return promise</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $adapter;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;adapter-&gt;request($url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="里氏替换原则-Liskov-Substitution-Principle-LSP"><a href="#里氏替换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏替换原则 Liskov Substitution Principle (LSP)"></a>里氏替换原则 Liskov Substitution Principle (LSP)</h2><p>对这个概念最好的解释是：如果你有一个父类和一个子类，在不改变原有结果正确性的前提下父类和子类可以互换。这个听起来让人有些迷惑，所以让我们来看一个经典的正方形-长方形的例子。从数学上讲，正方形是一种长方形，但是当你的模型通过继承使用了”is-a”的关系时，就不对了。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($area)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;width = $width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">($height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;height = $height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $height;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span><span class="params">($rectangles)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</div><div class="line">        $rectangle-&gt;setWidth(<span class="number">4</span>);</div><div class="line">        $rectangle-&gt;setHeight(<span class="number">5</span>);</div><div class="line">        $area = $rectangle-&gt;getArea(); <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></div><div class="line">        $rectangle-&gt;render($area);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</div><div class="line">renderLargeRectangles($rectangles);</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">($area)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">($width)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;width = $width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">($height)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;height = $height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $length = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setLength</span><span class="params">($length)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;length = $length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> pow(<span class="keyword">$this</span>-&gt;length, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span><span class="params">($rectangles)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</div><div class="line">        <span class="keyword">if</span> ($rectangle <span class="keyword">instanceof</span> Square) &#123;</div><div class="line">            $rectangle-&gt;setLength(<span class="number">5</span>);</div><div class="line">        &#125; <span class="keyword">elseif</span> ($rectangle <span class="keyword">instanceof</span> Rectangle) &#123;</div><div class="line">            $rectangle-&gt;setWidth(<span class="number">4</span>);</div><div class="line">            $rectangle-&gt;setHeight(<span class="number">5</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $area = $rectangle-&gt;getArea(); </div><div class="line">        $rectangle-&gt;render($area);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$shapes = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</div><div class="line">renderLargeRectangles($shapes);</div></pre></td></tr></table></figure><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口隔离原则：”客户端不应该被强制去实现于它不需要的接口”。</p><p>有一个清晰的例子来说明示范这条原则。当一个类需要一个大量的设置项，为了方便不会要求客户端去设置大量的选项，因为在通常他们不需要所有的设置项。使设置项可选有助于我们避免产生”胖接口”</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ....working</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...... eating in lunch break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//.... working much more</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//.... robot can't eat, but it must implement this method</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码中，Robot类并不需要eat()这个方法，但是实现了Emplyee接口，于是只能实现所有的方法了，这使得Robot实现了它并不需要的方法。所以在这里应该对Emplyee接口进行拆分，正确的代码如下：</p><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Workable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Feedable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Feedable</span>, <span class="title">Workable</span></span></div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ....working</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//.... eating in lunch break</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// robot can only work</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Workable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ....working</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="依赖反转原则-Dependency-Inversion-Principle-DIP"><a href="#依赖反转原则-Dependency-Inversion-Principle-DIP" class="headerlink" title="依赖反转原则 Dependency Inversion Principle (DIP)"></a>依赖反转原则 Dependency Inversion Principle (DIP)</h2><p>这条原则说明两个基本的要点：</p><ul><li>高阶的模块不应该依赖低阶的模块，它们都应该依赖于抽象</li><li>抽象不应该依赖于实现，实现应该依赖于抽象</li></ul><p>这条起初看起来有点晦涩难懂，但是如果你使用过php框架（例如 Symfony），你应该见过依赖注入（DI）对这个概念的实现。虽然它们不是完全相通的概念，依赖倒置原则使高阶模块与低阶模块的实现细节和创建分离。可以使用依赖注入（DI）这种方式来实现它。更多的好处是它使模块之间解耦。耦合会导致你难于重构，它是一种非常糟糕的的开发模式。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ....working</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//.... working much more</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $employee;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ....working</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//.... working much more</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $employee;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="别写重复代码-DRY"><a href="#别写重复代码-DRY" class="headerlink" title="别写重复代码 (DRY)"></a>别写重复代码 (DRY)</h2><p>这条原则大家应该都是比较熟悉了。</p><p>尽你最大的努力去避免复制代码，它是一种非常糟糕的行为，复制代码通常意味着当你需要变更一些逻辑时，你需要修改不止一处。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span><span class="params">($developers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($developers <span class="keyword">as</span> $developer) &#123;</div><div class="line">        $expectedSalary = $developer-&gt;calculateExpectedSalary();</div><div class="line">        $experience = $developer-&gt;getExperience();</div><div class="line">        $githubLink = $developer-&gt;getGithubLink();</div><div class="line">        $data = [</div><div class="line">            $expectedSalary,</div><div class="line">            $experience,</div><div class="line">            $githubLink</div><div class="line">        ];</div><div class="line"></div><div class="line">        render($data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span><span class="params">($managers)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($managers <span class="keyword">as</span> $manager) &#123;</div><div class="line">        $expectedSalary = $manager-&gt;calculateExpectedSalary();</div><div class="line">        $experience = $manager-&gt;getExperience();</div><div class="line">        $githubLink = $manager-&gt;getGithubLink();</div><div class="line">        $data = [</div><div class="line">            $expectedSalary,</div><div class="line">            $experience,</div><div class="line">            $githubLink</div><div class="line">        ];</div><div class="line"></div><div class="line">        render($data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">($employees)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</div><div class="line">        $expectedSalary = $employee-&gt;calculateExpectedSalary();</div><div class="line">        $experience = $employee-&gt;getExperience();</div><div class="line">        $githubLink = $employee-&gt;getGithubLink();</div><div class="line">        $data = [</div><div class="line">            $expectedSalary,</div><div class="line">            $experience,</div><div class="line">            $githubLink</div><div class="line">        ];</div><div class="line"></div><div class="line">        render($data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Very good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">($employees)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</div><div class="line">        render([</div><div class="line">            $employee-&gt;calculateExpectedSalary(),</div><div class="line">            $employee-&gt;getExperience(),</div><div class="line">            $employee-&gt;getGithubLink()</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>后记：虽然OOP设计需要遵守如上原则，不过实际的代码设计一定要简单、简单、简单。在实际编码中要根据情况进行取舍，一味遵守原则，而不注重实际情况的话，可能会让你的代码变的难以理解!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SOLID 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S: 单一职责原则 (SRP)&lt;/li&gt;
&lt;li&gt;O: 开闭原则 (OCP)&lt;/li&gt;
&lt;li&gt;L: 里氏替换原则 (LSP)&lt;/li&gt;
&lt;li&gt;I: 接口隔离原则 (ISP)&lt;/li&gt;
&lt;li&gt;D: 依赖反转原则 (DIP)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单一职责原则-Single-Responsibility-Principle-SRP&quot;&gt;&lt;a href=&quot;#单一职责原则-Single-Responsibility-Principle-SRP&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则 Single Responsibility Principle (SRP)&quot;&gt;&lt;/a&gt;单一职责原则 Single Responsibility Principle (SRP)&lt;/h2&gt;&lt;p&gt;“修改一个类应该只为一个理由”。人们总是易于用一堆方法塞满一个类，如同我们在飞机上只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做的问题是：从概念上这样的类不是高内聚的，并且留下了很多理由去修改它。将你需要修改类的次数降低到最小很重要。这是因为，当有很多方法在类中时，修改其中一处，你很难知晓在代码库中哪些依赖的模块会被影响到。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——类和对象部分</title>
    <link href="http://www.tenpercent.top/2017/10/03/clean-code-php-object/"/>
    <id>http://www.tenpercent.top/2017/10/03/clean-code-php-object/</id>
    <published>2017-10-02T16:00:00.000Z</published>
    <updated>2017-10-03T09:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用getter和setter"><a href="#使用getter和setter" class="headerlink" title="使用getter和setter"></a>使用getter和setter</h2><p>在 PHP 中，通过为属性或方法设置 public, protected 和 private 关键字可以实现对属性或方法的可见性控制。不过，通过 getter 和 setter 也可以达到控制可见性的目的，并且在某些场景下它具备一些额外的好处。</p><p>使用 getter和 setter 有以下好处：</p><ul><li>当你除了获取对象之外还想做一些别的事情时，就不用到项目中去查找所有的属性并修改</li><li>使添加验证更简单</li><li>在获取和设置时添加日志和错误处理更方便</li><li>我们可以延迟加载类的属性</li><li>继承了类，你可以重写默认的函数</li></ul><p>另外，这是面向对象的基本设计原则中的开放/封闭原则。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $balance = <span class="number">1000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</div><div class="line"></div><div class="line"><span class="comment">// 买了一双鞋...</span></div><div class="line">$bankAccount-&gt;balance -= <span class="number">100</span>;</div></pre></td></tr></table></figure><a id="more"></a><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $balance;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($balance = <span class="number">1000</span>)</span></span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;balance = $balance;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//做一些事情</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withdrawBalance</span><span class="params">($amount)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($amount &gt; <span class="keyword">$this</span>-&gt;balance) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Amount greater than available balance.'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;balance -= $amount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depositBalance</span><span class="params">($amount)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;balance += $amount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBalance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;balance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</div><div class="line"></div><div class="line"><span class="comment">// 买了一双鞋...</span></div><div class="line">$bankAccount-&gt;withdrawBalance($shoesPrice);</div><div class="line"></div><div class="line"><span class="comment">// 获取结余</span></div><div class="line">$balance = $bankAccount-&gt;getBalance();</div></pre></td></tr></table></figure><h2 id="让对象具有私有或受保护的的成员"><a href="#让对象具有私有或受保护的的成员" class="headerlink" title="让对象具有私有或受保护的的成员"></a>让对象具有私有或受保护的的成员</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;name; <span class="comment">// Employee name: John Doe</span></div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;getName(); <span class="comment">// Employee name: John Doe</span></div></pre></td></tr></table></figure><h2 id="使用组合而不是继承"><a href="#使用组合而不是继承" class="headerlink" title="使用组合而不是继承"></a>使用组合而不是继承</h2><p>这里不是说不使用继承，使用“组合模式”和使用“继承”都有很多好的理由。</p><p>这里想说的是当你本能的要使用继承时就想一想“组合模式”是否能更好帮你的解决问题。</p><p>那么，你可能想知道，“什么时候应该用继承？”， 这取决于你手头上问题。</p><p>以下几点说明了什么时候使用继承会更合适。</p><ul><li>你的继承表达了一个对等（比如”人类是动物”）的关系，不是包含的关系（比如”用户具有用户详情”）</li><li>你能从基类中复用代码</li><li>你想通过修改全局类来对所有派生类进行修改。</li></ul><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line">    <span class="keyword">private</span> $email;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">        <span class="keyword">$this</span>-&gt;email = $email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 因为雇员和税收不是对等关系而是包含的关系</span></div><div class="line"><span class="comment">// 所以这里应用组合比较合适</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $ssn;</div><div class="line">    <span class="keyword">private</span> $salary;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email, $ssn, $salary)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">parent</span>::__construct($name, $email);</div><div class="line"></div><div class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</div><div class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $ssn;</div><div class="line">    <span class="keyword">private</span> $salary;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($ssn, $salary)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</div><div class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line">    <span class="keyword">private</span> $email;</div><div class="line">    <span class="keyword">private</span> $taxData;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $email)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">        <span class="keyword">$this</span>-&gt;email = $email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTaxData</span><span class="params">($ssn, $salary)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;taxData = <span class="keyword">new</span> EmployeeTaxData($ssn, $salary);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用getter和setter&quot;&gt;&lt;a href=&quot;#使用getter和setter&quot; class=&quot;headerlink&quot; title=&quot;使用getter和setter&quot;&gt;&lt;/a&gt;使用getter和setter&lt;/h2&gt;&lt;p&gt;在 PHP 中，通过为属性或方法设置 public, protected 和 private 关键字可以实现对属性或方法的可见性控制。不过，通过 getter 和 setter 也可以达到控制可见性的目的，并且在某些场景下它具备一些额外的好处。&lt;/p&gt;
&lt;p&gt;使用 getter和 setter 有以下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你除了获取对象之外还想做一些别的事情时，就不用到项目中去查找所有的属性并修改&lt;/li&gt;
&lt;li&gt;使添加验证更简单&lt;/li&gt;
&lt;li&gt;在获取和设置时添加日志和错误处理更方便&lt;/li&gt;
&lt;li&gt;我们可以延迟加载类的属性&lt;/li&gt;
&lt;li&gt;继承了类，你可以重写默认的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，这是面向对象的基本设计原则中的开放/封闭原则。&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BankAccount&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $balance = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$bankAccount = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BankAccount();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 买了一双鞋...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$bankAccount-&amp;gt;balance -= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——函数部分</title>
    <link href="http://www.tenpercent.top/2017/10/01/clean-code-php-function/"/>
    <id>http://www.tenpercent.top/2017/10/01/clean-code-php-function/</id>
    <published>2017-09-30T16:00:00.000Z</published>
    <updated>2017-10-01T03:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数参数不要超过两个"><a href="#函数参数不要超过两个" class="headerlink" title="函数参数不要超过两个"></a>函数参数不要超过两个</h2><p>限制函数的参数数量是非常重要的，因为它使你的函数更容易测试。超过三个参数会导致参数之间的组合过多，你必须对每个单独的参数测试大量不同的情况。</p><p>没有参数是最理想的情况，一个或两个参数是可以接受的，三个以上则是应该避免的。这很重要。如果你有两个以上的参数，那么你的函数可能试图做的太多，如果不是，你可能需要将一个高级别的对象传当做参数传进去。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">($title, $body, $buttonText, $cancellable)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuConfig</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $title;</div><div class="line">    <span class="keyword">public</span> $body;</div><div class="line">    <span class="keyword">public</span> $buttonText;</div><div class="line">    <span class="keyword">public</span> $cancellable = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$config = <span class="keyword">new</span> MenuConfig();</div><div class="line">$config-&gt;title = <span class="string">'Foo'</span>;</div><div class="line">$config-&gt;body = <span class="string">'Bar'</span>;</div><div class="line">$config-&gt;buttonText = <span class="string">'Baz'</span>;</div><div class="line">$config-&gt;cancellable = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">(MenuConfig $config)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h2 id="一个函数只做一件事"><a href="#一个函数只做一件事" class="headerlink" title="一个函数只做一件事"></a>一个函数只做一件事</h2><p>这是软件工程中一个重要的原则。这会让你的代码清晰易懂以及易于复用。</p><p>Bad：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">($clients)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> ($clients <span class="keyword">as</span> $client) &#123;</div><div class="line">        $clientRecord = $db-&gt;find($client);</div><div class="line">        <span class="keyword">if</span> ($clientRecord-&gt;isActive()) &#123;</div><div class="line">            email($client);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span><span class="params">($clients)</span></span></div><div class="line">&#123;</div><div class="line">    $activeClients = activeClients($clients);</div><div class="line">    array_walk($activeClients, <span class="string">'email'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">activeClients</span><span class="params">($clients)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> array_filter($clients, <span class="string">'isClientActive'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span><span class="params">($client)</span></span></div><div class="line">&#123;</div><div class="line">    $clientRecord = $db-&gt;find($client);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $clientRecord-&gt;isActive();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="函数名要能说明它是做什么的"><a href="#函数名要能说明它是做什么的" class="headerlink" title="函数名要能说明它是做什么的"></a>函数名要能说明它是做什么的</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$message = <span class="keyword">new</span> Email(...);</div><div class="line"><span class="comment">// 这是什么？一条消息的句柄？还是要写一个文件？（读者的疑问）</span></div><div class="line">$message-&gt;handle();</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$message = <span class="keyword">new</span> Email(...);</div><div class="line"><span class="comment">//  一目了然</span></div><div class="line">$message-&gt;send();</div></pre></td></tr></table></figure><h2 id="函数应该只做一层抽象"><a href="#函数应该只做一层抽象" class="headerlink" title="函数应该只做一层抽象"></a>函数应该只做一层抽象</h2><p>当你有多个层次的抽象时，你的函数就已经做的太多了。拆分这些函数，可以让代码可重用性更高且更易测试。<br>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">($code)</span></span></div><div class="line">&#123;</div><div class="line">    $regexes = [</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    $statements = explode(<span class="string">' '</span>, $code);</div><div class="line">    $tokens = [];</div><div class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</div><div class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $ast = [];</div><div class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</div><div class="line">        <span class="comment">// lex...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</div><div class="line">        <span class="comment">// parse...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Bad too:<br>我们从函数中迁出去了一些工作，但是 parseBetterJSAlternative() 函数还是很复杂，不可测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">($code)</span></span></div><div class="line">&#123;</div><div class="line">    $regexes = [</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    $statements = explode(<span class="string">' '</span>, $code);</div><div class="line">    $tokens = [];</div><div class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</div><div class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</div><div class="line">            $tokens[] = <span class="comment">/* ... */</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $tokens;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span><span class="params">($tokens)</span></span></div><div class="line">&#123;</div><div class="line">    $ast = [];</div><div class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</div><div class="line">        $ast[] = <span class="comment">/* ... */</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $ast;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterJSAlternative</span><span class="params">($code)</span></span></div><div class="line">&#123;</div><div class="line">    $tokens = tokenize($code);</div><div class="line">    $ast = lexer($tokens);</div><div class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</div><div class="line">        <span class="comment">// parse...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><p>最好的解决方案是移除 parseBetterJSAlternative 函数的依赖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">($code)</span></span></div><div class="line">    &#123;</div><div class="line">        $regexes = [</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        ];</div><div class="line"></div><div class="line">        $statements = explode(<span class="string">' '</span>, $code);</div><div class="line">        $tokens = [];</div><div class="line">        <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</div><div class="line">            <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</div><div class="line">                $tokens[] = <span class="comment">/* ... */</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $tokens;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lexer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lexify</span><span class="params">($tokens)</span></span></div><div class="line">    &#123;</div><div class="line">        $ast = [];</div><div class="line">        <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</div><div class="line">            $ast[] = <span class="comment">/* ... */</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $ast;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BetterJSAlternative</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $tokenizer;</div><div class="line">    <span class="keyword">private</span> $lexer;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Tokenizer $tokenizer, Lexer $lexer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;tokenizer = $tokenizer;</div><div class="line">        <span class="keyword">$this</span>-&gt;lexer = $lexer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span><span class="params">($code)</span></span></div><div class="line">    &#123;</div><div class="line">        $tokens = <span class="keyword">$this</span>-&gt;tokenizer-&gt;tokenize($code);</div><div class="line">        $ast = <span class="keyword">$this</span>-&gt;lexer-&gt;lexify($tokens);</div><div class="line">        <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</div><div class="line">            <span class="comment">// parse...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="不要使用标志作为函数的参数"><a href="#不要使用标志作为函数的参数" class="headerlink" title="不要使用标志作为函数的参数"></a>不要使用标志作为函数的参数</h2><p>当你在函数中使用标志来作为参数时，你的函数就不是只做一件事情了，这与我们前面所讲的每个函数只做一件事的原则相违背，所以不要使用标志作为函数的参数。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">($name, $temp = false)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($temp) &#123;</div><div class="line">        touch(<span class="string">'./temp/'</span>.$name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        touch($name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line">    touch($name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line">    touch(<span class="string">'./temp/'</span>.$name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h2><p>如果一个函数做了“拿到一个值并返回一个值或者多个值”以外的事情，那么这个函数就有可能产生副作用，副作用可能是意外的写入了文件、修改了全局变量、或者打钱给了陌生人。</p><p>现在假如你确实要在函数中做一些有可能产生副作用的事情。 比如要写一个文件，你需要做的是将写文件的操作集中到一处，而不是在几个函数或者类里对同一个文件做操作，实现一个服务（函数或者类）去操作它，有且仅有一个。</p><p>关键是要能避免常见的陷阱：像是在没有结构的对象之间共享状态、使用可能被写入任何值的可变数据类型、 不集中处理有可能产生副作用的操作。 如果你能做到这些，你会比绝大多数程序员更快乐。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Global variable referenced by following function.</span></div><div class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></div><div class="line">$name = <span class="string">'Ryan McDermott'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">global</span> $name;</div><div class="line"></div><div class="line">    $name = explode(<span class="string">' '</span>, $name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">splitIntoFirstAndLastName();</div><div class="line"></div><div class="line">var_dump($name); <span class="comment">// ['Ryan', 'McDermott'];</span></div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">($name)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> explode(<span class="string">' '</span>, $name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$name = <span class="string">'Ryan McDermott'</span>;</div><div class="line">$newName = splitIntoFirstAndLastName($name);</div><div class="line"></div><div class="line">var_dump($name); <span class="comment">// 'Ryan McDermott';</span></div><div class="line">var_dump($newName); <span class="comment">// ['Ryan', 'McDermott'];</span></div></pre></td></tr></table></figure><h2 id="不要修改全局变量"><a href="#不要修改全局变量" class="headerlink" title="不要修改全局变量"></a>不要修改全局变量</h2><p>在许多编程语言中污染全局是一种糟糕的做法，因为你的库可能会与另一个库冲突，但是你的库的用户却一无所知，直到在生产环境中爆发异常。让我们来考虑一个例子：如果你想要拿到配置数组怎么办？你可以编写全局函数，如config()，但是它可能与另一个试图做同样事情的库冲突。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span>  [</div><div class="line">        <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $configuration = [];</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $configuration)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;configuration = $configuration;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;configuration[$key]) ? <span class="keyword">$this</span>-&gt;configuration[$key] : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$configuration = <span class="keyword">new</span> Configuration([</div><div class="line">    <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</div><div class="line">]);</div></pre></td></tr></table></figure><h2 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h2><p>人们会问“如果不用 if 语句我该怎么做？”，答案是在许多情况下，你可以用多态来实现同样的效果。那这样做什么好处，还是那句话：“一个函数应该只做一件事”， 当你的类或函数中有了 if 语句，你的函数就不止是只做一件事情了。</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'777'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</div><div class="line">            <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</div><div class="line">            <span class="keyword">case</span> <span class="string">'Cessna'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Airplane</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数参数不要超过两个&quot;&gt;&lt;a href=&quot;#函数参数不要超过两个&quot; class=&quot;headerlink&quot; title=&quot;函数参数不要超过两个&quot;&gt;&lt;/a&gt;函数参数不要超过两个&lt;/h2&gt;&lt;p&gt;限制函数的参数数量是非常重要的，因为它使你的函数更容易测试。超过三个参数会导致参数之间的组合过多，你必须对每个单独的参数测试大量不同的情况。&lt;/p&gt;
&lt;p&gt;没有参数是最理想的情况，一个或两个参数是可以接受的，三个以上则是应该避免的。这很重要。如果你有两个以上的参数，那么你的函数可能试图做的太多，如果不是，你可能需要将一个高级别的对象传当做参数传进去。&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($title, $body, $buttonText, $cancellable)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MenuConfig&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $title;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $body;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $buttonText;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; $cancellable = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MenuConfig();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$config-&amp;gt;title = &lt;span class=&quot;string&quot;&gt;&#39;Foo&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$config-&amp;gt;body = &lt;span class=&quot;string&quot;&gt;&#39;Bar&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$config-&amp;gt;buttonText = &lt;span class=&quot;string&quot;&gt;&#39;Baz&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$config-&amp;gt;cancellable = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createMenu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MenuConfig $config)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码简洁之道——变量部分</title>
    <link href="http://www.tenpercent.top/2017/09/24/clean-code-php/"/>
    <id>http://www.tenpercent.top/2017/09/24/clean-code-php/</id>
    <published>2017-09-23T16:00:00.000Z</published>
    <updated>2017-09-27T13:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>将代码写的简洁并且易读易懂是每一位优秀的coder所应该具备的基本功。</p><p>前几天在github上看到<a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="external">clean-code-php</a>这个项目，感觉很有收获，于是在这里记录一下。</p><h2 id="使用有意义并且可读的变量名称"><a href="#使用有意义并且可读的变量名称" class="headerlink" title="使用有意义并且可读的变量名称"></a>使用有意义并且可读的变量名称</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ymdstr = $moment-&gt;format(<span class="string">'y-m-d'</span>);</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$currentDate = $moment-&gt;format(<span class="string">'y-m-d'</span>);</div></pre></td></tr></table></figure><a id="more"></a><h2 id="对同一只类型的变量使用同样的词汇"><a href="#对同一只类型的变量使用同样的词汇" class="headerlink" title="对同一只类型的变量使用同样的词汇"></a>对同一只类型的变量使用同样的词汇</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getUserInfo();</div><div class="line">getUserData();</div><div class="line">getUserRecord();</div><div class="line">getUserProfile();</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getUser();</div></pre></td></tr></table></figure><h2 id="使用易于查找的命名"><a href="#使用易于查找的命名" class="headerlink" title="使用易于查找的命名"></a>使用易于查找的命名</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里的4是什么鬼??</span></div><div class="line"><span class="keyword">if</span> ($user-&gt;access &amp; <span class="number">4</span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> ACCESS_READ = <span class="number">1</span>;</div><div class="line">    <span class="keyword">const</span> ACCESS_CREATE = <span class="number">2</span>;</div><div class="line">    <span class="keyword">const</span> ACCESS_UPDATE = <span class="number">4</span>;</div><div class="line">    <span class="keyword">const</span> ACCESS_DELETE = <span class="number">8</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($user-&gt;access &amp; User::ACCESS_UPDATE) &#123;</div><div class="line">    <span class="comment">// do edit ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="不要让读者猜"><a href="#不要让读者猜" class="headerlink" title="不要让读者猜"></a>不要让读者猜</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$l = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($l); $i++) &#123;</div><div class="line">    $li = $l[$i];</div><div class="line">    doStuff();</div><div class="line">    doSomeOtherStuff();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// $li 变量代表什么？？？</span></div><div class="line">    dispatch($li);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($locations <span class="keyword">as</span> $location) &#123;</div><div class="line">    doStuff();</div><div class="line">    doSomeOtherStuff();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    dispatch($location);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="避免过深的嵌套"><a href="#避免过深的嵌套" class="headerlink" title="避免过深的嵌套"></a>避免过深的嵌套</h2><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($day) &#123;</div><div class="line">        <span class="keyword">if</span> (is_string($day)) &#123;</div><div class="line">            $day = strtolower($day);</div><div class="line">            <span class="keyword">if</span> ($day === <span class="string">'friday'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'saturday'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'sunday'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($day) &amp;&amp; ! is_string($day)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $openingDays = [</div><div class="line">        <span class="string">'friday'</span>, <span class="string">'saturday'</span>, <span class="string">'sunday'</span></div><div class="line">    ];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> in_array(strtolower($day), $openingDays);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">($n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($n &lt; <span class="number">50</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ($n !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ($n !== <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">($n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ($n === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($n === <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($n &gt; <span class="number">50</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="不要添加不必要的上下文"><a href="#不要添加不必要的上下文" class="headerlink" title="不要添加不必要的上下文"></a>不要添加不必要的上下文</h2><p>如果你的类/对象已经说明了一些信息,不要在你的变量名和属性里重复</p><p>Bad:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $carMake;</div><div class="line">    <span class="keyword">public</span> $carModel;</div><div class="line">    <span class="keyword">public</span> $carColor;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Good:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $make;</div><div class="line">    <span class="keyword">public</span> $model;</div><div class="line">    <span class="keyword">public</span> $color;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参数初始化时设置默认值"><a href="#参数初始化时设置默认值" class="headerlink" title="参数初始化时设置默认值"></a>参数初始化时设置默认值</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">($name = null)</span></span></div><div class="line">&#123;</div><div class="line">    $newName = $name ?: <span class="string">'ABC'</span>;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>设置默认值一个比较明显的好处是，当对一个较早之前已经定义好的函数添加参数时,将新增的参数设置默认值可以省得去修改以前使用该函数的地方。</p><p><a href="https://github.com/chenjiehui/clean-code-php" target="_blank" rel="external">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将代码写的简洁并且易读易懂是每一位优秀的coder所应该具备的基本功。&lt;/p&gt;
&lt;p&gt;前几天在github上看到&lt;a href=&quot;https://github.com/jupeter/clean-code-php&quot;&gt;clean-code-php&lt;/a&gt;这个项目，感觉很有收获，于是在这里记录一下。&lt;/p&gt;
&lt;h2 id=&quot;使用有意义并且可读的变量名称&quot;&gt;&lt;a href=&quot;#使用有意义并且可读的变量名称&quot; class=&quot;headerlink&quot; title=&quot;使用有意义并且可读的变量名称&quot;&gt;&lt;/a&gt;使用有意义并且可读的变量名称&lt;/h2&gt;&lt;p&gt;Bad:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ymdstr = $moment-&amp;gt;format(&lt;span class=&quot;string&quot;&gt;&#39;y-m-d&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$currentDate = $moment-&amp;gt;format(&lt;span class=&quot;string&quot;&gt;&#39;y-m-d&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="代码简洁" scheme="http://www.tenpercent.top/tags/%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B4%81/"/>
    
  </entry>
  
  <entry>
    <title>通俗易懂的谈谈装饰器模式</title>
    <link href="http://www.tenpercent.top/2017/09/17/Decorator-Pattern/"/>
    <id>http://www.tenpercent.top/2017/09/17/Decorator-Pattern/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2017-09-24T12:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在编码的时候，我们为了扩展一个类经常是使用继承方式来实现，随着扩展功能的增多，子类会越来越膨胀，使系统变得不灵活。</p><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。它能让我们在扩展类的时候让系统较好的保持灵活性。</p><p>那么装饰器模式具体是什么样的呢？</p><h2 id="从一个情景开始"><a href="#从一个情景开始" class="headerlink" title="从一个情景开始"></a>从一个情景开始</h2><p>我们有一块地，在这块地上，我们要盖一栋有好几间房间的别墅，每间房间的装修费用都不同，现在，我们要对盖别墅的费用进行计算。</p><p>先定义一个Land类，表示这块地，Land类定义了在这块地上盖别墅需要花钱这个规则。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Land已经定义好了在这块地上盖房需要花钱的这个规则了，但是盖一间房间具体花多少钱呢？<br><a id="more"></a><br>此时我们再定义一个Room类，这个类具体的定义了一个房间建造的基本费用（一个最简单房间，里面啥也没有的）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span> <span class="keyword">extends</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $money = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;money;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后开始建造房间，我们建了两个房间，分别是客厅和餐厅，用LivingRoom类和DiningRoom类来表示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingRoom</span> <span class="keyword">extends</span> <span class="title">Room</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::cost()+<span class="number">200</span>; <span class="comment">//客厅的建造费用在房屋建造费用的基础上多200，比如要买沙发，电视</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiningRoom</span> <span class="keyword">extends</span> <span class="title">Room</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::cost()+<span class="number">100</span>; <span class="comment">//餐厅的建造费用在房屋建造费用的基础上多100，比如买餐桌</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在，我们很容易就能得到建造一间客厅所需的花费</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$livingRoomCost = <span class="keyword">new</span> LivingRoom();</div><div class="line"><span class="keyword">echo</span> $livingRoomCost-&gt;cost();</div></pre></td></tr></table></figure><h2 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h2><p>不过，这样的结构并不具备灵活性，虽然我们可以很容易的分别得出建造一间客厅和建造一间餐厅的费用，但是，如果我买的地比较小，只能把餐厅和客厅建在同一个房间里，那要怎么去计算费用？难道还要很麻烦的去创建一个包含客厅和餐厅的LivingDiningRoom类？这样做的话除了麻烦，还会使代码产生重复。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>为了更好的解决这个问题，我们得做一些调整，同样先声明Land类和Room类，不同的是，引入了一个房间的装饰类RoomDecorator，它继承了Land类，因为没有实现Land类的cost()方法，所以需将它声明为抽象类，并且定义了一个以Land类的对象为参数的构造方法，传入的对象会保存在$land属性中，该属性声明为protected，以便子类访问。具体如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RoomDecorator</span> <span class="keyword">extends</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $land;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Land $land)</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;land = $land;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后我们再重新定义客厅类和餐厅类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingRoom</span> <span class="keyword">extends</span> <span class="title">RoomDecorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;land-&gt;cost()+<span class="number">200</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiningRoom</span> <span class="keyword">extends</span> <span class="title">RoomDecorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;land-&gt;cost()+<span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两个类都扩展自RoomDecorator类，这意味着它们都拥有指向Land对象的引用。当它们的cost()方法被调用时，都会先调用所引用的Land类对象的cost()方法，然后再执行自己特有的操作。</p><p>所以这时候，建造一间客厅所需的费用是这样计算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$livingRoomCost = <span class="keyword">new</span> LivingRoom(<span class="keyword">new</span> Room());</div><div class="line"><span class="keyword">echo</span> $livingRoomCost-&gt;cost(); <span class="comment">//输出1200</span></div></pre></td></tr></table></figure><p>建造一间餐厅所需的费用是这样计算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$diningRoomCost = <span class="keyword">new</span> DiningRoom(<span class="keyword">new</span> Room());</div><div class="line"><span class="keyword">echo</span> $diningRoomCost-&gt;cost(); <span class="comment">//输出1100</span></div></pre></td></tr></table></figure><p>回到刚才的问题，如果我们需计算建造一间包含客厅餐厅的房间所需费用，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$livingRoom = <span class="keyword">new</span> DiningRoom(<span class="keyword">new</span> LivingRoom(<span class="keyword">new</span> Room()));</div><div class="line"><span class="keyword">echo</span> $livingRoom-&gt;cost(); <span class="comment">//输出1300</span></div></pre></td></tr></table></figure><p>看，我们现在计算建造费用的思路是：计算出基础房间的费用 –&gt; 在基础房间上装饰成客厅的费用 –&gt; 在客厅的基础上加装饰餐厅的费用 –&gt; 得到包含客厅餐厅的房间费用。已经不需要麻烦的通过创建一个LivingDiningRoom类来计算包含客厅餐厅的房间建造费用了。</p><p>这便是装饰模式，通过一层一层的装饰，我们可以灵活的得到我们想要的结果。可以轻松的添加新的装饰器类或者新的组件来创建灵活的结构。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span> <span class="keyword">extends</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $money = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;money;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//装饰器</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RoomDecorator</span> <span class="keyword">extends</span> <span class="title">Land</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $land;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Land $land)</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;land = $land;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LivingRoom</span> <span class="keyword">extends</span> <span class="title">RoomDecorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;land-&gt;cost()+<span class="number">200</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiningRoom</span> <span class="keyword">extends</span> <span class="title">RoomDecorator</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cost</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;land-&gt;cost()+<span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$livingRoomCost = <span class="keyword">new</span> LivingRoom(<span class="keyword">new</span> Room());</div><div class="line"><span class="keyword">echo</span> $livingRoomCost-&gt;cost(); <span class="comment">//输出1200</span></div><div class="line"></div><div class="line">$diningRoomCost = <span class="keyword">new</span> DiningRoom(<span class="keyword">new</span> Room());</div><div class="line"><span class="keyword">echo</span> $diningRoomCost-&gt;cost(); <span class="comment">//输出1100</span></div><div class="line"></div><div class="line">$livingDining = <span class="keyword">new</span> DiningRoom(<span class="keyword">new</span> LivingRoom(<span class="keyword">new</span> Room()));</div><div class="line"><span class="keyword">echo</span> $livingDining-&gt;cost(); <span class="comment">//输出1300</span></div></pre></td></tr></table></figure><p>the end.</p><p>happy coding! ^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在编码的时候，我们为了扩展一个类经常是使用继承方式来实现，随着扩展功能的增多，子类会越来越膨胀，使系统变得不灵活。&lt;/p&gt;
&lt;p&gt;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。它能让我们在扩展类的时候让系统较好的保持灵活性。&lt;/p&gt;
&lt;p&gt;那么装饰器模式具体是什么样的呢？&lt;/p&gt;
&lt;h2 id=&quot;从一个情景开始&quot;&gt;&lt;a href=&quot;#从一个情景开始&quot; class=&quot;headerlink&quot; title=&quot;从一个情景开始&quot;&gt;&lt;/a&gt;从一个情景开始&lt;/h2&gt;&lt;p&gt;我们有一块地，在这块地上，我们要盖一栋有好几间房间的别墅，每间房间的装修费用都不同，现在，我们要对盖别墅的费用进行计算。&lt;/p&gt;
&lt;p&gt;先定义一个Land类，表示这块地，Land类定义了在这块地上盖别墅需要花钱这个规则。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Land&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Land已经定义好了在这块地上盖房需要花钱的这个规则了，但是盖一间房间具体花多少钱呢？&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://www.tenpercent.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式的总结</title>
    <link href="http://www.tenpercent.top/2017/09/10/Facade-pattern/"/>
    <id>http://www.tenpercent.top/2017/09/10/Facade-pattern/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2017-09-24T13:11:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>外观模式(Facade Pattern)是一个比较简单的概念，它只是为一个子系统创建一个单一的入口。这样的好处是有助于分离项目中不同的部分，其次，会使得我们在访问代码时变得简洁方便。另外，由于只在一个地方调用子系统，减少了出错的可能性。</p><p>外观模式比较简单，这里就不做过多的赘述了，主要是要吸收该模式减少耦合的思想，直接上代码。<br><a id="more"></a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemA</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationA</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"operationA &lt;br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemB</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationB</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"operationB &lt;br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemC</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">operationC</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"operationC &lt;br&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">protected</span> $systemA;</div><div class="line">  <span class="keyword">protected</span> $systemB;</div><div class="line">  <span class="keyword">protected</span> $systemC;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;systemA = <span class="keyword">new</span> SystemA();</div><div class="line">      <span class="keyword">$this</span>-&gt;systemB = <span class="keyword">new</span> SystemB();</div><div class="line">      <span class="keyword">$this</span>-&gt;systemC = <span class="keyword">new</span> SystemC();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">myOperation</span><span class="params">()</span></span></div><div class="line">  &#123;</div><div class="line">      <span class="keyword">$this</span>-&gt;systemA-&gt;operationA();</div><div class="line">      <span class="keyword">$this</span>-&gt;systemB-&gt;operationB();</div><div class="line">      <span class="keyword">$this</span>-&gt;systemC-&gt;operationC();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$facade = <span class="keyword">new</span> Facade();</div><div class="line">$facade-&gt;myOperation();<span class="comment">//只通过一个入口调用</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用外观模式最大的优点就是子系统与客户端之间是松耦合的关系，客户端不必知道具体有哪些子系统，也无需知道他们是如何工作的，通过引入一个外观类，提供一个客户端间接访问子系统的高级接口。子系统和外观类可以独立运作，修改某一个子系统的内容，不会影响到其他子系统，也不会影响到外观对象。</p><p>不过它的缺点就是它不够灵活，当需要增加一个子系统的时候，需要修改外观类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;外观模式(Facade Pattern)是一个比较简单的概念，它只是为一个子系统创建一个单一的入口。这样的好处是有助于分离项目中不同的部分，其次，会使得我们在访问代码时变得简洁方便。另外，由于只在一个地方调用子系统，减少了出错的可能性。&lt;/p&gt;
&lt;p&gt;外观模式比较简单，这里就不做过多的赘述了，主要是要吸收该模式减少耦合的思想，直接上代码。&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://www.tenpercent.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vagrant 并搭建 LNMP 环境</title>
    <link href="http://www.tenpercent.top/2017/09/03/use-vagrant/"/>
    <id>http://www.tenpercent.top/2017/09/03/use-vagrant/</id>
    <published>2017-09-02T16:00:00.000Z</published>
    <updated>2019-03-06T06:50:46.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vagrant介绍"><a href="#Vagrant介绍" class="headerlink" title="Vagrant介绍"></a>Vagrant介绍</h2><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170905150454262960769.png" alt="20170905150454262960769.png"></p><p>Vagrant 是一个自动化构建虚拟机环境的工具，可以自动化虚拟机的安装和配置流程。</p><p>在团队开发的情况下，我们常常需要在多台机器间同步开发时，有的同事用的 wamp ,有的同事是用的 xampp ，可能在某些配置上的些许不同会导致些许不同或者bug，通过使用 Vagrant ，我们只需要同步 Vagrantfile ，就可以保证各台机器拥有一致的开发环境。也可以通过打包好一个Vagrant box ,供团队的同事使用，这样就能最大程度的保证开发环境一致，避免出现一些没必要的问题从而浪费精力去解决。<br><a id="more"></a></p><h2 id="安装-Vagrant"><a href="#安装-Vagrant" class="headerlink" title="安装 Vagrant"></a>安装 Vagrant</h2><p>1、安装 VirtualBox ,具体安装包直接从官网下载（要下载顺畅的话需翻墙）：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">https://www.virtualbox.org/wiki/Downloads</a></p><p>2、安装 Vagrant，下载地址：<a href="https://releases.hashicorp.com/vagrant" target="_blank" rel="external">https://releases.hashicorp.com/vagrant/</a></p><p>3、下载box镜像，这里我是下载的Ubuntu的box,可以到这个网址上去查找想下载的box：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="external">https://app.vagrantup.com/boxes/search</a></p><p>切换到自己的文件夹下，初始化vagrant环境，生成一个vagrantfile文件，命令如下：</p><ul><li>用 vagrant  命令加 box</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant box add testUbuntu ~/Downloads/ubuntu-14.04-amd64.box</div></pre></td></tr></table></figure><ul><li>初始化虚拟机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant init testUbuntu</div></pre></td></tr></table></figure><ul><li>启动虚拟机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant up</div></pre></td></tr></table></figure><ul><li>进入虚拟机的 Ubuntu 系统</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vagrant ssh</div></pre></td></tr></table></figure><p>接下来还要对虚拟机进行一些配置。</p><p>打开 vagrantfile 文件进行配置，我的配置如下：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170905150454225325210.jpg" alt="20170905150454225325210.jpg"><br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170905150454221966157.jpg" alt="20170905150454221966157.jpg"></p><p>到这里，利用 vagrant 搭建虚拟机环境就基本完成了。</p><ul><li>vagrant 常用命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">vagrant box add     添加box，自动帮你生成vagrantfile</div><div class="line">vagrant init        初始化vagrantfile</div><div class="line">vagrant halt        关闭虚拟机</div><div class="line">vagrant destroy     销毁虚拟机</div><div class="line">vagrant ssh         连接虚拟机</div><div class="line">vagrant reload      重新加载vagarntfile文件</div><div class="line">vagrant suspend     暂时挂起虚拟机</div><div class="line">vagrant status      查看虚拟机运行状态</div><div class="line">vagrant package  --output  打包导出box</div></pre></td></tr></table></figure><h2 id="搭建-LNMP-环境"><a href="#搭建-LNMP-环境" class="headerlink" title="搭建 LNMP 环境"></a>搭建 LNMP 环境</h2><p>使用 vagrant ssh 登录到虚拟机的 Linux 系统上，就可以开始搭建 LNMP 的环境了。</p><p>在安装软件之前，需要对 Ubuntu 系统的镜像源文件 source.list 进行修改一下，可以在网上找一下网易的镜像源或者是阿里搜狐等的镜像源，然后写入 source.list 文件夹里（对源文件先进行下备份）。修改完之后还要运行一下 <code>apt-get update</code> 命令来更新一下镜像源。</p><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>使用<code>apt-get install nginx</code>便可以安装nginx。非常简单。<br>安转完之后，可以使用 <code>curl -I &#39;127.0.0.1&#39;</code>访问一下，看看是否安装成功。</p><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>使用 <code>apt-get install mysql-server mysql-cli</code>  安装MySQL的服务端可客户端，安装的时候需要设置一下密码。安装完之后，通过命令 <code>mysql -uroot -ppassword</code> 命令来登录数据库。</p><h3 id="安装PHP-7-0"><a href="#安装PHP-7-0" class="headerlink" title="安装PHP 7.0"></a>安装PHP 7.0</h3><p>在这里，我使用 Ubuntu 的 PPA 源来安装 PHP 7.0。</p><ul><li>先介绍一下 PPA源</li></ul><blockquote><p>PPA 全称为 Personal Package（个人软件包档案），是 Ubuntu Launchpad 网站提供的一项服务，当然不仅限于 Launchpad 。它允许个人用户上传软件源代码，通过 Launchpad 进行编译并发布为二进制软件包，作为 apt/新立得源供其他用户下载和更新。在Launchpad网站上的每一个用户和团队都可以拥有一个或多个PPA。<br>通常 PPA 源里的软件是官方源里没有的，或者是最新版本的软件。相对于通过 Deb 包安装来说，使用 PPA 的好处是，一旦软件有更新，通过 sudo apt-get upgrade 这样命令就可以直接升级到新版本。</p></blockquote><ul><li>如何通过 PPA 源来安装软件：</li></ul><blockquote><p>我们可以通过 Google 来搜索一些常用软件的 PPA 源，通常的搜索方法是软件名称关键字 + PPA ，或者也可直接到 launchpad.net 上去搜索，搜索到后我们就可以直接用 sudo apt-add-repository 命令把 PPA 源添加到 Source list 中了。<br>比如 FireFox PPA 源：<a href="https://launchpad.net/~ubuntu-mozilla-daily/+archive/ppa" target="_blank" rel="external">https://launchpad.net/~ubuntu-mozilla-daily/+archive/ppa</a> ，我们可以在这里找到 ppa:ubuntu-mozilla-daily/ppa 的字样，然后我们通过以下命令把这个源加入到 source list 中。</p></blockquote><p><code>sudo apt-add-repository ppa:ubuntu-mozilla-daily/ppa</code></p><ul><li>开始安装 PHP 7.0</li></ul><p>第一次使用PPA时，需要先安装一下 python-software-properties 和 software-properties-common</p><p><code>apt-get install python-software-properties software-properties-common</code></p><p>然后便可以开始安装PHP 7.0 了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ add-apt-repository ppa:ondrej/php</div><div class="line"></div><div class="line">$ apt-get update</div></pre></td></tr></table></figure><p>安装PHP的一些扩展</p><p><code>$ apt-get install php7.0-fpm php7.0-mysql php7.0-common php7.0-curl php7.0-cli php7.0-mbstring php7.0-dom</code></p><p>打开 php.ini进行配置</p><p><code>vim /etc/php/7.0/fpm/php.ini</code></p><p>将cgi.fix<strong>pathinfo=1 改成cgi.fix</strong>pathinfo=0,这个配置是为了避免 nginx 产生某个漏洞。具体参考鸟哥的文章<a href="http://www.laruence.com/2010/05/20/1495.html" target="_blank" rel="external">http://www.laruence.com/2010/05/20/1495.html</a></p><p><code>cgi.fix_pathinfo=0</code></p><p>然后重启一下 php-fpm 服务。</p><p>到这里就成功搭建好了 LNMP环境了。</p><p><em>happy codding ! ^_^</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vagrant介绍&quot;&gt;&lt;a href=&quot;#Vagrant介绍&quot; class=&quot;headerlink&quot; title=&quot;Vagrant介绍&quot;&gt;&lt;/a&gt;Vagrant介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170905150454262960769.png&quot; alt=&quot;20170905150454262960769.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vagrant 是一个自动化构建虚拟机环境的工具，可以自动化虚拟机的安装和配置流程。&lt;/p&gt;
&lt;p&gt;在团队开发的情况下，我们常常需要在多台机器间同步开发时，有的同事用的 wamp ,有的同事是用的 xampp ，可能在某些配置上的些许不同会导致些许不同或者bug，通过使用 Vagrant ，我们只需要同步 Vagrantfile ，就可以保证各台机器拥有一致的开发环境。也可以通过打包好一个Vagrant box ,供团队的同事使用，这样就能最大程度的保证开发环境一致，避免出现一些没必要的问题从而浪费精力去解决。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.tenpercent.top/tags/Linux/"/>
    
      <category term="Vagrant" scheme="http://www.tenpercent.top/tags/Vagrant/"/>
    
      <category term="虚拟机" scheme="http://www.tenpercent.top/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>PSR编程规范摘录</title>
    <link href="http://www.tenpercent.top/2017/08/27/PSR-reference/"/>
    <id>http://www.tenpercent.top/2017/08/27/PSR-reference/</id>
    <published>2017-08-26T16:00:00.000Z</published>
    <updated>2017-09-03T17:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章记录一下PHP的编程代码规范，做一个规范的PHPer。</p><p>PSR：即PHP Standards recommendation(PHP推荐标准)。</p><h2 id="PSR-1-基本的代码风格"><a href="#PSR-1-基本的代码风格" class="headerlink" title="PSR-1:基本的代码风格"></a>PSR-1:基本的代码风格</h2><ul><li>PHP标签： PHP标签只使用&lt;?php ?&gt;和&lt;?= ?&gt;，不得使用其他PHP标签句法。</li><li>编码： PHP所有文件都必须使用UTF-8字符集编码。</li><li>目的： 一个PHP文件可以定义符号（类、性状、函数和常量），或者执行有副作用的操作（例如，生成结果或处理数据），但是不能同时做这两件事。</li><li>自动加载： PHP命名空间和类必须遵守PSR-4自动加载器标准。</li><li>类的名称： PHP类的名称必须使用<code>CamelCase</code>这种驼峰式。</li><li>常量的名称：PHP常量的名称必须全部使用大写字母。如果需要，可以使用下划线把单词分开。例如：THIS_VARIABLE</li><li>方法的命名： PHP方法的名称必须使用<code>camelCase</code>这种驼峰式，首字母是小写的，后续的所有单词的首字母都是大写的。如：phpIsAwesome</li></ul><a id="more"></a><h2 id="PSR-2-严格的代码风格"><a href="#PSR-2-严格的代码风格" class="headerlink" title="PSR-2:严格的代码风格"></a>PSR-2:严格的代码风格</h2><p>PSR-2是在PSR-1的基础上进一步的要求。</p><ul><li>缩进 PSR-2推荐的规范要求是使用4个空格缩进（因为空格最可靠，在不同的代码编辑器中渲染的效果基本一致）</li><li>文件和代码 PHP文件的最后一行要有一个空行，而且不能使用PHP关闭标签<code>?&gt;</code>，每行末尾都不能有空格。（这些要求大多数编辑器能帮你做好）</li></ul><blockquote><p>注：PHP文件不写关闭标签的目的是能避免意料之外的输出错误。如果加上关闭标签<code>?&gt;</code>，而且在关闭标签后有空行。那么这个空行会被当成输出导致错误。（例如，设定HTTP头部时）</p></blockquote><ul><li>关键字 对于ture,false和null,PSR-2推荐这些关键字都要使用小写字母的形式。</li><li>命名空间 每个命名空间声明语句后面必须跟着一个空行。使用use关键字导入命名空间时，在一系列的use声明语句后要加一个空行。</li><li>类 PSR-2推荐类定义体的起始括号应该在类名之后新起一行写。如下代码所示：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span> </span></div><div class="line">&#123;</div><div class="line"><span class="comment">//类的定义</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>方法 （直接代码示例如下）</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace Animals //注意这里的命名空间首字母需要大写</div><div class="line"></div><div class="line">class example</div><div class="line">&#123;</div><div class="line">    public function test($params = 1, $params = 'two')//注意这里起始括号和结束括号两边都没有空格</div><div class="line">    &#123;</div><div class="line">    //方法的定义</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>可见性 类中的每个属性和方法都要声明可见性。<code>abstract</code>和<code>final</code>这俩关键字要放在可见性关键字前面。<code>static</code>关键字要放在可见性关键字后面。代码如下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $number = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">static</span>::$number++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>控制结构 控制结构中如if else switch foreach等这些关键字后面都要有一个空格。示例代码如下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (a == b)&#123;  <span class="comment">//注意这里的花括号不用新起一行</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>虽然现在有挺多的编辑器支持根据PSR-1和PSR-2来格式化代码了，不过这些写代码中的规范还是需要记住一下，尽量让自己的代码风格规范一些，这样在日常的工作中也方便团队交流。</p></blockquote><h2 id="PSR-3：日志记录器接口"><a href="#PSR-3：日志记录器接口" class="headerlink" title="PSR-3：日志记录器接口"></a>PSR-3：日志记录器接口</h2><p>PSR-3与前面得规范不同，它是一个接口，规定PHP日志记录器组件可以实现得方法。</p><p>大多数PHP框架都在某种程度上实现了日志功能。为了实现互操作性和专业化，PHP-FIG制定了PSR-3日志记录器接口。若想使用符合PSR-3规范得日志记录器，框架要做到两件重要得事：日志功能委托给第三方库实现；最终用户能选择使用他们喜欢得日志记录器组件。</p><h3 id="编写PSR-3日志记录器"><a href="#编写PSR-3日志记录器" class="headerlink" title="编写PSR-3日志记录器"></a>编写PSR-3日志记录器</h3><p>符合PSR-3推荐规范的PHP日志记录器组件，必须包含一个实现Psr\Log|LoggerInterface接口得PHP类。PSR-3接口复用了系统日志协议，规定要实现以下九个方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">Psr</span>\<span class="title">Log</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LoggerInterface</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">emergency</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alert</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">critial</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">warning</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notice</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">debug</span><span class="params">($message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($level,$message,array $context = array<span class="params">()</span>)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是，我们现在已经不需要自己去编写一个日志记录器了，因为已经有了<strong>Monolog</strong>(可访问packagist这个网站查看介绍)这个十分出色的PHP日志记录器组件了，它几乎提供了开发过程中所有需要的功能。</p><h2 id="PSR-4：自动加载器"><a href="#PSR-4：自动加载器" class="headerlink" title="PSR-4：自动加载器"></a>PSR-4：自动加载器</h2><p>PSR-4描述了一个标准的自动加载器策略。自动加载器策略是指，在运行时按需查找PHP类、接口或者性状，并将其载入PHP解释器。支持PSR-4自动加载器标准的PHP组件和框架，使用同一个自动加载器就能找到相关代码</p><p>在PHP-FIG发布PSR-4推荐规范之前，PHP组件和框架的作者使用<code>__autoload()</code>和<code>spl_autoload_register()</code>函数注册自定义的自动加载器策略。可是，每个PHP组件和框架都使用独特的自动加载器，而且每个加载器使用不同的逻辑查找并加载PHP类、性状和接口。使用这些组件和框架的开发者，在引导PHP应用时必须调用每个组件各自的自动加载器时必须调用每个组件各自的自动加载器。这样在开发中很麻烦。</p><p>如今，得益于PSR-4，我们只需要使用一个自动加载器就能自动加载应用中的所有PHP组件。大多数现代的PHP组件和框架都符合PSR-4规范。</p><h3 id="PSR自动加载策略"><a href="#PSR自动加载策略" class="headerlink" title="PSR自动加载策略"></a>PSR自动加载策略</h3><p>PSR-4自动加载策略依赖PHP命名空间和文件系统目录结构查找并加载PHP类、接口，性状。</p><p>它的精髓是把命名空间的前缀和文件系统中的目录对应起来。例如，<code>\Oreilly\ModernPHP\Chapter1</code>命名空间对应与<code>src/chapter1</code>目录，<code>\Oreilly\ModernPHP\Chapter1\Example</code>类对应于<code>src/Chapter1/Example</code>。</p><h3 id="实现一个PSR-4自动加载器"><a href="#实现一个PSR-4自动加载器" class="headerlink" title="实现一个PSR-4自动加载器"></a>实现一个PSR-4自动加载器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 该代码中，使用SPL注册这个自动加载函数后，遇到下述代码时，这个函数会</div><div class="line">* 自动尝试从/path/to/project/src/Baz/Qux.php文件中加载</div><div class="line">* \Foo\Bar\Baz\Quz类：</div><div class="line">*    new \Foo\Bar\Baz\Qux;</div><div class="line">*    </div><div class="line">*/</div><div class="line"></div><div class="line">spl_autpload_register(<span class="function"><span class="keyword">function</span> <span class="params">($class)</span>)</span>&#123;</div><div class="line"><span class="comment">//这个项目的命名空间前缀</span></div><div class="line">$prefix = <span class="string">'Foo\\Bar\\'</span>;</div><div class="line"></div><div class="line"><span class="comment">//这个命名空间对应的根目录；</span></div><div class="line">$base_url = <span class="keyword">__DIR__</span>.<span class="string">'/src/'</span>;</div><div class="line"></div><div class="line"><span class="comment">//参数传入的类使用这个命名空间前缀吗？</span></div><div class="line">$len = strlen($prefix);</div><div class="line"><span class="keyword">if</span>(strncmp($prefix, $class, $len) !==<span class="number">0</span>)&#123;</div><div class="line"><span class="comment">//不使用，交给注册的下一个自动加载器处理</span></div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取去掉前缀后的类名</span></div><div class="line">$relative_class = substr($class, $len);</div><div class="line"></div><div class="line"><span class="comment">//把命名空间前缀替换成根目录，</span></div><div class="line"><span class="comment">//去掉前缀的类命中，把命名空间分隔符替换成目录分隔符，</span></div><div class="line"><span class="comment">//然后再后面加上.php</span></div><div class="line">$file = $base_dir.str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $relative_class).<span class="string">'.php'</span>;</div><div class="line"></div><div class="line"><span class="comment">//如果文件存在，将其导入</span></div><div class="line"><span class="keyword">if</span>(file_exists($file))&#123;</div><div class="line">    <span class="keyword">require</span> $file;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上代码是一个PSR-4自动加载器的逻辑。不过在现在，我们也无须自己编写一个PSR-4自动加载器了，因为我们可以使用依赖管理器<strong>Composer</strong>自动生成PSR-4自动加载器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章记录一下PHP的编程代码规范，做一个规范的PHPer。&lt;/p&gt;
&lt;p&gt;PSR：即PHP Standards recommendation(PHP推荐标准)。&lt;/p&gt;
&lt;h2 id=&quot;PSR-1-基本的代码风格&quot;&gt;&lt;a href=&quot;#PSR-1-基本的代码风格&quot; class=&quot;headerlink&quot; title=&quot;PSR-1:基本的代码风格&quot;&gt;&lt;/a&gt;PSR-1:基本的代码风格&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PHP标签： PHP标签只使用&amp;lt;?php ?&amp;gt;和&amp;lt;?= ?&amp;gt;，不得使用其他PHP标签句法。&lt;/li&gt;
&lt;li&gt;编码： PHP所有文件都必须使用UTF-8字符集编码。&lt;/li&gt;
&lt;li&gt;目的： 一个PHP文件可以定义符号（类、性状、函数和常量），或者执行有副作用的操作（例如，生成结果或处理数据），但是不能同时做这两件事。&lt;/li&gt;
&lt;li&gt;自动加载： PHP命名空间和类必须遵守PSR-4自动加载器标准。&lt;/li&gt;
&lt;li&gt;类的名称： PHP类的名称必须使用&lt;code&gt;CamelCase&lt;/code&gt;这种驼峰式。&lt;/li&gt;
&lt;li&gt;常量的名称：PHP常量的名称必须全部使用大写字母。如果需要，可以使用下划线把单词分开。例如：THIS_VARIABLE&lt;/li&gt;
&lt;li&gt;方法的命名： PHP方法的名称必须使用&lt;code&gt;camelCase&lt;/code&gt;这种驼峰式，首字母是小写的，后续的所有单词的首字母都是大写的。如：phpIsAwesome&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.tenpercent.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="PHP" scheme="http://www.tenpercent.top/tags/PHP/"/>
    
      <category term="PSR" scheme="http://www.tenpercent.top/tags/PSR/"/>
    
  </entry>
  
  <entry>
    <title>记一个问题的解决：Can&#39;t connect to MySQL server on &#39;x.x.x.x&#39; (61)</title>
    <link href="http://www.tenpercent.top/2017/08/20/ubuntu-mysql/"/>
    <id>http://www.tenpercent.top/2017/08/20/ubuntu-mysql/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2019-03-06T06:50:23.773Z</updated>
    
    <content type="html"><![CDATA[<p>最近在电脑上安装了虚拟机并且使用vagrant配置了基于Ubuntu的LAMP环境，然后在使用本地主机的MySQL客户端连接虚拟机的MySQL时却出现了问题，Google了一圈解决了问题，在此记录下。</p><h4 id="遇到的问题是这样"><a href="#遇到的问题是这样" class="headerlink" title="遇到的问题是这样"></a>遇到的问题是这样</h4><p>Sequel软件提示”Can’t connect to MySQL servet on ‘x.x.x.x’ (61)”错误<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323183453024.png" alt="20170820150323183453024.png"></p><p>搜了一下，找到了这个答案<br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323189677326.png" alt="20170820150323189677326.png"><br><a id="more"></a></p><p>即Linux系统里的MySQL是默认监听127.0.0.1的，也就是说，只有在这个Linux本身才能访问到。</p><p>运行了下<code>netstat -tulpen</code>这个命令，该命令可以查看端口的监听情况，如下图。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323199546700.png" alt="20170820150323199546700.png"></p><p>这里可以看到3306的端口是绑定着127.0.0.1的。</p><p>要更改这个端口绑定，需要修改<code>/etc/mysql/my.cnf</code> 这个MySQL配置文件。</p><p><strong>注意：MySQL 7.0以上版本得，该配置文件得路径是/etc/mysql/mysql.conf.d/mysqld.cnf 这个地址</strong></p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323206225990.png" alt="20170820150323206225990.png"></p><p>在my.cnf文件中找到 <code>bind-address  = 127.0.0.1</code> 这一行，然后将127.0.0.1改成 0.0.0.0 ，0.0.0.0的意思就是指任何ip地址。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323211355317.png" alt="20170820150323211355317.png"></p><p>修改之后重启一下MySQL，这时我们再看一下端口绑定情况就可以看到3306这个端口已经绑定成0.0.0.0了。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323221135764.png" alt="20170820150323221135764.png"></p><h4 id="但是，还没有大功告成"><a href="#但是，还没有大功告成" class="headerlink" title="但是，还没有大功告成"></a>但是，还没有大功告成</h4><p>在本地主机再次尝试连接MySQL，却出现<strong>“Host ‘192.168.100.100’ is not allowed to connect to this MySQL server”</strong></p><p>这个问题是在本地主机使用的登录账户不被允许远程登录到虚拟机的Linux上。<br>可以先看一下虚拟机里Linux的MySQL用户情况</p><p>运行以下命令可以看到：</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323448379491.png" alt="20170820150323448379491.png"><br><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323236490421.png" alt="20170820150323236490421.png"></p><p>这里的登录账户都是在localhost的。</p><p>所以我们需要手动添加一个可以远程访问的账户。</p><p>添加的方法如下：</p><ul><li>添加用户root使用password从任何主机连接到MySQL服务器的话。语句如下：</li></ul><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code></p><ul><li>添加用户root从ip为192.168.1.1的主机连接到mysql服务器，并使用password作为密码</li></ul><p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.1&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code></p><ul><li>添加用户root从ip为192.168.1.1的主机连接到mysql服务器的dk数据库，并使用password作为密码</li></ul><p><code>GRANT ALL PRIVILEGES ON dk.* TO &#39;root&#39;@&#39;192.168.1.1&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</code></p><p>这里我使用的是第一条语句，执行完之后，再查看MySQL的用户情况就可以看到多出了一个root账户，并且其主机ip是任意的。</p><p><img src="https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323244241334.png" alt="20170820150323244241334.png"></p><p>到这里，就可以在本地主机的MySQL客户端上愉快的访问到虚拟机里的MySQL啦！！</p><p><em>后记</em>：</p><p>最近折腾了一下vagrant配置虚拟机上的开发环境（具体过程后续会再写一篇文章），又配了一遍LAMP的环境，对Linux的系统更加熟悉了一点。虽然期间会被各种问题卡住，不过解决了问题之后，就会又多懂了一些知识。感觉收获满满，哈哈。^_^</p><p>生命的乐趣还是在于折腾呀！！ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在电脑上安装了虚拟机并且使用vagrant配置了基于Ubuntu的LAMP环境，然后在使用本地主机的MySQL客户端连接虚拟机的MySQL时却出现了问题，Google了一圈解决了问题，在此记录下。&lt;/p&gt;
&lt;h4 id=&quot;遇到的问题是这样&quot;&gt;&lt;a href=&quot;#遇到的问题是这样&quot; class=&quot;headerlink&quot; title=&quot;遇到的问题是这样&quot;&gt;&lt;/a&gt;遇到的问题是这样&lt;/h4&gt;&lt;p&gt;Sequel软件提示”Can’t connect to MySQL servet on ‘x.x.x.x’ (61)”错误&lt;br&gt;&lt;img src=&quot;https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323183453024.png&quot; alt=&quot;20170820150323183453024.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;搜了一下，找到了这个答案&lt;br&gt;&lt;img src=&quot;https://my-blog-cjh.oss-cn-shanghai.aliyuncs.com/20170820150323189677326.png&quot; alt=&quot;20170820150323189677326.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="总结" scheme="http://www.tenpercent.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Linux" scheme="http://www.tenpercent.top/tags/Linux/"/>
    
      <category term="MySQL" scheme="http://www.tenpercent.top/tags/MySQL/"/>
    
      <category term="Ubuntu" scheme="http://www.tenpercent.top/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
